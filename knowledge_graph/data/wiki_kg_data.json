[
  {
    "title": "知識圖譜",
    "url": "https://zh.wikipedia.org/wiki/知识图谱",
    "summary": "知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系。其基本组成单位是“实体-关系-实体”三元组，以及实体及其相关属性-值对，实体间通过关系相互联结，构成网状的知识结构。知识图谱可以实现Web从网页链接向概念链接转变，支持用户按主题而不是字符串检索，真正实现语义检索。基于知识图谱的搜索引擎，能够以图形方式向用户反馈结构化的知识，用户不必浏览大量网页即能准确定位和深度获取知识。[1]",
    "content": "知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系。其基本组成单位是“实体-关系-实体”三元组，以及实体及其相关属性-值对，实体间通过关系相互联结，构成网状的知识结构。知识图谱可以实现Web从网页链接向概念链接转变，支持用户按主题而不是字符串检索，真正实现语义检索。基于知识图谱的搜索引擎，能够以图形方式向用户反馈结构化的知识，用户不必浏览大量网页即能准确定位和深度获取知识。[1]\n在知识表示中，知识图谱是一種知识库，其中的數據通過图结构的数据模型或拓扑整合而成。知识图谱通常被用来存储彼此之間具有相互联系的實體。[2]1980年代后期，格罗宁根大学和特文特大学联合启动了一个名为知识图谱的项目。Google、Bing和Yahoo等搜索引擎均已引入知識圖譜並在搜索界面的右側顯示。\n知识图谱的概念最早由谷歌2012年5月17日提出，其将知识图谱定义为用于增强搜索引擎功能的辅助知识库。但在知识图谱概念问世之前，语义网络技术的研究领域早已开始。2006年，Berners-Lee提出数据链接（linked data）的思想，推广和完善URI (uniform resource identifier) , RDF (resource description framework) , OWL (Web ontology language) 等技术标准，为知识图谱提供了技术基础条件。[3]\n三元组是知识图谱的一种通用表示方式，即 G =（E, R, S)，其中 E 是知识库中的实体，R 是知识库中的关系，S 代表知识库中的三元组。三元组的基本形式主要包括实体1、关系、实体2和概念、属性、属性值等。实体是知识图谱中的最基本元素，不同的实体间存在不同的关系。概念主要指集合、类别、对象类型、事物的种类，例如人物、地理等；属性主要指对象可能具有的属性、特征、特性、特点以及参数，例如国籍、生日等；属性值主要指对象指定属性的值，例如中国、1988-09-08等。每个实体(概念的外延)可用一个全局唯一确定的ID来标识，每个属性-属性值对(attribute-value pair, AVP) 可用来刻画实体的内在特性，而关系可用来连接两个实体，刻画它们之间的关联。[4]\n知识图谱在逻辑架构上分为两个层次：数据层和模式层。数据层是以事实（fact）为存储单位的图数据库，其事实的基础表达方式就是“实体-关系-实体”或者“实体-属性-属性值”。模式层存储的是经过提炼的知识，借助本体库来规范实体、关系以及实体类型和属性等之间的关系。[1]\n知识图谱的体系架构分为3个部分，分别获取源数据、知识融合和知识计算与知识应用。[5] 知识图谱有两种构建方式，自顶向下和自底向上。在知识图谱发展初期，知识图谱主要借助百科类网站等结构化数据源，提取本体和模式信息，加入到知识库的自顶向下方式构建数据库。现阶段知识图谱大多为公开采集数据并自动抽取资源，经过人工审核后加入到知识库中，这种则是自底向上的构建方式。\n知识抽取（information extraction）是构建知识图谱的第一步，为了从异构数据源中获取候选知识单元，知识抽取技术将自动从半结构化和无结构数据中抽取实体、关系以及实体属性等结构化信息。[6]\n实体抽取\n实体抽取，也称为命名实体识别（named entity recognition，NER），指从源数据中自动识别命名实体，这一步是信息抽取中最基础和关键的部分，因为实体抽取的准确率和召回率对后续知识获取效率和质量影响很大。\n早期实体抽取的准召率不够理想，但在2004年，Lin等采用字典辅助下的最大熵算法，基于Medline论文摘要的GENIA数据集使得实体抽取的准召率均超过70%。[7]2008年，Whitelaw等提出根据已知实体实例进行特征建模，利用模型从海量数据集中得到新的命名实体列表，然后再针对新实体建模，迭代地生成实体标注语料库。[8]2010年，Jain等提出一种面向开放域的无监督学习算法，事先不给实体分类，而是基于实体的语义特征从搜索日志中识别命名实体，然后采用聚类算法对识别出的实体对象进行聚类。[9]\n关系抽取\n经过实体抽取, 知识库目前得到的仅是一系列离散的命名实体,。为了得到更准确的语义信息, 还需要从文本语料中提取出实体之间的关联关系, 以此形成网状的知识结构，这种技术则为关系抽取技术。[1]\n属性抽取\n属性抽取是从不同信息源中采集特定实体的属性信息。例如针对某个公众人物, 可以从网络公开信息中得到其昵称、生日、国籍、教育背景等信息。属性抽取技术能够从各个数据源中汇集属性信息，更完整地表述实体属性。[1]\n通过知识抽取的结果可能存在大量冗余和错误信息，形成的结构化信息也会缺乏层次性和逻辑性，因此需要对抽取来的信息做知识融合，消除歧义概念、剔除冗余和错误概念，提升知识质量。\n知识融合分为实体链接和知识合并两部分。实体链接（entity linking）指将在文本中抽取出来的实体链接到知识库中正确实体。[10]知识合并指从第三方知识库产品或已有数据化数据中获取知识输入，包括合并外部知识库和合并关系数据库。\n通过知识抽取、知识融合得到一系列的基本事实表达，离结构化、网络化的知识体系仍有一段距离。因此还需要针对这些事实表达进行知识加工，包括本体构建、知识推理和质量评估。\n本体构建（ontology）指对概念建模的规范，以形式化方式明确定义概念之间的联系。在知识图谱中，本体位于模式层，用于描述概念层次体系的知识概念模版。[11]\n知识推理指从知识库中已有的实体关系数据经过计算建立新实体关联，从现有知识中发现新知识，拓展和丰富知识网络。例如已知 (乾隆, 父亲, 雍正) 和 (雍正, 父亲, 康熙) , 可以得到 (乾隆, 祖父, 康熙) 或 (康熙, 孙子, 乾隆) 。知识推理的对象除了实体关系，还包括实体的属性值、本体概念层次关系等。例如已知 (老虎, 科, 猫科) 和 (猫科, 目, 食肉目) , 可以推出 (老虎, 目, 食肉目) 。[1]\n因为知识推理的信息基础来源于开放域的信息抽取，可能存在实体识别错误、关系抽取错误等问题，因此知识推理的质量也可能存在对应问题，需要在入知识库之前，将推理得来的知识进行质量评估。2011年，Fader采用人工标注方式对1000个句子中的实体关系三元组进行标注，并作为训练集得到逻辑斯蒂回归模型，用于对REVERB系统的信息抽取结果计算置信度。[12]另外，谷歌的Knowledge Vault从全网范围内抽取结构化的数据信息, 并根据某一数据信息在整个抽取过程中抽取频率对该数据信息的可信度进行评分, 然后利用从可信知识库Freebase中的先验知识对已评分的可信度信息进行修正， 这一方法有效降低对数据信息正误判断的不确定性, 提高知识图谱中知识的质量。[13]\nGoogle Now\nWeb Open Data\nMicrosoft Cortana\nWeb Open Data\nThe World Book\nEncyclopedia\nYAGO KB\nNELL KB\nYAGO KB\nNELL KB\nWikipedia\nWeb Open Data\nWikipedia\n受到算法准召率低、限制条件多、扩展性不好等问题，针对开放域的信息抽取仍面对很大挑战。\n实体消歧、合并外部数据库和关系数据库的应用效果仍有很大提升空间。\n本体构建中的聚类问题、质量评估的标准和指标的建立和知识推理的技术思维限制，都是知识加工的重要难点。",
    "info_box": {},
    "categories": [
      "資訊科學",
      "本體 (電腦科學)",
      "含有英語的條目"
    ],
    "source": "wikipedia"
  },
  {
    "title": "知識圖譜 (消歧義)",
    "url": "https://zh.wikipedia.org/wiki/%E7%9F%A5%E8%AD%98%E5%9C%96%E8%AD%9C_(%E6%B6%88%E6%AD%A7%E7%BE%A9)",
    "summary": "知识图谱可以指：",
    "content": "知识图谱可以指：",
    "info_box": {},
    "categories": [
      "四字消歧义",
      "全部主條目消歧義頁面",
      "全部消歧義頁面"
    ],
    "source": "wikipedia"
  },
  {
    "title": "字符串",
    "url": "https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2",
    "summary": "字符串（英語：string），是由零个或多个字符组成的有限序列。一般记为\n\n\n\ns\n=\n\na\n\n1\n\n\n\na\n\n2\n\n\n…\n\na\n\nn\n\n\n\n\n{\\displaystyle s=a_{1}a_{2}\\dots a_{n}}\n\n（\n\n\n\n0\n≤\nn\n⪇\n∞\n\n\n{\\displaystyle 0\\leq n\\lneq \\infty }\n\n）。它是编程语言中表示文本的数据类型。",
    "content": "字符串（英語：string），是由零个或多个字符组成的有限序列。一般记为\n\n\n\ns\n=\n\na\n\n1\n\n\n\na\n\n2\n\n\n…\n\na\n\nn\n\n\n\n\n{\\displaystyle s=a_{1}a_{2}\\dots a_{n}}\n\n（\n\n\n\n0\n≤\nn\n⪇\n∞\n\n\n{\\displaystyle 0\\leq n\\lneq \\infty }\n\n）。它是编程语言中表示文本的数据类型。\n通常以串的整体作为操作对象，如：在串中查找某个子串、求取一个子串、在串的某个位置上插入一个子串以及删除一个子串等。两个字符串相等的充要条件是：长度相等，并且各个对应位置上的字符都相等。设p、q是两个串，求q在p中首次出现的位置的运算叫做模式匹配。串的两种最基本的存储方式是顺序存储方式和链接存储方式。\n设Σ是叫做字母表的非空有限集合。Σ的元素叫做“符号”或“字符”。在Σ上的字符串（或字）是来自Σ的任何有限序列。[1]例如，如果Σ = {0, 1}，则0101是在Σ之上的字符串。\n字符串的长度是在字符串中字符的数目（序列的长度），它可以是任何非负整数。“空串”是在Σ上的唯一的长度为0的字符串，并被指示为ε或λ。[1][2]\n在Σ上的所有长度为n的字符串的集合指示为Σn。例如，如果Σ = {0, 1}则Σ2 = {00, 01, 10, 11}。注意Σ0 = {ε}对于任何字母表Σ。\n在Σ上的所有任何长度的字符串的集合是Σ的Kleene闭包并被指示为Σ*。依据Σn,\n例如，如果Σ = {0, 1}，则Σ* = {ε, 0, 1, 00, 01, 10, 11, 000, 001, 010, 011,…}。尽管Σ*自身是可数无限的，Σ*的所有元素都有有限长度。\n在Σ上一个字符串的集合（就是Σ*的任何子集）被称为在Σ上的形式语言。例如，如果Σ = {0, 1}，则带有偶数个零的字符串的集合（{ε, 1, 00, 11, 001, 010, 100, 111, 0000, 0011, 0101, 0110, 1001, 1010, 1100, 1111,…}）是在Σ上的形式语言。\n“串接”（英語：concatenation）是Σ*上的重要二元运算。对于Σ*中的两个字符串s和t，它们的串接被定义为在s中的字符序列之后跟随着t中的字符序列，并被指示为st。例如，Σ = {a, b,…, z}，并且s = bear且t = hug，则st = bearhug而ts = hugbear。\n字符串串接是结合性的，但非交换性运算。空串充当单位元；对于任何字符串s，有εs = sε = s。所以，集合Σ*和串接运算形成了幺半群，就是从Σ生成的自由幺半群。此外，长度函数定义了一个从Σ*到非负整数的幺半群同态。\n字符串s被称为是字符串t的“子串”（英語：substring）或“因子”（英語：factor），如果存在（可能为空）字符串u和v使得t = usv。“是其子串”关系定义了在Σ*上的偏序，其最小元是空串。\n经常需要定义在字符串集合上的次序。如果字符表Σ有一个全序（cf. 字母序），则可以定义在Σ*上的叫做词典序的全序。注意因为Σ是有限的，总是可以定义在Σ继而在Σ*上的良好次序。例如，如果Σ = {0, 1}并且0 < 1，则Σ*的词典次序是ε < 0 < 00 < 000 <…< 011 < 0110 <…< 01111 <…< 1 < 10 < 100 <…< 101 <…< 111…\n在形式理论中经常出现一些在字符串上的额外运算。它们在条目字符串运算中给出。\n字符串数据类型是建模在形式字符串的想法上的数据类型（Data type）。字符串是几乎在所有编程语言中都可以实现的非常重要和有用的数据类型。在某些语言中它们可作为基本类型获得，在另一些语言中做为复合类型获得。多数高级语言的语法允许用某种方式引用起来的字符串来表示字符串数据类型的实例；这种元字符串叫做“常值”（英語：literal）或“字串常值”（英語：string literal）。\n尽管形式字符串可以有任意（但有限）的长度，实际语言的字符串的长度经常被限制到一个人工极大值。一般的说，有两种类型的字符串数据类型：“定长字符串”，它有固定的极大长度并且不管是否达到了这个极大值都使用同样数量的内存；和“变长字符串”，它的长度不是专断固定的并且依赖于实际的大小使用可变数量的内存。在现代编程语言中的多数字符串是变长字符串。尽管叫这个名字，所有变长字符串还是在长度上有个极限，一般的说这个极限只依赖于可获得的内存的数量。\n历史上，字符串数据类型为每个字符分配一个字节，尽管精确的字符集随着区域而改变，字符编码足够类似得程序员可以忽略它—同一个系统在不同的区域中使用的字符集组要么让一个字符在同样位置，要么根本就没有它。这些字符集典型的基于ASCII码或EBCDIC码。\n意音文字的语言比如汉语、日语和朝鲜语（合称为CJK）的合理表示需要多于256个字符（每字符一个字节编码的极限）。常规的解决涉及：保持对ASCII码的单字节表示，并使用双字节来表示CJK字形。现存代码在用到它们会导致一些字符串匹配和切断上的问题，严重程度依赖于字符编码是如何设计的。\nUnicode也有些复杂的问题。多数语言有Unicode字符串数据类型（通常是UTF-16，因为它在Unicode补充位面介入之前就被增加了）。在Unicode和本地编码之间转换要求理解本地编码，这对于现存系统要一起传输各种编码的字符串而又没有实际标记出它们用了什么编码就是个问题。\n某些语言如C++把字符串实现为可以用于任何基本类型的模版，但这是个例外而不是规则。\n在一个面向对象语言把字符串表示为对象的情况下，如果值可以在运行期变更，则叫做“可变的”（mutable），如果值在建立后就不可变更了，则叫做“不变的”（immutable）。例如，Ruby有可变字符串，而Python的字符串是不可变的。\n其他语言，最著名的有Prolog和Erlang，避免实现字符串数据类型，转而采用把字符串表示为字符代码的列表的约定。\n一种常用的表示法是使用一个字符代码的数组，每个字符占用一个字节（如在ASCII代码中）或两个字节（如在unicode中）。它的长度可以使用一个结束符（一般是NUL，ASCII代码是0，在C编程语言中使用这种方法）。[3]或者在前面加入一个整数值来表示它的长度（在Pascal语言中使用这种方法）。\n这是一个用NUL结束的字符串的例子，它用10个byte存储，用ASCII表示法：\n上面的字符串的长度为5个字符，但注意它占用6个字节。结束符后的字符没有任何意义。\n这是相同的Pascal字符串：\n当然，可能还有其它的表示法。使用树和列表可以使得一些字符串操作（如插入和删除）更高效。\n一些编程语言设计为编写字符串处理程序更容易编写。这是一些例子：\n很多UNIX实用程序进行简单的字符串处理，并能用于简单地编写一些强大的字符串处理算法。文件和有限流可以像字符串一样查看。\n一些新的编程语言，包括Perl、Python和Ruby，借助正则表达式来帮助文字处理。\n这是一些字符串处理算法，在字符串上进行不同的处理：",
    "info_box": {},
    "categories": [
      "数据结构",
      "字符串",
      "字符编码",
      "数据类型",
      "形式语言",
      "词语组合",
      "語法實體",
      "字符串算法",
      "含有英語的條目"
    ],
    "source": "wikipedia"
  },
  {
    "title": "知识表示",
    "url": "https://zh.wikipedia.org/wiki/%E7%9F%A5%E8%AF%86%E8%A1%A8%E7%A4%BA",
    "summary": "知識表示法，又稱做知識重呈、知識表現、知識表徵，是認知科學和人工智能兩個領域共同存在的問題。在認知科學裡，它關係到人類如何儲存和處理資料。在人工智能裡，其主要目標為儲存知識，讓程式能夠處理，達到人類的智慧。目前這個領域仍然沒有一個完美的答案。",
    "content": "知識表示法，又稱做知識重呈、知識表現、知識表徵，是認知科學和人工智能兩個領域共同存在的問題。在認知科學裡，它關係到人類如何儲存和處理資料。在人工智能裡，其主要目標為儲存知識，讓程式能夠處理，達到人類的智慧。目前這個領域仍然沒有一個完美的答案。\n從人工智能的角度來看，知識表示所牽涉的一些問題計有：",
    "info_box": {},
    "categories": [
      "知识表示",
      "人工智能",
      "科学建模",
      "生物医学信息学",
      "自2013年5月缺少来源的条目",
      "自2020年9月需要從英語維基百科翻譯的條目",
      "自2020年9月需要從粵語維基百科翻譯的條目",
      "含有多个问题的条目",
      "含有英語的條目",
      "全部小作品",
      "語言小作品"
    ],
    "source": "wikipedia"
  },
  {
    "title": "知识库",
    "url": "https://zh.wikipedia.org/wiki/%E7%9F%A5%E8%AF%86%E5%BA%93",
    "summary": "知识库（Knowledge base）是用于知识管理的一种特殊的数据库，以便于有关领域知识的采集、整理以及提取。知识库中的知识源于领域专家，它是求解问题所需领域知识的集合，包括基本事实、规则和其它有关信息。",
    "content": "知识库（Knowledge base）是用于知识管理的一种特殊的数据库，以便于有关领域知识的采集、整理以及提取。知识库中的知识源于领域专家，它是求解问题所需领域知识的集合，包括基本事实、规则和其它有关信息。",
    "info_box": {},
    "categories": [
      "知識",
      "知识表示",
      "数据库",
      "自2018年8月可能带有原创研究的条目",
      "拒绝当选首页新条目推荐栏目的条目",
      "自2018年8月缺少来源的条目"
    ],
    "source": "wikipedia"
  },
  {
    "title": "图论",
    "url": "https://zh.wikipedia.org/wiki/%E5%9C%96%E8%AB%96",
    "summary": "图论（英語：Graph theory），是组合数学分支，和其他数学分支如群论、矩阵论、拓扑学有着密切关系。",
    "content": "图论（英語：Graph theory），是组合数学分支，和其他数学分支如群论、矩阵论、拓扑学有着密切关系。\n图是图论的主要研究对象。图是由若干给定的顶点及连接两顶点的边所构成的图形，这种图形通常用来描述某些事物之间的某种特定关系。顶点用于代表事物，连接两顶点的边则用于表示两个事物间具有这种关系。\n图论起源于著名的柯尼斯堡七桥问题。该问题于1736年被欧拉解决，因此普遍认为欧拉是图论的创始人。[1]\n图论的研究对象相当于一维的单纯複形[2]。\n一般认为，欧拉于1736年出版的关于柯尼斯堡七桥问题的论文是图论领域的第一篇文章[3]。此问题被推广为著名的欧拉路问题，亦即一笔画问题。而此论文与范德蒙的一篇关于骑士周游问题的文章，则是继承了莱布尼茨提出的“位置分析”的方法。欧拉提出的关于凸多边形顶点数、棱数及面数之间的关系的欧拉公式与图论有密切联系，此后又被柯西等人[4][5]进一步研究推广，成了拓扑学的起源。1857年，哈密顿发明了“環遊世界遊戲（英语：icosian game）”（icosian game），与此相关的则是另一个广为人知的图论问题“哈密顿路径问题”。\n西尔维斯特于1878年发表在《自然》上的一篇论文中首次提出“图”这一名词[6]。\n欧拉的论文发表后一个多世纪，凯莱研究了在微分学中出现的一种数学分析的特殊形式，而这最终将他引向对一种特殊的被称为“树”的图的研究。由于有机化学中有许多树状结构的分子，这些研究对于理论化学有着重要意义，尤其是其中关于具有某一特定性质的图的计数问题。除凯莱的成果外，波利亚也于1935至1937年发表了一些成果，1959年，De Bruijn（英语：Nicolaas Govert de Bruijn）做了一些推广。这些研究成果奠定了图的计数理论的基础。凯莱将他关于树的研究成果与当时有关化合物的研究联系起来，而图论中有一部分术语正是来源于这种将数学与化学相联系的做法。\n四色问题可谓是图论研究史上最著名也是产生成果最多的问题之一：“是否任何一幅画在平面上的地图都可以用四种颜色染色，使得任意两个相邻的区域不同色？”这一问题由法兰西斯·古德里于1852年提出，而最早的文字记载则出现在德摩根于1852年写给哈密顿的一封信上。包括凯莱、肯普（英语：Alfred Kempe）等在内的许多人都曾给出过错误的证明。泰特（英语：Peter Guthrie Tait）（Peter Guthrie Tait）、希伍德、拉姆齐和Hadwige（英语：Hugo Hadwiger）（Hugo Hadwiger）对此问题的研究与推广引发了对嵌入具有不同亏格的曲面的图的着色问题的研究。一百多年后，四色问题仍未解决。1969年，Heinrich Heesch（英语：Heinrich Heesch）发表了一个用计算机解决此问题的方法。1976年，凱尼斯·阿佩爾和沃夫冈·哈肯借助计算机给出了一个证明，此方法按某些性质将所有地图分为1936类并利用计算机一一验证了它们可以用四种颜色染色。但此方法由于过于复杂，在当时未被广泛接受。\n1860年之1930年间，若当、库拉托夫斯基和惠特尼从之前独立于图论发展的拓扑学中吸取大量内容进入图论，而现代代数方法的使用更让图论与拓扑走上共同发展的道路。其中应用代数较早者如物理学家基尔霍夫于1845年发表的基尔霍夫电路定律。\n图论中概率方法的引入，尤其是埃尔德什和Alfréd Rényi（英语：Alfréd Rényi）关于随机图连通的渐进概率的研究使得图论产生了新的分支随机图论。\n圖論中有許多定義，以下是一些與之相關最基本的定義。\n圖論中，圖是有序對 \n\n\n\nG\n=\n(\nV\n,\nE\n)\n\n\n{\\displaystyle G=(V,E)}\n\n，其中 \n\n\n\nV\n\n\n{\\displaystyle V}\n\n 是點集；\n\n\n\nE\n⊆\n\n{\n\n\n{\n\nx\n,\ny\n\n}\n\n:\n(\nx\n,\ny\n)\n∈\n\nV\n\n2\n\n\n,\nx\n≠\ny\n\n}\n\n\n\n{\\displaystyle E\\subseteq \\left\\{\\left\\{x,y\\right\\}:(x,y)\\in V^{2},x\\neq y\\right\\}}\n\n 是邊集，由所有無序頂點對構成（換句話說，邊連接了頂點對）。對於一個邊 \n\n\n\n\n{\n\nx\n,\ny\n\n}\n\n\n\n{\\displaystyle \\left\\{x,y\\right\\}}\n\n，頂點 \n\n\n\nx\n,\ny\n\n\n{\\displaystyle x,y}\n\n 被稱作是邊的端點，邊則被稱為連接了此兩個點。\n為了避免歧異，上述的定義被更精準地稱作無向簡單圖。\n事實上可以推廣為更一般的定義：圖是有序三元組 \n\n\n\nG\n=\n(\nV\n,\nE\n,\nϕ\n)\n\n\n{\\displaystyle G=(V,E,\\phi )}\n\n，其中 \n\n\n\nV\n\n\n{\\displaystyle V}\n\n 是點集；\n\n\n\nE\n\n\n{\\displaystyle E}\n\n 是邊集（此時 \n\n\n\nE\n\n\n{\\displaystyle E}\n\n 不再如前面限定是該集合的子集）；而 \n\n\n\nϕ\n:\nE\n→\n\n{\n\n\n{\n\nx\n,\ny\n\n}\n\n:\n(\nx\n,\ny\n)\n∈\n\nV\n\n2\n\n\n\n}\n\n\n\n{\\displaystyle \\phi :E\\to \\left\\{\\left\\{x,y\\right\\}:(x,y)\\in V^{2}\\right\\}}\n\n 將每個邊映射到一個無序頂點對（於是邊連接了頂點對）。此時的定義就允許自環、重邊的出現，其中自環是兩端點相同的邊，重邊是兩個或多個連接相同端點的邊。\n為了避免歧異，上述的定義被更精準地稱作無向圖。\nV\n,\nE\n\n\n{\\displaystyle V,E}\n\n 的元素個數通常都是有限的；並且如果個數是無限的，有許多著名的性質都发生变化，甚至不再正确。此外，\n\n\n\nV\n\n\n{\\displaystyle V}\n\n 通常不被接受是空集合，而 \n\n\n\nE\n\n\n{\\displaystyle E}\n\n 則被接受為空集合。以下再給出一些圖論中的定義：圖的階是其頂點個數 \n\n\n\n\n|\n\nV\n\n|\n\n\n\n{\\displaystyle |V|}\n\n，圖的邊數是 \n\n\n\n\n|\n\nE\n\n|\n\n\n\n{\\displaystyle |E|}\n\n，頂點的度所有邊的端點中此頂點出現的次數（自環會被算兩次）。\n子图同构问题：给定两个图\n\n\n\nG\n\n\n{\\displaystyle G}\n\n和\n\n\n\nH\n\n\n{\\displaystyle H}\n\n，问\n\n\n\nG\n\n\n{\\displaystyle G}\n\n中是否存在一个子图与\n\n\n\nH\n\n\n{\\displaystyle H}\n\n同構。这是一个NP完全问题。\n一类相关的常见问题要求在给定图中寻找符合某些条件的最大子图，其中有很多是NP完全的，如：\n类似地，有些问题要求寻找符合某些条件的最大导出子图，如：\n平面图判定：判定给定的图是否是平面图（此问题与子图的关系，参见库拉托夫斯基定理）\n一个尚未解决的与子图相关的猜想，重构猜想（Reconstruction conjecture）：一个n阶图是否能够由其所有n-1阶导出子图唯一确定？\n许多问题与将图以特定方式染色有关，如：",
    "info_box": {},
    "categories": [
      "分类",
      "分类",
      "离散数学",
      "图论",
      "数学分支",
      "自2024年5月需要從英語維基百科翻譯的條目",
      "自2024年5月需要從西班牙語維基百科翻譯的條目",
      "含有英語的條目",
      "包含BNF标识符的维基百科条目",
      "包含BNFdata标识符的维基百科条目",
      "包含GND标识符的维基百科条目",
      "包含J9U标识符的维基百科条目",
      "包含LCCN标识符的维基百科条目",
      "包含NDL标识符的维基百科条目",
      "包含NKC标识符的维基百科条目"
    ],
    "source": "wikipedia"
  },
  {
    "title": "科学知识图谱",
    "url": "https://zh.wikipedia.org/wiki/%E7%A7%91%E5%AD%A6%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1",
    "summary": "科学知识图谱也称为知识域可视化（Mapping Knowledge Domains），是用于绘制、分析和显示学科或学术研究主体之间的相互联系，用于揭示显示科学知识发展进程与结构关系的可视化工具[1]。在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者、学术机构、科学文献或关键词，使用连线代表作者、机构间的合作关系，文献间的引用关系，以及关键词间的共现关系。",
    "content": "科学知识图谱也称为知识域可视化（Mapping Knowledge Domains），是用于绘制、分析和显示学科或学术研究主体之间的相互联系，用于揭示显示科学知识发展进程与结构关系的可视化工具[1]。在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者、学术机构、科学文献或关键词，使用连线代表作者、机构间的合作关系，文献间的引用关系，以及关键词间的共现关系。\n在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念、实体及其关系。\n绘制科学知识图谱的常用工具包括CiteSpace、Ucinet、Gephi、Bibexcel等[2]。",
    "info_box": {},
    "categories": [
      "信息可视化",
      "圖書館",
      "自2019年2月缺少可靠来源的条目"
    ],
    "source": "wikipedia"
  },
  {
    "title": "图书馆信息学",
    "url": "https://zh.wikipedia.org/wiki/%E5%9B%BE%E4%B9%A6%E6%83%85%E6%8A%A5",
    "summary": "圖書資訊學[註 1]（英語：library and information science, LIS）于20世纪70年代由图书馆学與信息学两大领域合并而成。",
    "content": "圖書資訊學[註 1]（英語：library and information science, LIS）于20世纪70年代由图书馆学與信息学两大领域合并而成。\n一般来说，出版学、图书馆学、情报学、档案学、博物馆学和文献学在文献分类中同属于一个大类，但图书馆学、情报学、档案学和文献学的关系更加紧密，同属一个上位类，而出版学和博物馆学与之关系较远一些。\n情报和訊息都是英文information的汉译，转译自日文。中国大陆目前一般都把情报称为信息，台湾称为资讯。广义上訊息泛指自然界和社会领域传递的一切消息。经过整理而有序化的訊息方可成为情报，也是狭义上訊息的概念。\n图书馆学、情报学、档案学和文献学的联系紧密，但各有侧重。图书馆学侧重于图书馆业务流程和相关学科的研究，包括图书馆哲学、图书馆学理论、图书馆管理和图书馆业务技术等；情报学侧重于情报的分析和利用，包括情报学理论、情报采集、情报分析、情报检索以及二次、三次文献编辑利用，目前情报技术也是研究热点之一。与图书馆学相比，情报学的技术性更强。文献学侧重于研究文献的产生、流传、鉴别和利用问题。档案是一类特殊的文献，可以说是专业文献学之一种，在管理上较多的借鉴图书馆管理和技术方法。\n这些都是比较新兴的学科，处于不断发展之中，各个流派对其认识不尽相同.\n图书馆訊息学就是研究訊息的组织整理，以及通过图书馆等平台实现訊息传递与传播，从而保障訊息有效查询与获取的学问。\n图书馆訊息学包括：",
    "info_box": {
      "中国大陸": "图书馆信息学",
      "臺灣": "圖書資訊學"
    },
    "categories": [
      "科學分類",
      "圖書館類型",
      "图书馆与信息科学",
      "資訊科學",
      "圖書資訊科學",
      "图书馆学家",
      "自2022年10月需补充来源的条目",
      "拒绝当选首页新条目推荐栏目的条目",
      "含有英語的條目"
    ],
    "source": "wikipedia"
  },
  {
    "title": "Google知识图谱",
    "url": "https://zh.wikipedia.org/wiki/Google%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1",
    "summary": "Google知识图谱（英語：Google Knowledge Graph，也称Google知识图）是Google的一个知识库，其使用语义检索从多种来源收集信息，以提高Google搜索的质量。知识图谱2012年加入Google搜索，2012年5月16日正式发布[1]，首先可在美国使用。知识图谱除了显示其他网站的链接列表，还提供结构化及详细的关于主题的信息。其目标是，用户将能够使用此功能提供的信息来解决他们查询的问题，而不必导航到其他网站并自己汇总信息。[2]",
    "content": "Google知识图谱（英語：Google Knowledge Graph，也称Google知识图）是Google的一个知识库，其使用语义检索从多种来源收集信息，以提高Google搜索的质量。知识图谱2012年加入Google搜索，2012年5月16日正式发布[1]，首先可在美国使用。知识图谱除了显示其他网站的链接列表，还提供结构化及详细的关于主题的信息。其目标是，用户将能够使用此功能提供的信息来解决他们查询的问题，而不必导航到其他网站并自己汇总信息。[2]\n据Google称，知识图谱的信息来自许多来源，包括CIA的世界概况，Freebase和维基百科[1]。其功能与Ask.com和Wolfram Alpha等问题問答系統相似。\n截至2012年 (2012-Missing required parameter 1=month!)[update]，其语义网络包含超过570亿个对象，超过18亿个介绍，这些不同的对象之间有链接关系，用来理解搜索关键词的含义。[3][4]\n2012年11月4日，知识图谱新增了7种语言：西班牙语、法语、德语、葡萄牙语、日语、俄罗斯语及意大利语。[5][6]\n在谷歌于2012年发布知识图谱之前，Tim Berners-Lee于2006年就提出了Linked Data，是一种万维网数据上创建语义关联的方法。\n更早之前，语义链网络（Semantic Link Network）已经开始了系统性的研究，目标是创立一个自组织的语义互联方法来表达知识支持智能应用, 系统性的理论和方法作为专著发表于2004年。[7] 之后,于2012年作了新的发展（详细比较了与六十年代提出的语义网Semantic Net的区别）。[8] 语义链网络研究可追溯到1998年继承规则的定义[9]和2003年主动文档框架的研发ADF。[10] 自2003年起它已经面向自组织的语义联网方法发展。[11] [12] 推理和演化以及自动发现隐含规则在语义链网络中起重要作用。Tim Berners-Lee等专家于2006年出版的专著《A Framework for Web Science》就引用了早期关于语义链网络自动发现的工作。[13] 近年来，语义链网络已经发展为支持信息物理社会智能[14] [15]，已经有了许多应用[16]。\n在2013年5月的Google I/O大会上，Google的阿米特·辛格尔提出了未来搜索引擎的设想：搜索引擎的三个主要功能将需要改进，搜索将需要：1.答案，2.对话，3.预测。作为他发表主题演讲的一部分，阿密特说，“一台电脑，你可以与它交谈吗？它会回答你问的吗？我成为我的为整个世界的梦想的负责人。”对话搜索（英語：Conversational search）技术包含阿密特推出的一种“热关键词”的搜索技术，不需要一个接口，即用户只需将Google搜索引擎说“OK Google”。[17]\n在I/O大会上的观众演示，在其中一个用户问了一个关于圣克鲁斯地名的问题，搜索引擎除了查询结果的介绍，还以“谈话”方式回答。Google的约翰娜·怀特解释说，搜索引擎使用知识图谱的数据产生的结果：“知识图谱知道，圣克鲁斯是一个地方，且此列表与圣克鲁斯有关。”[17][18]",
    "info_box": {},
    "categories": [
      "相关分类",
      "Google搜尋",
      "網路搜尋引擎",
      "2012年面世的產品",
      "含有內容需登入查看的頁面",
      "自2017年11月带有失效链接的条目",
      "条目有永久失效的外部链接",
      "含有英語的條目",
      "维基共享资源分类链接使用了维基数据上的匹配项",
      "维基百科和维基数据上的官方网站不同"
    ],
    "source": "wikipedia"
  },
  {
    "title": "计算机科学",
    "url": "https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6",
    "summary": "计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科。[7] [8]它通常被形容为对那些创造、描述以及转换信息的算法处理的系统研究。计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用、好用，以及随时随地为人所用。",
    "content": "计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科。[7] [8]它通常被形容为对那些创造、描述以及转换信息的算法处理的系统研究。计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用、好用，以及随时随地为人所用。\n有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏、上网或者文字处理。其实计算机科学所关注的，不仅仅是去理解实现类似游戏、浏览器这些软件的程序的性质，更要通过现有的知识创造新的程序或者改进已有的程序。[9]\n尽管计算机科学（computer science）的名字里包含计算机这几个字，但实际上计算机科学相当数量的领域都不涉及计算机本身的研究。因此，一些新的名字被提议出来。某些重点大学的院系倾向于术语计算科学（computing science），以精确强调两者之间的不同。丹麦科学家彼得·諾爾建议使用术语\"datalogy\"，以反映这一事实，即科学学科是围绕着数据和数据处理，而不一定要涉及计算机。第一个使用这个术语的科学机构是哥本哈根大学计算科学系（英语：UCPH Department of Computer Science），该学院成立于1969年，彼得·諾爾便是第一任教授。这个术语主要被用于北欧国家。同时，在计算技术发展初期，《ACM通讯》建议了一些针对计算领域从业人员的术语：圖靈工程師（turingineer），turologist，流程圖人（flow-charts-man），應用元數學家（applied meta-mathematician）及應用認識論者（applied epistemologist）。[10] 三个月后在同样的期刊上，comptologist被提出，第二年又变成了hypologist。[11] 术语computics也曾经被提议过。在欧洲大陆，起源于信息（information）和数学或者自动（automatic）的名字比起源于计算机或者计算（computation）更常见，如informatique（法语），Informatik（德语），informatika（斯拉夫语族）。\n著名计算机科学家艾兹赫尔·戴克斯特拉曾经指出：“计算机科学并不只是关于计算机，就像天文学并不只是关于望远镜一样。”（\"Computer science is no more about computers than astronomy is about telescopes.\"）设计、部署计算机和计算机系统通常被认为是非计算机科学学科的领域。例如，研究计算机硬件被看作是计算机工程的一部分，而对于商业计算机系统的研究和部署被称为信息技术或者信息系统。然而，现如今也越来越多地融合了各类计算机相关学科的思想。计算机科学研究也经常与其它学科交叉，比如数学、工程学、认知科学和经济学等。\n计算机科学被认为比其它科学学科与数学的联系更加密切，一些观察者说计算就是一门数学科学。[12] 早期计算机科学受数学研究成果的影响很大，如库尔特·哥德尔、艾伦·图灵、路莎·彼得（英语：Rózsa Péter），阿隆佐·邱奇等数学家的研究，这两个领域在某些学科，例如数理逻辑、范畴论、域理论和代数，也不断有有益的思想交流。\n早期计算机科学建立的基础得追溯到最近电子计算机的发明。那些计算固定数值任务的机器，比如算盘，自古希腊时期即已存在，而用于加快计算的算法更是在算盘等古老的计算仪器发明之前就已被广泛使用。\nWilhelm Schickard在1623年设计了世界上第一台机械计算器，但没有完成它的建造。[13]布莱兹·帕斯卡在1642年设计并且建造了世界上第一台可以工作的机械计算器Pascaline。1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家。埃达·洛夫莱斯协助查尔斯·巴贝奇在维多利亚时代设计了差分机[14][15]。1900年左右，打孔机问世[16]。然而以上这些机器都局限在只能完成单个任务，或者充其量是所有可能任务的子集。\n到了20世纪40年代，随着更新更强大的计算机器(如ABC计算机、电子数值积分计算机)被发明，术语“计算机”开始用于指代那些机器而不是它们的祖先。[17]计算机的概念变得更加清晰，它不仅仅用于数学运算，总的来说计算机科学的领域也扩展到了对于计算的研究。20世纪50年代至20世纪60年代早期，计算机科学开始被确立为不同种类的学术学科。[18] 世界上第一个计算机科学学位点由普渡大学在1962年设立。[19]随着实用计算机的出现，很多计算的应用都以它们自己的方式逐渐转变成了研究的不同领域。\n虽然最初很多人并不相信计算机可能成为科学研究的领域，但是随后的50年里也逐渐被学术界认可。[20]IBM公司是那段时期计算机科学革命的参与者之一。在那段探索时期，IBM（International Business Machines的缩写）发布的IBM 704以及之后的IBM 709计算机被广泛使用。“不过，使用IBM电脑工作仍然是一件很沮丧的事情。如果你弄错了一条指令中的一个字母，程序将会崩溃，而你也得从头再来。”[20]20世纪50年代后期，计算机科学学科還在发展階段，这種問題在当时是一件很常見的事情。\n随着时间的推移，计算机科学技术在可用性和有效性上都有显著提升。现代社会见证了计算机从仅仅由专业人士使用到被广大用户接受的重大转变。最初，计算机非常昂贵，要有效利用它们，某种程度上必须得由专业的计算机操作员来完成。然而，随着计算机变得普及和低廉，已经几乎不需要专人的协助，虽然某些时候援助依旧存在。\n虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元1750-1850年）和新石器革命（公元前8000-5000年）之后人类技术进步的第三次重大飞跃。\n这些贡献包括：\nPeter Wegner（英语：Peter Wegner）提出计算机科学可以分成三个领域：数学、工程学、科學。Amnon H. Eden提议了三种范式应用于计算机科学的各个领域：[31]\n作为一个学科，计算机科学涵盖了从算法的理论研究和计算的极限，到如何通过硬件和软件实现计算系统。[32][33] CSAB（以前被叫做Computing Sciences Accreditation Board），由Association for Computing Machinery（ACM）和IEEE计算机协会（英语：IEEE Computer Society）（IEEE-CS）的代表组成[34]，确立了计算机科学学科的4个主要领域：计算理论，算法与数据结构，编程方法与编程语言，以及计算机组成与架构。CSAB还确立了其它一些重要领域，如软件工程，人工智能，计算机网络与通信，数据库系统，并行计算，分布式计算，人机交互，计算机图形学，操作系统，以及数值和符号计算。\n广义的理论计算机科学包括经典的计算理论和其它專注于更抽象、逻辑与数学方面的计算。\n算法指定义良好的计算过程，它取一个或一组值作为输入，经过一系列定义好的计算过程，得到一个或一组输出。[35]算法是计算机科学研究的一个重要领域，也是许多其他计算机科学技术的基础。算法主要包括数据结构、计算几何、图论等。除此之外，算法还包括许多杂项，如模式匹配、部分数论等。\n按照Peter J. Denning的说法，计算机科学的最根本问题是“什么能够被有效地自动化？”[12]计算理论的研究就是專注于回答这个根本问题，关于什么能够被计算，去实施这些计算又需要用到多少资源。为了试图回答第一个问题，递归论检验在多种理论计算模型中哪个计算问题是可解的。而计算复杂性理论则被用于回答第二个问题，研究解决一个不同目的的计算问题的时间与空间消耗。\n著名的“P=NP?”问题，千禧年大奖难题之一，[36]是计算理论的一个开放问题。\n信息论与信息量化相关，由克劳德·香农创建，用于寻找信号处理操作的根本极限，比如压缩数据和可靠的数据存储与通讯。编码理论是对编码以及它们适用的特定应用性质的研究。编码（code）被用于数据压缩，密码学，前向纠错，近期也被用于网络编码。研究编码的目的在于设计更高效、可靠的数据传输方法。\n编程语言理论是计算机科学的一个分支，主要处理编程语言的设计、实现、分析、描述和分类，以及它们的个体特性。它属于计算机科学学科，既受影响于也影响着数学、软件工程和语言学。它是公认的计算机科学分支，同时也是活跃的研究领域，研究成果被发表在众多学术期刊，计算机科学以及工程出版物。\n形式化方法是一种特别的基于数学的技术，用于软件和硬件系统的形式规范、开发以及驗證。在软件和硬件设计方面，形式化方法的使用动机，如同其它工程学科，是通过适当的数学分析便有助于设计的可靠性和健壮性的期望。但是，使用形式化方法会带来很高的成本，意味着它们通常只用于高可靠性系统，这种系统中安全或保安（security）是最重要的。对于形式化方法的最佳形容是各种理论计算机科学基础种类的应用，特别是计算机逻辑演算，形式语言，自动机理论和形式语义学，此外还有类型系统、代数数据类型，以及软件和硬件规范和验证中的一些问题。\n计算机系统结构，或者数字计算机组织，是一个计算机系统的概念设计和根本运作结构。它主要侧重于CPU的内部执行和内存访问地址。这个领域经常涉及计算机工程和电子工程学科，选择和互连硬件组件以创造满足功能、性能和成本目标的计算机。\n操作系统是管理电脑硬件与软件资源的电脑程式，同时也是电脑系统的核心与基石。作业系统需要处理如管理与配置记忆体、决定系统资源供需的优先次序、控制输入与输出装置、操作网路与管理档案系统等基本事务。作业系统也提供一个让使用者与各电脑设备互动的操作介面。\n并发性（concurrency）是系统的一种性质，这类系统可以同时执行多个可能互相交互的计算。一些数学模型，如Petri网、进程演算和PRAM模型，被建立以用于通用并发计算。分布式系统将并发性的思想扩展到了多台由网络连接的计算机。同一分布式系统中的计算机拥有自己的私有内存，它们之间经常交换信息以达到一个共同的目的。\n计算机网络是管理遍及全球的计算机连接成的网络的计算机科学分支。\n计算机安全是计算机技术的一个分支，其目标包括保护信息免受未经授权的访问、中断和修改，同时为系统的预期用户保持系统的可访问性和可用性。密码学是对于隐藏（加密）和破译（解密）信息的实践与研究。现代密码学主要跟计算机科学相关，很多加密和解密算法都是基于它们的计算复杂性。\n数据库是为了更容易地组织、存储和检索大量数据。数据库由数据库管理系统管理，通过数据模型和查询语言来存储、创建、维护和搜索数据。\n计算机图形学是对于数字视觉内容的研究，涉及图像数据的合成和操作。它跟计算机科学的许多其它领域密切相关，包括计算机视觉、图像处理、计算几何与可视化，同时也被大量运用在特效和电子游戏。\n科学计算（或者计算科学）是关注构建数学模型和量化分析技术的研究领域，同时通过计算机分析和解决科学问题。在实际使用中，它通常是计算机模拟和计算等形式在各个科学学科问题中的应用。\n多媒体技术是指通过计算机对文字、数据、图形、图像、动画、声音等多种媒体信息进行综合处理和管理，使用户可以通过多种感官与计算机进行实时信息交互的技术，又称为计算机多媒体技术。\n这个计算机科学分支旨在创造可以解决计算问题，以及像动物和人类一样思考与交流的人造系统。无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的、综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学。人工智能领域开始变得正式源于Alan Turing这位人工智能先驱提出了图灵试验，以回答这样一个终极问题：“计算机能够思考吗？”[37]\n软件工程是对于设计、实现和修改软件的研究，以确保软件的高质量、适中的价格、可维护性，以及能够快速构建。它是一个系统的软件设计方法，涉及工程实践到软件的应用。\n计算机科学和软件工程的关系是一个有争议的话题，随后关于什么是“软件工程”，计算机科学又该如何定义的争论使得情况更加混乱。David Parnas从其它工程和科学学科之间的关系得到启示，宣称计算机科学的主要重点总的来说是研究计算的性质，而软件工程的主要重点是具体的计算设计，以达到实用的目的，这样便构成了两个独立但又互补的学科。[38]\nSIGIR(Special Interest Group on Information Retrieval)\nKDD(Knowledge Discovery and Data Mining)\nAAAI(the Association for the Advance of Artificial Intelligence)\nACL(Annual Meeting of the Association for Computational Linguistics)\nNAACL(The North American Chapter of the Association for Computational Linguistics) 其为ACL的北美分会\nEMNLP(Conference on Empirical Methods in Natural Language Processing)\nIJCAI( International Joint Conference on Artificial Intelligence)\n一些教授计算机科学的大学[哪個／哪些？]主要进行计算和算法推理的研究。其中包括计算理论、算法分析、形式化方法、并行理论、数据库、计算机图形学以及系统分析等。通常也教授程序设计，但仅仅将它看作是支持计算机科学其它领域的媒介，而不是高级研究的重心。\n其它一些学院、大学、中学以及职业培训[哪個／哪些？]的计算机科学课程则主要侧重于训练高级编程，而不是算法和计算理论。这些课程着重教授那些对于软件工业很重要的技能。像这样的计算机编程过程通常被叫做软件工程。\n然而，尽管计算机科学专业日益推动着美国经济，但是计算机科学教育依然不存在大多数美国K-12课程中。2010年10月由ACM（页面存档备份，存于互联网档案馆）和计算机科学教师协会（CSTA）（页面存档备份，存于互联网档案馆）共同发表了一篇名为“Running on Empty: The Failure to Teach K-12 Computer Science in the Digital Age”的报告，文中揭示了仅有14个州通过了有意义的高中计算机科学教育标准。同时，仅有9个州将高中计算机科学课程算作毕业要求的核心学科。配合“Running on Empty”这篇文章，一个新的无党派宣传联盟：Computing in the Core（CinC）被建立，以影响联邦和政府政策，比如Computer Science Education Act（页面存档备份，存于互联网档案馆）要求政府拨款以制定计划完善计算机科学教育及支持计算机科学教师。\n在中国，“计算机科学”或“计算机科学与技术”是工科（一级门类）下的二级专业。一般可细分为三级专业：",
    "info_box": {
      "中国大陸": "计算机科学",
      "港澳": "計算機科學[1][2]、電腦科學[3]",
      "臺灣": "電腦科學、計算機科學[4][5]",
      "新加坡": "计算机科学、电脑科学",
      "馬來西亞": "电脑科学[6]",
      "日本": "計算機科学"
    },
    "categories": [
      "科學分類",
      "Category:计算机科学期刊",
      "分类",
      "计算机科学",
      "CS1英语来源 (en)",
      "使用多个图像且自动缩放的页面",
      "含有日語的條目",
      "含有英語的條目",
      "含有法語的條目",
      "含有德語的條目",
      "含有拉丁語的條目",
      "有未列明来源语句的条目",
      "自2013年1月扩充中的条目",
      "所有扩充中的条目",
      "拒绝当选首页新条目推荐栏目的条目",
      "使用小型訊息框的頁面",
      "自2016年5月有非常模棱两可或者十分空泛语句的条目",
      "使用的姊妹项目链接带有默认搜索的页面",
      "包含FAST标识符的维基百科条目",
      "包含BNE标识符的维基百科条目",
      "包含BNF标识符的维基百科条目",
      "包含BNFdata标识符的维基百科条目",
      "包含GND标识符的维基百科条目",
      "包含J9U标识符的维基百科条目",
      "包含LCCN标识符的维基百科条目",
      "包含NKC标识符的维基百科条目",
      "包含NLK标识符的维基百科条目",
      "包含AAT标识符的维基百科条目",
      "包含EMU标识符的维基百科条目",
      "包含HDS标识符的维基百科条目"
    ],
    "source": "wikipedia"
  }
]