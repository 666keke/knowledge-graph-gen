[
  {
    "title": "知識圖譜",
    "url": "https://zh.wikipedia.org/wiki/知识图谱",
    "summary": "知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系。其基本组成单位是“实体-关系-实体”三元组，以及实体及其相关属性-值对，实体间通过关系相互联结，构成网状的知识结构。知识图谱可以实现Web从网页链接向概念链接转变，支持用户按主题而不是字符串检索，真正实现语义检索。基于知识图谱的搜索引擎，能够以图形方式向用户反馈结构化的知识，用户不必浏览大量网页即能准确定位和深度获取知识。[1]",
    "content": "知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系。其基本组成单位是“实体-关系-实体”三元组，以及实体及其相关属性-值对，实体间通过关系相互联结，构成网状的知识结构。知识图谱可以实现Web从网页链接向概念链接转变，支持用户按主题而不是字符串检索，真正实现语义检索。基于知识图谱的搜索引擎，能够以图形方式向用户反馈结构化的知识，用户不必浏览大量网页即能准确定位和深度获取知识。[1]\n在知识表示中，知识图谱是一種知识库，其中的數據通過图结构的数据模型或拓扑整合而成。知识图谱通常被用来存储彼此之間具有相互联系的實體。[2]1980年代后期，格罗宁根大学和特文特大学联合启动了一个名为知识图谱的项目。Google、Bing和Yahoo等搜索引擎均已引入知識圖譜並在搜索界面的右側顯示。\n知识图谱的概念最早由谷歌2012年5月17日提出，其将知识图谱定义为用于增强搜索引擎功能的辅助知识库。但在知识图谱概念问世之前，语义网络技术的研究领域早已开始。2006年，Berners-Lee提出数据链接（linked data）的思想，推广和完善URI (uniform resource identifier) , RDF (resource description framework) , OWL (Web ontology language) 等技术标准，为知识图谱提供了技术基础条件。[3]\n三元组是知识图谱的一种通用表示方式，即 G =（E, R, S)，其中 E 是知识库中的实体，R 是知识库中的关系，S 代表知识库中的三元组。三元组的基本形式主要包括实体1、关系、实体2和概念、属性、属性值等。实体是知识图谱中的最基本元素，不同的实体间存在不同的关系。概念主要指集合、类别、对象类型、事物的种类，例如人物、地理等；属性主要指对象可能具有的属性、特征、特性、特点以及参数，例如国籍、生日等；属性值主要指对象指定属性的值，例如中国、1988-09-08等。每个实体(概念的外延)可用一个全局唯一确定的ID来标识，每个属性-属性值对(attribute-value pair, AVP) 可用来刻画实体的内在特性，而关系可用来连接两个实体，刻画它们之间的关联。[4]\n知识图谱在逻辑架构上分为两个层次：数据层和模式层。数据层是以事实（fact）为存储单位的图数据库，其事实的基础表达方式就是“实体-关系-实体”或者“实体-属性-属性值”。模式层存储的是经过提炼的知识，借助本体库来规范实体、关系以及实体类型和属性等之间的关系。[1]\n知识图谱的体系架构分为3个部分，分别获取源数据、知识融合和知识计算与知识应用。[5] 知识图谱有两种构建方式，自顶向下和自底向上。在知识图谱发展初期，知识图谱主要借助百科类网站等结构化数据源，提取本体和模式信息，加入到知识库的自顶向下方式构建数据库。现阶段知识图谱大多为公开采集数据并自动抽取资源，经过人工审核后加入到知识库中，这种则是自底向上的构建方式。\n知识抽取（information extraction）是构建知识图谱的第一步，为了从异构数据源中获取候选知识单元，知识抽取技术将自动从半结构化和无结构数据中抽取实体、关系以及实体属性等结构化信息。[6]\n实体抽取\n实体抽取，也称为命名实体识别（named entity recognition，NER），指从源数据中自动识别命名实体，这一步是信息抽取中最基础和关键的部分，因为实体抽取的准确率和召回率对后续知识获取效率和质量影响很大。\n早期实体抽取的准召率不够理想，但在2004年，Lin等采用字典辅助下的最大熵算法，基于Medline论文摘要的GENIA数据集使得实体抽取的准召率均超过70%。[7]2008年，Whitelaw等提出根据已知实体实例进行特征建模，利用模型从海量数据集中得到新的命名实体列表，然后再针对新实体建模，迭代地生成实体标注语料库。[8]2010年，Jain等提出一种面向开放域的无监督学习算法，事先不给实体分类，而是基于实体的语义特征从搜索日志中识别命名实体，然后采用聚类算法对识别出的实体对象进行聚类。[9]\n关系抽取\n经过实体抽取, 知识库目前得到的仅是一系列离散的命名实体,。为了得到更准确的语义信息, 还需要从文本语料中提取出实体之间的关联关系, 以此形成网状的知识结构，这种技术则为关系抽取技术。[1]\n属性抽取\n属性抽取是从不同信息源中采集特定实体的属性信息。例如针对某个公众人物, 可以从网络公开信息中得到其昵称、生日、国籍、教育背景等信息。属性抽取技术能够从各个数据源中汇集属性信息，更完整地表述实体属性。[1]\n通过知识抽取的结果可能存在大量冗余和错误信息，形成的结构化信息也会缺乏层次性和逻辑性，因此需要对抽取来的信息做知识融合，消除歧义概念、剔除冗余和错误概念，提升知识质量。\n知识融合分为实体链接和知识合并两部分。实体链接（entity linking）指将在文本中抽取出来的实体链接到知识库中正确实体。[10]知识合并指从第三方知识库产品或已有数据化数据中获取知识输入，包括合并外部知识库和合并关系数据库。\n通过知识抽取、知识融合得到一系列的基本事实表达，离结构化、网络化的知识体系仍有一段距离。因此还需要针对这些事实表达进行知识加工，包括本体构建、知识推理和质量评估。\n本体构建（ontology）指对概念建模的规范，以形式化方式明确定义概念之间的联系。在知识图谱中，本体位于模式层，用于描述概念层次体系的知识概念模版。[11]\n知识推理指从知识库中已有的实体关系数据经过计算建立新实体关联，从现有知识中发现新知识，拓展和丰富知识网络。例如已知 (乾隆, 父亲, 雍正) 和 (雍正, 父亲, 康熙) , 可以得到 (乾隆, 祖父, 康熙) 或 (康熙, 孙子, 乾隆) 。知识推理的对象除了实体关系，还包括实体的属性值、本体概念层次关系等。例如已知 (老虎, 科, 猫科) 和 (猫科, 目, 食肉目) , 可以推出 (老虎, 目, 食肉目) 。[1]\n因为知识推理的信息基础来源于开放域的信息抽取，可能存在实体识别错误、关系抽取错误等问题，因此知识推理的质量也可能存在对应问题，需要在入知识库之前，将推理得来的知识进行质量评估。2011年，Fader采用人工标注方式对1000个句子中的实体关系三元组进行标注，并作为训练集得到逻辑斯蒂回归模型，用于对REVERB系统的信息抽取结果计算置信度。[12]另外，谷歌的Knowledge Vault从全网范围内抽取结构化的数据信息, 并根据某一数据信息在整个抽取过程中抽取频率对该数据信息的可信度进行评分, 然后利用从可信知识库Freebase中的先验知识对已评分的可信度信息进行修正， 这一方法有效降低对数据信息正误判断的不确定性, 提高知识图谱中知识的质量。[13]\nGoogle Now\nWeb Open Data\nMicrosoft Cortana\nWeb Open Data\nThe World Book\nEncyclopedia\nYAGO KB\nNELL KB\nYAGO KB\nNELL KB\nWikipedia\nWeb Open Data\nWikipedia\n受到算法准召率低、限制条件多、扩展性不好等问题，针对开放域的信息抽取仍面对很大挑战。\n实体消歧、合并外部数据库和关系数据库的应用效果仍有很大提升空间。\n本体构建中的聚类问题、质量评估的标准和指标的建立和知识推理的技术思维限制，都是知识加工的重要难点。",
    "info_box": {},
    "categories": [
      "資訊科學",
      "本體 (電腦科學)",
      "含有英語的條目"
    ],
    "source": "wikipedia"
  },
  {
    "title": "知識圖譜 (消歧義)",
    "url": "https://zh.wikipedia.org/wiki/%E7%9F%A5%E8%AD%98%E5%9C%96%E8%AD%9C_(%E6%B6%88%E6%AD%A7%E7%BE%A9)",
    "summary": "知识图谱可以指：",
    "content": "知识图谱可以指：",
    "info_box": {},
    "categories": [
      "四字消歧义",
      "全部主條目消歧義頁面",
      "全部消歧義頁面"
    ],
    "source": "wikipedia"
  },
  {
    "title": "字符串",
    "url": "https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2",
    "summary": "字符串（英語：string），是由零个或多个字符组成的有限序列。一般记为\n\n\n\ns\n=\n\na\n\n1\n\n\n\na\n\n2\n\n\n…\n\na\n\nn\n\n\n\n\n{\\displaystyle s=a_{1}a_{2}\\dots a_{n}}\n\n（\n\n\n\n0\n≤\nn\n⪇\n∞\n\n\n{\\displaystyle 0\\leq n\\lneq \\infty }\n\n）。它是编程语言中表示文本的数据类型。",
    "content": "字符串（英語：string），是由零个或多个字符组成的有限序列。一般记为\n\n\n\ns\n=\n\na\n\n1\n\n\n\na\n\n2\n\n\n…\n\na\n\nn\n\n\n\n\n{\\displaystyle s=a_{1}a_{2}\\dots a_{n}}\n\n（\n\n\n\n0\n≤\nn\n⪇\n∞\n\n\n{\\displaystyle 0\\leq n\\lneq \\infty }\n\n）。它是编程语言中表示文本的数据类型。\n通常以串的整体作为操作对象，如：在串中查找某个子串、求取一个子串、在串的某个位置上插入一个子串以及删除一个子串等。两个字符串相等的充要条件是：长度相等，并且各个对应位置上的字符都相等。设p、q是两个串，求q在p中首次出现的位置的运算叫做模式匹配。串的两种最基本的存储方式是顺序存储方式和链接存储方式。\n设Σ是叫做字母表的非空有限集合。Σ的元素叫做“符号”或“字符”。在Σ上的字符串（或字）是来自Σ的任何有限序列。[1]例如，如果Σ = {0, 1}，则0101是在Σ之上的字符串。\n字符串的长度是在字符串中字符的数目（序列的长度），它可以是任何非负整数。“空串”是在Σ上的唯一的长度为0的字符串，并被指示为ε或λ。[1][2]\n在Σ上的所有长度为n的字符串的集合指示为Σn。例如，如果Σ = {0, 1}则Σ2 = {00, 01, 10, 11}。注意Σ0 = {ε}对于任何字母表Σ。\n在Σ上的所有任何长度的字符串的集合是Σ的Kleene闭包并被指示为Σ*。依据Σn,\n例如，如果Σ = {0, 1}，则Σ* = {ε, 0, 1, 00, 01, 10, 11, 000, 001, 010, 011,…}。尽管Σ*自身是可数无限的，Σ*的所有元素都有有限长度。\n在Σ上一个字符串的集合（就是Σ*的任何子集）被称为在Σ上的形式语言。例如，如果Σ = {0, 1}，则带有偶数个零的字符串的集合（{ε, 1, 00, 11, 001, 010, 100, 111, 0000, 0011, 0101, 0110, 1001, 1010, 1100, 1111,…}）是在Σ上的形式语言。\n“串接”（英語：concatenation）是Σ*上的重要二元运算。对于Σ*中的两个字符串s和t，它们的串接被定义为在s中的字符序列之后跟随着t中的字符序列，并被指示为st。例如，Σ = {a, b,…, z}，并且s = bear且t = hug，则st = bearhug而ts = hugbear。\n字符串串接是结合性的，但非交换性运算。空串充当单位元；对于任何字符串s，有εs = sε = s。所以，集合Σ*和串接运算形成了幺半群，就是从Σ生成的自由幺半群。此外，长度函数定义了一个从Σ*到非负整数的幺半群同态。\n字符串s被称为是字符串t的“子串”（英語：substring）或“因子”（英語：factor），如果存在（可能为空）字符串u和v使得t = usv。“是其子串”关系定义了在Σ*上的偏序，其最小元是空串。\n经常需要定义在字符串集合上的次序。如果字符表Σ有一个全序（cf. 字母序），则可以定义在Σ*上的叫做词典序的全序。注意因为Σ是有限的，总是可以定义在Σ继而在Σ*上的良好次序。例如，如果Σ = {0, 1}并且0 < 1，则Σ*的词典次序是ε < 0 < 00 < 000 <…< 011 < 0110 <…< 01111 <…< 1 < 10 < 100 <…< 101 <…< 111…\n在形式理论中经常出现一些在字符串上的额外运算。它们在条目字符串运算中给出。\n字符串数据类型是建模在形式字符串的想法上的数据类型（Data type）。字符串是几乎在所有编程语言中都可以实现的非常重要和有用的数据类型。在某些语言中它们可作为基本类型获得，在另一些语言中做为复合类型获得。多数高级语言的语法允许用某种方式引用起来的字符串来表示字符串数据类型的实例；这种元字符串叫做“常值”（英語：literal）或“字串常值”（英語：string literal）。\n尽管形式字符串可以有任意（但有限）的长度，实际语言的字符串的长度经常被限制到一个人工极大值。一般的说，有两种类型的字符串数据类型：“定长字符串”，它有固定的极大长度并且不管是否达到了这个极大值都使用同样数量的内存；和“变长字符串”，它的长度不是专断固定的并且依赖于实际的大小使用可变数量的内存。在现代编程语言中的多数字符串是变长字符串。尽管叫这个名字，所有变长字符串还是在长度上有个极限，一般的说这个极限只依赖于可获得的内存的数量。\n历史上，字符串数据类型为每个字符分配一个字节，尽管精确的字符集随着区域而改变，字符编码足够类似得程序员可以忽略它—同一个系统在不同的区域中使用的字符集组要么让一个字符在同样位置，要么根本就没有它。这些字符集典型的基于ASCII码或EBCDIC码。\n意音文字的语言比如汉语、日语和朝鲜语（合称为CJK）的合理表示需要多于256个字符（每字符一个字节编码的极限）。常规的解决涉及：保持对ASCII码的单字节表示，并使用双字节来表示CJK字形。现存代码在用到它们会导致一些字符串匹配和切断上的问题，严重程度依赖于字符编码是如何设计的。\nUnicode也有些复杂的问题。多数语言有Unicode字符串数据类型（通常是UTF-16，因为它在Unicode补充位面介入之前就被增加了）。在Unicode和本地编码之间转换要求理解本地编码，这对于现存系统要一起传输各种编码的字符串而又没有实际标记出它们用了什么编码就是个问题。\n某些语言如C++把字符串实现为可以用于任何基本类型的模版，但这是个例外而不是规则。\n在一个面向对象语言把字符串表示为对象的情况下，如果值可以在运行期变更，则叫做“可变的”（mutable），如果值在建立后就不可变更了，则叫做“不变的”（immutable）。例如，Ruby有可变字符串，而Python的字符串是不可变的。\n其他语言，最著名的有Prolog和Erlang，避免实现字符串数据类型，转而采用把字符串表示为字符代码的列表的约定。\n一种常用的表示法是使用一个字符代码的数组，每个字符占用一个字节（如在ASCII代码中）或两个字节（如在unicode中）。它的长度可以使用一个结束符（一般是NUL，ASCII代码是0，在C编程语言中使用这种方法）。[3]或者在前面加入一个整数值来表示它的长度（在Pascal语言中使用这种方法）。\n这是一个用NUL结束的字符串的例子，它用10个byte存储，用ASCII表示法：\n上面的字符串的长度为5个字符，但注意它占用6个字节。结束符后的字符没有任何意义。\n这是相同的Pascal字符串：\n当然，可能还有其它的表示法。使用树和列表可以使得一些字符串操作（如插入和删除）更高效。\n一些编程语言设计为编写字符串处理程序更容易编写。这是一些例子：\n很多UNIX实用程序进行简单的字符串处理，并能用于简单地编写一些强大的字符串处理算法。文件和有限流可以像字符串一样查看。\n一些新的编程语言，包括Perl、Python和Ruby，借助正则表达式来帮助文字处理。\n这是一些字符串处理算法，在字符串上进行不同的处理：",
    "info_box": {},
    "categories": [
      "数据结构",
      "字符串",
      "字符编码",
      "数据类型",
      "形式语言",
      "词语组合",
      "語法實體",
      "字符串算法",
      "含有英語的條目"
    ],
    "source": "wikipedia"
  },
  {
    "title": "知识表示",
    "url": "https://zh.wikipedia.org/wiki/%E7%9F%A5%E8%AF%86%E8%A1%A8%E7%A4%BA",
    "summary": "知識表示法，又稱做知識重呈、知識表現、知識表徵，是認知科學和人工智能兩個領域共同存在的問題。在認知科學裡，它關係到人類如何儲存和處理資料。在人工智能裡，其主要目標為儲存知識，讓程式能夠處理，達到人類的智慧。目前這個領域仍然沒有一個完美的答案。",
    "content": "知識表示法，又稱做知識重呈、知識表現、知識表徵，是認知科學和人工智能兩個領域共同存在的問題。在認知科學裡，它關係到人類如何儲存和處理資料。在人工智能裡，其主要目標為儲存知識，讓程式能夠處理，達到人類的智慧。目前這個領域仍然沒有一個完美的答案。\n從人工智能的角度來看，知識表示所牽涉的一些問題計有：",
    "info_box": {},
    "categories": [
      "知识表示",
      "人工智能",
      "科学建模",
      "生物医学信息学",
      "自2013年5月缺少来源的条目",
      "自2020年9月需要從英語維基百科翻譯的條目",
      "自2020年9月需要從粵語維基百科翻譯的條目",
      "含有多个问题的条目",
      "含有英語的條目",
      "全部小作品",
      "語言小作品"
    ],
    "source": "wikipedia"
  },
  {
    "title": "知识库",
    "url": "https://zh.wikipedia.org/wiki/%E7%9F%A5%E8%AF%86%E5%BA%93",
    "summary": "知识库（Knowledge base）是用于知识管理的一种特殊的数据库，以便于有关领域知识的采集、整理以及提取。知识库中的知识源于领域专家，它是求解问题所需领域知识的集合，包括基本事实、规则和其它有关信息。",
    "content": "知识库（Knowledge base）是用于知识管理的一种特殊的数据库，以便于有关领域知识的采集、整理以及提取。知识库中的知识源于领域专家，它是求解问题所需领域知识的集合，包括基本事实、规则和其它有关信息。",
    "info_box": {},
    "categories": [
      "知識",
      "知识表示",
      "数据库",
      "自2018年8月可能带有原创研究的条目",
      "拒绝当选首页新条目推荐栏目的条目",
      "自2018年8月缺少来源的条目"
    ],
    "source": "wikipedia"
  }
]