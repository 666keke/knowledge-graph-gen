<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd"><key id="d3" for="edge" attr.name="sentence" attr.type="string"/>
<key id="d2" for="edge" attr.name="label" attr.type="string"/>
<key id="d1" for="node" attr.name="type" attr.type="string"/>
<key id="d0" for="node" attr.name="label" attr.type="string"/>
<graph edgedefault="directed"><node id="Knowledge Graph">
  <data key="d0">PERSON</data>
  <data key="d1">NER</data>
</node>
<node id="21980年代后期">
  <data key="d0">DATE</data>
  <data key="d1">NER</data>
</node>
<node id="格罗宁根大学">
  <data key="d0">ORG</data>
  <data key="d1">NER</data>
</node>
<node id="特文特大学">
  <data key="d0">ORG</data>
  <data key="d1">NER</data>
</node>
<node id="GoogleBing">
  <data key="d0">PERSON</data>
  <data key="d1">NER</data>
</node>
<node id="谷歌">
  <data key="d0">ORG</data>
  <data key="d1">NER</data>
</node>
<node id="2012年5月17日">
  <data key="d0">DATE</data>
  <data key="d1">NER</data>
</node>
<node id="2006年">
  <data key="d0">DATE</data>
  <data key="d1">NER</data>
</node>
<node id="linked">
  <data key="d0">PERSON</data>
  <data key="d1">NER</data>
</node>
<node id="URI">
  <data key="d0">ORG</data>
  <data key="d1">NER</data>
</node>
<node id="RDF">
  <data key="d0">ORG</data>
  <data key="d1">NER</data>
</node>
<node id="3 三元组">
  <data key="d0">DATE</data>
  <data key="d1">NER</data>
</node>
<node id="通用">
  <data key="d0">ORG</data>
  <data key="d1">NER</data>
</node>
<node id="三元组">
  <data key="d0">CARDINAL</data>
  <data key="d1">NER</data>
</node>
<node id="中国">
  <data key="d0">GPE</data>
  <data key="d1">NER</data>
</node>
<node id="19880908">
  <data key="d0">CARDINAL</data>
  <data key="d1">NER</data>
</node>
<node id="(attributevalue">
  <data key="d0">QUANTITY</data>
  <data key="d1">NER</data>
</node>
<node id="数据层">
  <data key="d0">CARDINAL</data>
  <data key="d1">NER</data>
</node>
<node id="百科类">
  <data key="d0">PERCENT</data>
  <data key="d1">NER</data>
</node>
<node id="第一">
  <data key="d0">ORDINAL</data>
  <data key="d1">NER</data>
</node>
<node id="named">
  <data key="d0">PERSON</data>
  <data key="d1">NER</data>
</node>
<node id="NER">
  <data key="d0">PERSON</data>
  <data key="d1">NER</data>
</node>
<node id="2004年">
  <data key="d0">DATE</data>
  <data key="d1">NER</data>
</node>
<node id="70">
  <data key="d0">CARDINAL</data>
  <data key="d1">NER</data>
</node>
<node id="72008年">
  <data key="d0">DATE</data>
  <data key="d1">NER</data>
</node>
<node id="82010年">
  <data key="d0">DATE</data>
  <data key="d1">NER</data>
</node>
<node id="中汇集属性信息">
  <data key="d0">ORG</data>
  <data key="d1">NER</data>
</node>
<node id="10">
  <data key="d0">CARDINAL</data>
  <data key="d1">NER</data>
</node>
<node id="第三方">
  <data key="d0">ORDINAL</data>
  <data key="d1">NER</data>
</node>
<node id="数据化">
  <data key="d0">CARDINAL</data>
  <data key="d1">NER</data>
</node>
<node id="ontology">
  <data key="d0">PERSON</data>
  <data key="d1">NER</data>
</node>
<node id="11">
  <data key="d0">CARDINAL</data>
  <data key="d1">NER</data>
</node>
<node id="康熙)">
  <data key="d0">PERSON</data>
  <data key="d1">NER</data>
</node>
<node id="2011年">
  <data key="d0">DATE</data>
  <data key="d1">NER</data>
</node>
<node id="1000">
  <data key="d0">CARDINAL</data>
  <data key="d1">NER</data>
</node>
<node id="12">
  <data key="d0">CARDINAL</data>
  <data key="d1">NER</data>
</node>
<node id="Freebase">
  <data key="d0">CARDINAL</data>
  <data key="d1">NER</data>
</node>
<node id="13">
  <data key="d0">CARDINAL</data>
  <data key="d1">NER</data>
</node>
<node id="Data Microsoft">
  <data key="d0">PRODUCT</data>
  <data key="d1">NER</data>
</node>
<node id="Data The World Book Encyclopedia Y">
  <data key="d0">ORG</data>
  <data key="d1">NER</data>
</node>
<node id="圖譜">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="图谱">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="英語">
  <data key="d0">nz</data>
  <data key="d1">JIEBA</data>
</node>
<node id="结构化">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="语义">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="知识库">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="符号">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="形式">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="物理">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="世界">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="概念">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="关系">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="基本">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="单位">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="实体">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="属性">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="网状">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="知识结构">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="网页">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="链接">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="用户">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="主题">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="字符串">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="检索">
  <data key="d0">vn</data>
  <data key="d1">JIEBA</data>
</node>
<node id="搜索引擎">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="图形">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="方式">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="大量">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="定位">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="深度">
  <data key="d0">ns</data>
  <data key="d1">JIEBA</data>
</node>
<node id="數據">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="结构">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="数据模型">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="联系">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="實體">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="格罗宁根">
  <data key="d0">ns</data>
  <data key="d1">JIEBA</data>
</node>
<node id="大学">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="特文特">
  <data key="d0">nr</data>
  <data key="d1">JIEBA</data>
</node>
<node id="启动">
  <data key="d0">vn</data>
  <data key="d1">JIEBA</data>
</node>
<node id="项目">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="界面">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="定义">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="功能">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="辅助">
  <data key="d0">vn</data>
  <data key="d1">JIEBA</data>
</node>
<node id="问世">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="网络">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="技术">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="研究">
  <data key="d0">vn</data>
  <data key="d1">JIEBA</data>
</node>
<node id="领域">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="数据">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="思想">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="技术标准">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="基础">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="条件">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="代表">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="元素">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="类别">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="对象">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="类型">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="事物">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="种类">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="人物">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="地理">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="特征">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="特性">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="特点">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="参数">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="国籍">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="外延">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="全局">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="标识">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="刻画">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="关联">
  <data key="d0">ns</data>
  <data key="d1">JIEBA</data>
</node>
<node id="逻辑">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="架构">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="模式">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="事实">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="数据库">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="本体">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="规范">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="体系">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="部分">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="融合">
  <data key="d0">vn</data>
  <data key="d1">JIEBA</data>
</node>
<node id="发展">
  <data key="d0">vn</data>
  <data key="d1">JIEBA</data>
</node>
<node id="百科">
  <data key="d0">nz</data>
  <data key="d1">JIEBA</data>
</node>
<node id="网站">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="数据源">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="信息">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="自动">
  <data key="d0">vn</data>
  <data key="d1">JIEBA</data>
</node>
<node id="资源">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="人工">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="异构">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="单元">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="命名">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="自动识别">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="关键">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="准确率">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="效率">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="质量">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="影响">
  <data key="d0">vn</data>
  <data key="d1">JIEBA</data>
</node>
<node id="准召率">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="理想">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="字典">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="算法">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="论文">
  <data key="d0">nz</data>
  <data key="d1">JIEBA</data>
</node>
<node id="实例">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="建模">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="利用">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="模型">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="海量">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="列表">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="语料库">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="面向">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="监督">
  <data key="d0">vn</data>
  <data key="d1">JIEBA</data>
</node>
<node id="分类">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="日志">
  <data key="d0">ns</data>
  <data key="d1">JIEBA</data>
</node>
<node id="聚类">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="文本">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="语料">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="信息源">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="公众">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="昵称">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="教育">
  <data key="d0">vn</data>
  <data key="d1">JIEBA</data>
</node>
<node id="背景">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="结果">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="层次性">
  <data key="d0">nz</data>
  <data key="d1">JIEBA</data>
</node>
<node id="逻辑性">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="歧义">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="错误">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="指将">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="产品">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="关系数据库">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="网络化">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="一段距离">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="加工">
  <data key="d0">vn</data>
  <data key="d1">JIEBA</data>
</node>
<node id="评估">
  <data key="d0">vn</data>
  <data key="d1">JIEBA</data>
</node>
<node id="关系数据">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="乾隆">
  <data key="d0">nr</data>
  <data key="d1">JIEBA</data>
</node>
<node id="父亲">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="雍正">
  <data key="d0">nr</data>
  <data key="d1">JIEBA</data>
</node>
<node id="祖父">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="孙子">
  <data key="d0">nr</data>
  <data key="d1">JIEBA</data>
</node>
<node id="老虎">
  <data key="d0">nr</data>
  <data key="d1">JIEBA</data>
</node>
<node id="猫科">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="食肉">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="问题">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="对应">
  <data key="d0">vn</data>
  <data key="d1">JIEBA</data>
</node>
<node id="句子">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="训练">
  <data key="d0">vn</data>
  <data key="d1">JIEBA</data>
</node>
<node id="斯蒂">
  <data key="d0">nr</data>
  <data key="d1">JIEBA</data>
</node>
<node id="系统">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="置信度">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="全网">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="范围">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="过程">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="频率">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="评分">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="先验">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="修正">
  <data key="d0">nr</data>
  <data key="d1">JIEBA</data>
</node>
<node id="方法">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="正误">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="不确定性">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="扩展性">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="挑战">
  <data key="d0">vn</data>
  <data key="d1">JIEBA</data>
</node>
<node id="消歧">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="效果">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="空间">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="标准">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="指标">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="思维">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="Knowledge Graph）">
  <data key="d0">DEFINITION</data>
  <data key="d1">REGEX</data>
</node>
<node id="数据层和模式层">
  <data key="d0">DEFINITION</data>
  <data key="d1">REGEX</data>
</node>
<node id="英語：Knowledge Graph">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="linked data">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="uniform resource identifier">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="resource description framework">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="Web ontology language">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="E, R, S">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="概念的外延">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="attributevalue pair, AVP">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="fact">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="information extraction">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="named entity recognition，NER">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="entity linking">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="乾隆, 父亲, 雍正">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="雍正, 父亲, 康熙">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="乾隆, 祖父, 康熙">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="康熙, 孙子, 乾隆">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="老虎, 科, 猫科">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="猫科, 目, 食肉目">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="老虎, 目, 食肉目">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="知识图谱">
  <data key="d0">KG_TERM</data>
  <data key="d1">TERM</data>
</node>
<node id="语义网">
  <data key="d0">KG_TERM</data>
  <data key="d1">TERM</data>
</node>
<node id="图数据库">
  <data key="d0">KG_TERM</data>
  <data key="d1">TERM</data>
</node>
<node id="推理">
  <data key="d0">KG_TERM</data>
  <data key="d1">TERM</data>
</node>
<node id="知识抽取">
  <data key="d0">KG_TERM</data>
  <data key="d1">TERM</data>
</node>
<node id="知识表示">
  <data key="d0">KG_TERM</data>
  <data key="d1">TERM</data>
</node>
<node id="知识推理">
  <data key="d0">KG_TERM</data>
  <data key="d1">TERM</data>
</node>
<node id="知识融合">
  <data key="d0">KG_TERM</data>
  <data key="d1">TERM</data>
</node>
<node id="实体识别">
  <data key="d0">KG_TERM</data>
  <data key="d1">TERM</data>
</node>
<node id="命名实体">
  <data key="d0">KG_TERM</data>
  <data key="d1">TERM</data>
</node>
<node id="关系抽取">
  <data key="d0">KG_TERM</data>
  <data key="d1">TERM</data>
</node>
<node id="语义网络">
  <data key="d0">KG_TERM</data>
  <data key="d1">TERM</data>
</node>
<node id="知识获取">
  <data key="d0">KG_TERM</data>
  <data key="d1">TERM</data>
</node>
<node id="知识计算">
  <data key="d0">KG_TERM</data>
  <data key="d1">TERM</data>
</node>
<node id="知识图谱可以指">
  <data key="d0">DEFINITION</data>
  <data key="d1">REGEX</data>
</node>
<node id="消歧義">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="nlneq">
  <data key="d0">PERSON</data>
  <data key="d1">NER</data>
</node>
<node id="001">
  <data key="d0">CARDINAL</data>
  <data key="d1">NER</data>
</node>
<node id="00">
  <data key="d0">CARDINAL</data>
  <data key="d1">NER</data>
</node>
<node id="100">
  <data key="d0">CARDINAL</data>
  <data key="d1">NER</data>
</node>
<node id="111">
  <data key="d0">CARDINAL</data>
  <data key="d1">NER</data>
</node>
<node id="0000">
  <data key="d0">CARDINAL</data>
  <data key="d1">NER</data>
</node>
<node id="1001">
  <data key="d0">CARDINAL</data>
  <data key="d1">NER</data>
</node>
<node id="1010">
  <data key="d0">CARDINAL</data>
  <data key="d1">NER</data>
</node>
<node id="1100">
  <data key="d0">CARDINAL</data>
  <data key="d1">NER</data>
</node>
<node id="二元">
  <data key="d0">CARDINAL</data>
  <data key="d1">NER</data>
</node>
<node id="101">
  <data key="d0">CARDINAL</data>
  <data key="d1">NER</data>
</node>
<node id="literal">
  <data key="d0">PERSON</data>
  <data key="d1">NER</data>
</node>
<node id="string">
  <data key="d0">PERSON</data>
  <data key="d1">NER</data>
</node>
<node id="汉语">
  <data key="d0">LANGUAGE</data>
  <data key="d1">NER</data>
</node>
<node id="日语">
  <data key="d0">LANGUAGE</data>
  <data key="d1">NER</data>
</node>
<node id="朝鲜">
  <data key="d0">GPE</data>
  <data key="d1">NER</data>
</node>
<node id="256">
  <data key="d0">CARDINAL</data>
  <data key="d1">NER</data>
</node>
<node id="Unicode字符串数据类型（通常是UTF16">
  <data key="d0">ORG</data>
  <data key="d1">NER</data>
</node>
<node id="UN">
  <data key="d0">NORP</data>
  <data key="d1">NER</data>
</node>
<node id="字符">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="序列">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="编程语言">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="数据类型">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="整体">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="子串">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="长度">
  <data key="d0">ns</data>
  <data key="d1">JIEBA</data>
</node>
<node id="运算">
  <data key="d0">vn</data>
  <data key="d1">JIEBA</data>
</node>
<node id="模式匹配">
  <data key="d0">nz</data>
  <data key="d1">JIEBA</data>
</node>
<node id="顺序存储">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="字母表">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="数目">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="整数">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="空串">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="可数">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="子集">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="偶数">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="函数">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="同态">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="因子">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="偏序">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="次序">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="全序">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="字母">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="词典">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="理论">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="经常出现">
  <data key="d0">vn</data>
  <data key="d1">JIEBA</data>
</node>
<node id="条目">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="语言">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="语法">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="常值">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="字串">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="实际">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="极大值">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="数量">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="内存">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="名字">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="历史">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="分配">
  <data key="d0">vn</data>
  <data key="d1">JIEBA</data>
</node>
<node id="字节">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="字符集">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="区域">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="编码">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="程序员">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="典型">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="意音">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="文字">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="朝鲜语">
  <data key="d0">nz</data>
  <data key="d1">JIEBA</data>
</node>
<node id="合理">
  <data key="d0">vn</data>
  <data key="d1">JIEBA</data>
</node>
<node id="个字符">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="常规">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="单字节">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="字形">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="现存">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="代码">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="程度">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="设计">
  <data key="d0">vn</data>
  <data key="d1">JIEBA</data>
</node>
<node id="位面">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="传输">
  <data key="d0">vn</data>
  <data key="d1">JIEBA</data>
</node>
<node id="标记">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="规则">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="面向对象">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="情况">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="表示法">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="数组">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="结束符">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="数值">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="例子">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="意义">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="处理程序">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="实用程序">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="文件">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="string）">
  <data key="d0">DEFINITION</data>
  <data key="d1">REGEX</data>
</node>
<node id="在串中查找某个子串求取一个子串在串的某个位置上插入一个子串以及删除一个子串等">
  <data key="d0">DEFINITION</data>
  <data key="d1">REGEX</data>
</node>
<node id="长度相等">
  <data key="d0">DEFINITION</data>
  <data key="d1">REGEX</data>
</node>
<node id="concatenation）是Σ上的重要二元运算">
  <data key="d0">DEFINITION</data>
  <data key="d1">REGEX</data>
</node>
<node id="substring）或因子（英語：factor）">
  <data key="d0">DEFINITION</data>
  <data key="d1">REGEX</data>
</node>
<node id="literal）或字串常值（英語：string literal）">
  <data key="d0">DEFINITION</data>
  <data key="d1">REGEX</data>
</node>
<node id="定长字符串">
  <data key="d0">DEFINITION</data>
  <data key="d1">REGEX</data>
</node>
<node id="保持对ASCII码的单字节表示">
  <data key="d0">DEFINITION</data>
  <data key="d1">REGEX</data>
</node>
<node id="上面的字符串的长度为5个字符">
  <data key="d0">DEFINITION</data>
  <data key="d1">REGEX</data>
</node>
<node id="当然">
  <data key="d0">DEFINITION</data>
  <data key="d1">REGEX</data>
</node>
<node id="很多UNIX实用程序进行简单的字符串处理">
  <data key="d0">DEFINITION</data>
  <data key="d1">REGEX</data>
</node>
<node id="英語：string">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="0  n   displaystyle 0leq nlneq infty">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="或字">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="序列的长度">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="就是Σ的任何子集">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="ε, 1, 00, 11, 001, 010, 100, 111, 0000, 0011, 0101, 0110, 1001, 1010, 1100, 1111,">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="英語：concatenation">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="英語：substring">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="英語：factor">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="可能为空">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="cf. 字母序">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="Data type">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="英語：literal">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="英語：string literal">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="但有限">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="合称为CJK">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="每字符一个字节编码的极限">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="通常是UTF16，因为它在Unicode补充位面介入之前就被增加了">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="mutable">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="immutable">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="如在ASCII代码中">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="如在unicode中">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="一般是NUL，ASCII代码是0，在C编程语言中使用这种方法">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="在Pascal语言中使用这种方法">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="如插入和删除">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="科學">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="人工智能">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="領域">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="問題">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="儲存">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="處理">
  <data key="d0">vn</data>
  <data key="d1">JIEBA</data>
</node>
<node id="資料">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="目標">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="程式">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="人類">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="智慧">
  <data key="d0">nr</data>
  <data key="d1">JIEBA</data>
</node>
<node id="答案">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="角度">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="Knowledge base">
  <data key="d0">PERSON</data>
  <data key="d1">NER</data>
</node>
<node id="管理">
  <data key="d0">vn</data>
  <data key="d1">JIEBA</data>
</node>
<node id="有关">
  <data key="d0">vn</data>
  <data key="d1">JIEBA</data>
</node>
<node id="整理">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="领域专家">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="Graph">
  <data key="d0">PERSON</data>
  <data key="d1">NER</data>
</node>
<node id="柯尼斯堡七桥">
  <data key="d0">PRODUCT</data>
  <data key="d1">NER</data>
</node>
<node id="1736年">
  <data key="d0">DATE</data>
  <data key="d1">NER</data>
</node>
<node id="欧拉于">
  <data key="d0">ORG</data>
  <data key="d1">NER</data>
</node>
<node id="柯尼斯堡">
  <data key="d0">PERSON</data>
  <data key="d1">NER</data>
</node>
<node id="欧拉路">
  <data key="d0">LOC</data>
  <data key="d1">NER</data>
</node>
<node id="周游">
  <data key="d0">PERSON</data>
  <data key="d1">NER</data>
</node>
<node id="莱布尼茨">
  <data key="d0">PERSON</data>
  <data key="d1">NER</data>
</node>
<node id="45">
  <data key="d0">CARDINAL</data>
  <data key="d1">NER</data>
</node>
<node id="1857年">
  <data key="d0">DATE</data>
  <data key="d1">NER</data>
</node>
<node id="英语">
  <data key="d0">LANGUAGE</data>
  <data key="d1">NER</data>
</node>
<node id="西尔维斯特">
  <data key="d0">PERSON</data>
  <data key="d1">NER</data>
</node>
<node id="1878年">
  <data key="d0">DATE</data>
  <data key="d1">NER</data>
</node>
<node id="一个多世纪">
  <data key="d0">DATE</data>
  <data key="d1">NER</data>
</node>
<node id="1935至1937年">
  <data key="d0">DATE</data>
  <data key="d1">NER</data>
</node>
<node id="1959年">
  <data key="d0">CARDINAL</data>
  <data key="d1">NER</data>
</node>
<node id="法兰西斯古德里">
  <data key="d0">PERSON</data>
  <data key="d1">NER</data>
</node>
<node id="1852年">
  <data key="d0">DATE</data>
  <data key="d1">NER</data>
</node>
<node id="哈密顿">
  <data key="d0">PERSON</data>
  <data key="d1">NER</data>
</node>
<node id="凯莱">
  <data key="d0">ORG</data>
  <data key="d1">NER</data>
</node>
<node id="Alfred Kempe">
  <data key="d0">FAC</data>
  <data key="d1">NER</data>
</node>
<node id="泰特">
  <data key="d0">GPE</data>
  <data key="d1">NER</data>
</node>
<node id="Peter">
  <data key="d0">PERSON</data>
  <data key="d1">NER</data>
</node>
<node id="德拉姆齐">
  <data key="d0">GPE</data>
  <data key="d1">NER</data>
</node>
<node id="Hadwige">
  <data key="d0">PERSON</data>
  <data key="d1">NER</data>
</node>
<node id="Hugo Hadwiger">
  <data key="d0">PERSON</data>
  <data key="d1">NER</data>
</node>
<node id="一百多年后">
  <data key="d0">DATE</data>
  <data key="d1">NER</data>
</node>
<node id="1969年">
  <data key="d0">DATE</data>
  <data key="d1">NER</data>
</node>
<node id="Heinrich Heesch">
  <data key="d0">ORG</data>
  <data key="d1">NER</data>
</node>
<node id="1976年">
  <data key="d0">DATE</data>
  <data key="d1">NER</data>
</node>
<node id="阿佩爾">
  <data key="d0">PERSON</data>
  <data key="d1">NER</data>
</node>
<node id="1936">
  <data key="d0">CARDINAL</data>
  <data key="d1">NER</data>
</node>
<node id="1860年之1930年">
  <data key="d0">DATE</data>
  <data key="d1">NER</data>
</node>
<node id="惠特尼">
  <data key="d0">DATE</data>
  <data key="d1">NER</data>
</node>
<node id="物理学家基尔霍夫">
  <data key="d0">ORG</data>
  <data key="d1">NER</data>
</node>
<node id="1845年">
  <data key="d0">DATE</data>
  <data key="d1">NER</data>
</node>
<node id="埃尔德什">
  <data key="d0">PERSON</data>
  <data key="d1">NER</data>
</node>
<node id="Alfréd Rényi">
  <data key="d0">ORG</data>
  <data key="d1">NER</data>
</node>
<node id="與之相關">
  <data key="d0">GPE</data>
  <data key="d1">NER</data>
</node>
<node id="Esubsete">
  <data key="d0">PRODUCT</data>
  <data key="d1">NER</data>
</node>
<node id="displaystyle">
  <data key="d0">PERSON</data>
  <data key="d1">NER</data>
</node>
<node id="E,phi">
  <data key="d0">CARDINAL</data>
  <data key="d1">NER</data>
</node>
<node id="Eto leftleftx,yright">
  <data key="d0">PERSON</data>
  <data key="d1">NER</data>
</node>
<node id="射到">
  <data key="d0">LOC</data>
  <data key="d1">NER</data>
</node>
<node id="图 G">
  <data key="d0">PERSON</data>
  <data key="d1">NER</data>
</node>
<node id="displaystyle G">
  <data key="d0">PERSON</data>
  <data key="d1">NER</data>
</node>
<node id="平面图">
  <data key="d0">GPE</data>
  <data key="d1">NER</data>
</node>
<node id="库拉托夫斯基">
  <data key="d0">PERCENT</data>
  <data key="d1">NER</data>
</node>
<node id="图论">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="数学">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="分支">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="群论">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="矩阵">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="拓扑学">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="顶点">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="边所">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="边则">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="七桥">
  <data key="d0">ns</data>
  <data key="d1">JIEBA</data>
</node>
<node id="欧拉">
  <data key="d0">ns</data>
  <data key="d1">JIEBA</data>
</node>
<node id="创始人">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="文章">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="笔画">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="德蒙">
  <data key="d0">ns</data>
  <data key="d1">JIEBA</data>
</node>
<node id="骑士">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="分析">
  <data key="d0">vn</data>
  <data key="d1">JIEBA</data>
</node>
<node id="数棱数">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="面数">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="公式">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="柯西">
  <data key="d0">nr</data>
  <data key="d1">JIEBA</data>
</node>
<node id="起源">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="遊戲">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="路径">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="名词">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="世纪">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="树状">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="分子">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="化学">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="性质">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="计数问题">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="成果">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="波利亚">
  <data key="d0">ns</data>
  <data key="d1">JIEBA</data>
</node>
<node id="研究成果">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="计数">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="化合物">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="术语">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="四色问题">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="产生">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="平面">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="地图">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="颜色">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="染色">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="法兰西斯">
  <data key="d0">ns</data>
  <data key="d1">JIEBA</data>
</node>
<node id="古德里">
  <data key="d0">nr</data>
  <data key="d1">JIEBA</data>
</node>
<node id="摩根">
  <data key="d0">nz</data>
  <data key="d1">JIEBA</data>
</node>
<node id="证明">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="希伍德">
  <data key="d0">nr</data>
  <data key="d1">JIEBA</data>
</node>
<node id="拉姆齐">
  <data key="d0">nr</data>
  <data key="d1">JIEBA</data>
</node>
<node id="亏格">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="曲面">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="着色">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="计算机">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="利用计算机">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="托夫斯">
  <data key="d0">nr</data>
  <data key="d1">JIEBA</data>
</node>
<node id="基和">
  <data key="d0">nz</data>
  <data key="d1">JIEBA</data>
</node>
<node id="内容">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="代数">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="道路">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="物理学家">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="电路">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="定律">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="概率">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="埃尔德">
  <data key="d0">nr</data>
  <data key="d1">JIEBA</data>
</node>
<node id="什和">
  <data key="d0">ns</data>
  <data key="d1">JIEBA</data>
</node>
<node id="圖論">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="定義">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="有序">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="無序">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="頂點">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="端點">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="自環">
  <data key="d0">vn</data>
  <data key="d1">JIEBA</data>
</node>
<node id="個數">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="性質">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="空集合">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="階是">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="邊數">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="次數">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="图同构">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="子图">
  <data key="d0">nr</data>
  <data key="d1">JIEBA</data>
</node>
<node id="同構">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="定理">
  <data key="d0">vn</data>
  <data key="d1">JIEBA</data>
</node>
<node id="重构">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="阶图">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="将图">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="Graph theory）">
  <data key="d0">DEFINITION</data>
  <data key="d1">REGEX</data>
</node>
<node id="icosian game）（icosian game）">
  <data key="d0">DEFINITION</data>
  <data key="d1">REGEX</data>
</node>
<node id="Nicolaas Govert de Bruijn）做了一些推广">
  <data key="d0">DEFINITION</data>
  <data key="d1">REGEX</data>
</node>
<node id="是否任何一幅画在平面上的地图都可以用四种颜色染色">
  <data key="d0">DEFINITION</data>
  <data key="d1">REGEX</data>
</node>
<node id="Alfred Kempe）等在内的许多人都曾给出过错误的证明">
  <data key="d0">DEFINITION</data>
  <data key="d1">REGEX</data>
</node>
<node id="Peter Guthrie Tait）（Peter Guthrie Tait）希伍德拉姆齐和Hadwige（英语：Hugo Hadwiger）（Hugo Hadwiger）对此问题的研究与推广引发了对嵌入具有不同亏格的曲面的图的着色问题的研究">
  <data key="d0">DEFINITION</data>
  <data key="d1">REGEX</data>
</node>
<node id="Heinrich Heesch）发表了一个用计算机解决此问题的方法">
  <data key="d0">DEFINITION</data>
  <data key="d1">REGEX</data>
</node>
<node id="Alfréd Rényi）关于随机图连通的渐进概率的研究使得图论产生了新的分支随机图论">
  <data key="d0">DEFINITION</data>
  <data key="d1">REGEX</data>
</node>
<node id="( x">
  <data key="d0">DEFINITION</data>
  <data key="d1">REGEX</data>
</node>
<node id="(x">
  <data key="d0">DEFINITION</data>
  <data key="d1">REGEX</data>
</node>
<node id="圖是有序三元組 G  ( V">
  <data key="d0">DEFINITION</data>
  <data key="d1">REGEX</data>
</node>
<node id="E    x">
  <data key="d0">DEFINITION</data>
  <data key="d1">REGEX</data>
</node>
<node id="Eto leftleftx">
  <data key="d0">DEFINITION</data>
  <data key="d1">REGEX</data>
</node>
<node id="圖的階是其頂點個數  V  displaystyle V">
  <data key="d0">DEFINITION</data>
  <data key="d1">REGEX</data>
</node>
<node id="给定两个图 G displaystyle G 和 H displaystyle H">
  <data key="d0">DEFINITION</data>
  <data key="d1">REGEX</data>
</node>
<node id="类似地">
  <data key="d0">DEFINITION</data>
  <data key="d1">REGEX</data>
</node>
<node id="平面图判定：判定给定的图是否是平面图（此问题与子图的关系">
  <data key="d0">DEFINITION</data>
  <data key="d1">REGEX</data>
</node>
<node id="一个n阶图是否能够由其所有n1阶导出子图唯一确定">
  <data key="d0">DEFINITION</data>
  <data key="d1">REGEX</data>
</node>
<node id="英語：Graph theory">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="英语：icosian game">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="icosian game">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="英语：Nicolaas Govert de Bruijn">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="英语：Alfred Kempe">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="英语：Peter Guthrie Tait">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="Peter Guthrie Tait">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="英语：Hugo Hadwiger">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="英语：Heinrich Heesch">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="英语：Alfréd Rényi">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="V , E">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="V,E">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="x , y">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="x,y">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="換句話說，邊連接了頂點對">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="V , E , ϕ">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="V,E,phi">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="此時 E displaystyle E 不再如前面限定是該集合的子集">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="於是邊連接了頂點對">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="自環會被算兩次">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="此问题与子图的关系，参见库拉托夫斯基定理">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="Reconstruction conjecture">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="中国大陆">
  <data key="d0">GPE</data>
  <data key="d1">NER</data>
</node>
<node id="科学知识">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="可视化">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="绘制">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="学科">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="学术研究">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="主体">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="进程">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="工具">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="节点">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="作者">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="学术">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="机构">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="科学">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="文献">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="关键词">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="连线">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="合作">
  <data key="d0">vn</data>
  <data key="d1">JIEBA</data>
</node>
<node id="大陆">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="地区">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="内涵">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="图书">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="情报学">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="侧重于">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="计算机领域">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="客观">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="Mapping Knowledge Domains">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="如RDF">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="图书馆信息学">
  <data key="d0">ORG</data>
  <data key="d1">NER</data>
</node>
<node id="圖書">
  <data key="d0">PERSON</data>
  <data key="d1">NER</data>
</node>
<node id="library and information science">
  <data key="d0">ORG</data>
  <data key="d1">NER</data>
</node>
<node id="LIS">
  <data key="d0">PERSON</data>
  <data key="d1">NER</data>
</node>
<node id="20世纪70年代">
  <data key="d0">DATE</data>
  <data key="d1">NER</data>
</node>
<node id="英文">
  <data key="d0">LANGUAGE</data>
  <data key="d1">NER</data>
</node>
<node id="日文">
  <data key="d0">LANGUAGE</data>
  <data key="d1">NER</data>
</node>
<node id="台湾">
  <data key="d0">GPE</data>
  <data key="d1">NER</data>
</node>
<node id="图书馆">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="信息学">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="資訊">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="图书馆学">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="出版学">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="档案学">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="博物馆学">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="文献学">
  <data key="d0">nr</data>
  <data key="d1">JIEBA</data>
</node>
<node id="文献分类">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="中同">
  <data key="d0">ns</data>
  <data key="d1">JIEBA</data>
</node>
<node id="同属">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="上位">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="情报">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="和訊">
  <data key="d0">nz</data>
  <data key="d1">JIEBA</data>
</node>
<node id="汉译">
  <data key="d0">nr</data>
  <data key="d1">JIEBA</data>
</node>
<node id="资讯">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="广义">
  <data key="d0">ns</data>
  <data key="d1">JIEBA</data>
</node>
<node id="上訊息">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="自然界">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="社会">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="消息">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="訊息">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="方可">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="业务流程">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="哲学">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="业务">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="情报检索">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="编辑">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="热点">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="技术性">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="流传">
  <data key="d0">vn</data>
  <data key="d1">JIEBA</data>
</node>
<node id="档案">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="专业">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="流派">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="平台">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="传播">
  <data key="d0">vn</data>
  <data key="d1">JIEBA</data>
</node>
<node id="学问">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="英語：library and information science, LIS">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="查询">
  <data key="d0">KG_TERM</data>
  <data key="d1">TERM</data>
</node>
<node id="2012年">
  <data key="d0">DATE</data>
  <data key="d1">NER</data>
</node>
<node id="2012年5月16日">
  <data key="d0">DATE</data>
  <data key="d1">NER</data>
</node>
<node id="美国">
  <data key="d0">GPE</data>
  <data key="d1">NER</data>
</node>
<node id="百科1">
  <data key="d0">PERCENT</data>
  <data key="d1">NER</data>
</node>
<node id="Missing">
  <data key="d0">GPE</data>
  <data key="d1">NER</data>
</node>
<node id="570亿">
  <data key="d0">CARDINAL</data>
  <data key="d1">NER</data>
</node>
<node id="18亿">
  <data key="d0">CARDINAL</data>
  <data key="d1">NER</data>
</node>
<node id="34 2012年11月4日">
  <data key="d0">DATE</data>
  <data key="d1">NER</data>
</node>
<node id="西班牙语">
  <data key="d0">LANGUAGE</data>
  <data key="d1">NER</data>
</node>
<node id="56">
  <data key="d0">CARDINAL</data>
  <data key="d1">NER</data>
</node>
<node id="六十年代">
  <data key="d0">DATE</data>
  <data key="d1">NER</data>
</node>
<node id="1998年">
  <data key="d0">DATE</data>
  <data key="d1">NER</data>
</node>
<node id="2003年">
  <data key="d0">DATE</data>
  <data key="d1">NER</data>
</node>
<node id="10 自2003年">
  <data key="d0">DATE</data>
  <data key="d1">NER</data>
</node>
<node id="11 12">
  <data key="d0">DATE</data>
  <data key="d1">NER</data>
</node>
<node id="15">
  <data key="d0">CARDINAL</data>
  <data key="d1">NER</data>
</node>
<node id="16">
  <data key="d0">CARDINAL</data>
  <data key="d1">NER</data>
</node>
<node id="2013年5月">
  <data key="d0">DATE</data>
  <data key="d1">NER</data>
</node>
<node id="阿米特辛格尔">
  <data key="d0">PERSON</data>
  <data key="d1">NER</data>
</node>
<node id="1.">
  <data key="d0">CARDINAL</data>
  <data key="d1">NER</data>
</node>
<node id="阿密特">
  <data key="d0">PERSON</data>
  <data key="d1">NER</data>
</node>
<node id="Conversational">
  <data key="d0">NORP</data>
  <data key="d1">NER</data>
</node>
<node id="17">
  <data key="d0">CARDINAL</data>
  <data key="d1">NER</data>
</node>
<node id="IO大会">
  <data key="d0">FAC</data>
  <data key="d1">NER</data>
</node>
<node id="圣克鲁斯">
  <data key="d0">PERSON</data>
  <data key="d1">NER</data>
</node>
<node id="约翰娜怀特">
  <data key="d0">PERSON</data>
  <data key="d1">NER</data>
</node>
<node id="1718">
  <data key="d0">DATE</data>
  <data key="d1">NER</data>
</node>
<node id="来源">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="目标">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="汇总">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="概况">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="维基百科">
  <data key="d0">nz</data>
  <data key="d1">JIEBA</data>
</node>
<node id="系統">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="含义">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="法语">
  <data key="d0">nz</data>
  <data key="d1">JIEBA</data>
</node>
<node id="德语">
  <data key="d0">nz</data>
  <data key="d1">JIEBA</data>
</node>
<node id="葡萄牙语">
  <data key="d0">nz</data>
  <data key="d1">JIEBA</data>
</node>
<node id="俄罗斯语">
  <data key="d0">nz</data>
  <data key="d1">JIEBA</data>
</node>
<node id="意大利语">
  <data key="d0">nz</data>
  <data key="d1">JIEBA</data>
</node>
<node id="万维网">
  <data key="d0">nz</data>
  <data key="d1">JIEBA</data>
</node>
<node id="系统性">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="智能">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="专著">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="区别">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="文档">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="框架">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="联网">
  <data key="d0">nz</data>
  <data key="d1">JIEBA</data>
</node>
<node id="专家">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="工作">
  <data key="d0">vn</data>
  <data key="d1">JIEBA</data>
</node>
<node id="大会">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="辛格尔">
  <data key="d0">nr</data>
  <data key="d1">JIEBA</data>
</node>
<node id="设想">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="对话">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="预测">
  <data key="d0">vn</data>
  <data key="d1">JIEBA</data>
</node>
<node id="电脑">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="梦想">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="负责人">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="观众">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="地名">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="谈话">
  <data key="d0">vn</data>
  <data key="d1">JIEBA</data>
</node>
<node id="怀特">
  <data key="d0">nr</data>
  <data key="d1">JIEBA</data>
</node>
<node id="地方">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="Google Knowledge Graph">
  <data key="d0">DEFINITION</data>
  <data key="d1">REGEX</data>
</node>
<node id="西班牙语法语德语葡萄牙语日语俄罗斯语及意大利语">
  <data key="d0">DEFINITION</data>
  <data key="d1">REGEX</data>
</node>
<node id="搜索引擎的三个主要功能将需要改进">
  <data key="d0">DEFINITION</data>
  <data key="d1">REGEX</data>
</node>
<node id="Conversational search）技术包含阿密特推出的一种热关键词的搜索技术">
  <data key="d0">DEFINITION</data>
  <data key="d1">REGEX</data>
</node>
<node id="知识图谱知道">
  <data key="d0">DEFINITION</data>
  <data key="d1">REGEX</data>
</node>
<node id="英語：Google Knowledge Graph，也称Google知识图">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="2012Missing required parameter 1month!">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="Semantic Link Network">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="详细比较了与六十年代提出的语义网Semantic Net的区别">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="英語：Conversational search">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="專注于">
  <data key="d0">PERSON</data>
  <data key="d1">NER</data>
</node>
<node id="丹麦">
  <data key="d0">GPE</data>
  <data key="d1">NER</data>
</node>
<node id="UCPH Department of Computer Science">
  <data key="d0">ORG</data>
  <data key="d1">NER</data>
</node>
<node id="北欧">
  <data key="d0">LOC</data>
  <data key="d1">NER</data>
</node>
<node id="epistemologist">
  <data key="d0">PERSON</data>
  <data key="d1">NER</data>
</node>
<node id="10 三个月">
  <data key="d0">DATE</data>
  <data key="d1">NER</data>
</node>
<node id="第二年">
  <data key="d0">DATE</data>
  <data key="d1">NER</data>
</node>
<node id="欧洲大陆">
  <data key="d0">LOC</data>
  <data key="d1">NER</data>
</node>
<node id="automatic">
  <data key="d0">PERSON</data>
  <data key="d1">NER</data>
</node>
<node id="斯拉夫">
  <data key="d0">PERSON</data>
  <data key="d1">NER</data>
</node>
<node id="艾兹">
  <data key="d0">PERSON</data>
  <data key="d1">NER</data>
</node>
<node id="12 早期">
  <data key="d0">DATE</data>
  <data key="d1">NER</data>
</node>
<node id="艾伦">
  <data key="d0">PERSON</data>
  <data key="d1">NER</data>
</node>
<node id="Rózs">
  <data key="d0">PERSON</data>
  <data key="d1">NER</data>
</node>
<node id="佐邱奇">
  <data key="d0">PERSON</data>
  <data key="d1">NER</data>
</node>
<node id="1623年">
  <data key="d0">DATE</data>
  <data key="d1">NER</data>
</node>
<node id="布莱兹">
  <data key="d0">PERSON</data>
  <data key="d1">NER</data>
</node>
<node id="帕斯卡">
  <data key="d0">PERSON</data>
  <data key="d1">NER</data>
</node>
<node id="1642年">
  <data key="d0">DATE</data>
  <data key="d1">NER</data>
</node>
<node id="1673年">
  <data key="d0">DATE</data>
  <data key="d1">NER</data>
</node>
<node id="莱布尼兹">
  <data key="d0">PERSON</data>
  <data key="d1">NER</data>
</node>
<node id="1694年">
  <data key="d0">DATE</data>
  <data key="d1">NER</data>
</node>
<node id="二进制">
  <data key="d0">CARDINAL</data>
  <data key="d1">NER</data>
</node>
<node id="埃达洛夫莱斯">
  <data key="d0">PERSON</data>
  <data key="d1">NER</data>
</node>
<node id="维多利亚时代">
  <data key="d0">DATE</data>
  <data key="d1">NER</data>
</node>
<node id="1415">
  <data key="d0">CARDINAL</data>
  <data key="d1">NER</data>
</node>
<node id="20世纪40年代">
  <data key="d0">DATE</data>
  <data key="d1">NER</data>
</node>
<node id="17计算机">
  <data key="d0">DATE</data>
  <data key="d1">NER</data>
</node>
<node id="20世纪50年代至20世纪60年代早期">
  <data key="d0">DATE</data>
  <data key="d1">NER</data>
</node>
<node id="18">
  <data key="d0">CARDINAL</data>
  <data key="d1">NER</data>
</node>
<node id="普渡大学">
  <data key="d0">ORG</data>
  <data key="d1">NER</data>
</node>
<node id="1962年">
  <data key="d0">DATE</data>
  <data key="d1">NER</data>
</node>
<node id="19">
  <data key="d0">CARDINAL</data>
  <data key="d1">NER</data>
</node>
<node id="50年">
  <data key="d0">CARDINAL</data>
  <data key="d1">NER</data>
</node>
<node id="20">
  <data key="d0">CARDINAL</data>
  <data key="d1">NER</data>
</node>
<node id="之一">
  <data key="d0">CARDINAL</data>
  <data key="d1">NER</data>
</node>
<node id="IBM">
  <data key="d0">ORG</data>
  <data key="d1">NER</data>
</node>
<node id="704">
  <data key="d0">MONEY</data>
  <data key="d1">NER</data>
</node>
<node id="709计算机">
  <data key="d0">DATE</data>
  <data key="d1">NER</data>
</node>
<node id="2020世纪50年代后期">
  <data key="d0">DATE</data>
  <data key="d1">NER</data>
</node>
<node id="資訊革命">
  <data key="d0">ORG</data>
  <data key="d1">NER</data>
</node>
<node id="公元17501850年">
  <data key="d0">DATE</data>
  <data key="d1">NER</data>
</node>
<node id="新石器革命（">
  <data key="d0">ORG</data>
  <data key="d1">NER</data>
</node>
<node id="第三">
  <data key="d0">ORDINAL</data>
  <data key="d1">NER</data>
</node>
<node id="Peter Wegner">
  <data key="d0">ORG</data>
  <data key="d1">NER</data>
</node>
<node id="Amnon H">
  <data key="d0">FAC</data>
  <data key="d1">NER</data>
</node>
<node id="Eden">
  <data key="d0">PERSON</data>
  <data key="d1">NER</data>
</node>
<node id="3233 CSAB">
  <data key="d0">DATE</data>
  <data key="d1">NER</data>
</node>
<node id="Computing Sciences Accreditation Board">
  <data key="d0">ORG</data>
  <data key="d1">NER</data>
</node>
<node id="for Computing Machinery">
  <data key="d0">PERSON</data>
  <data key="d1">NER</data>
</node>
<node id="IEEE计算机协会">
  <data key="d0">ORG</data>
  <data key="d1">NER</data>
</node>
<node id="Society">
  <data key="d0">PERSON</data>
  <data key="d1">NER</data>
</node>
<node id="34">
  <data key="d0">CARDINAL</data>
  <data key="d1">NER</data>
</node>
<node id="35">
  <data key="d0">CARDINAL</data>
  <data key="d1">NER</data>
</node>
<node id="Peter J">
  <data key="d0">PRODUCT</data>
  <data key="d1">NER</data>
</node>
<node id="Denning">
  <data key="d0">PERSON</data>
  <data key="d1">NER</data>
</node>
<node id="第二">
  <data key="d0">ORDINAL</data>
  <data key="d1">NER</data>
</node>
<node id="千禧年">
  <data key="d0">DATE</data>
  <data key="d1">NER</data>
</node>
<node id="36">
  <data key="d0">CARDINAL</data>
  <data key="d1">NER</data>
</node>
<node id="信息论">
  <data key="d0">ORG</data>
  <data key="d1">NER</data>
</node>
<node id="克劳德香农">
  <data key="d0">ORG</data>
  <data key="d1">NER</data>
</node>
<node id="并发性">
  <data key="d0">DATE</data>
  <data key="d1">NER</data>
</node>
<node id="concurrency">
  <data key="d0">PERSON</data>
  <data key="d1">NER</data>
</node>
<node id="Petri网">
  <data key="d0">ORG</data>
  <data key="d1">NER</data>
</node>
<node id="加密">
  <data key="d0">PERSON</data>
  <data key="d1">NER</data>
</node>
<node id="电机工程学">
  <data key="d0">ORG</data>
  <data key="d1">NER</data>
</node>
<node id="37">
  <data key="d0">CARDINAL</data>
  <data key="d1">NER</data>
</node>
<node id="38">
  <data key="d0">CARDINAL</data>
  <data key="d1">NER</data>
</node>
<node id="Special Interest">
  <data key="d0">ORG</data>
  <data key="d1">NER</data>
</node>
<node id="for Computational">
  <data key="d0">PERSON</data>
  <data key="d1">NER</data>
</node>
<node id="北美">
  <data key="d0">LOC</data>
  <data key="d1">NER</data>
</node>
<node id="EMNLP(Conference">
  <data key="d0">ORG</data>
  <data key="d1">NER</data>
</node>
<node id="2010年10月">
  <data key="d0">DATE</data>
  <data key="d1">NER</data>
</node>
<node id="档案馆">
  <data key="d0">PERSON</data>
  <data key="d1">NER</data>
</node>
<node id="CSTA">
  <data key="d0">ORG</data>
  <data key="d1">NER</data>
</node>
<node id="12 Computer">
  <data key="d0">QUANTITY</data>
  <data key="d1">NER</data>
</node>
<node id="14">
  <data key="d0">CARDINAL</data>
  <data key="d1">NER</data>
</node>
<node id="Computing">
  <data key="d0">GPE</data>
  <data key="d1">NER</data>
</node>
<node id="CinC">
  <data key="d0">PERSON</data>
  <data key="d1">NER</data>
</node>
<node id="三级">
  <data key="d0">CARDINAL</data>
  <data key="d1">NER</data>
</node>
<node id="计算机科学">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="计算机系统">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="实用技术">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="形容">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="图形学">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="复杂性">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="語言">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="理論">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="程式设计">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="事业">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="信息技术">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="经验">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="玩游戏">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="游戏">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="浏览器">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="软件">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="程序">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="计算机本身">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="重点">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="院系">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="科学家">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="建议">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="数据处理">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="哥本哈根大学">
  <data key="d0">nt</data>
  <data key="d1">JIEBA</data>
</node>
<node id="科学系">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="学院">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="教授">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="北欧国家">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="计算技术">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="通讯">
  <data key="d0">nz</data>
  <data key="d1">JIEBA</data>
</node>
<node id="圖靈">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="工程">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="流程">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="圖人">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="數學家">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="論者">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="期刊">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="欧洲">
  <data key="d0">ns</data>
  <data key="d1">JIEBA</data>
</node>
<node id="语族">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="赫尔">
  <data key="d0">nr</data>
  <data key="d1">JIEBA</data>
</node>
<node id="戴克">
  <data key="d0">nr</data>
  <data key="d1">JIEBA</data>
</node>
<node id="天文学">
  <data key="d0">nt</data>
  <data key="d1">JIEBA</data>
</node>
<node id="望远镜">
  <data key="d0">nr</data>
  <data key="d1">JIEBA</data>
</node>
<node id="部署">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="计算机硬件">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="商业">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="信息系统">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="计算机相关">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="交叉">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="工程学">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="认知科学">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="经济学">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="观察者">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="哥德尔">
  <data key="d0">nr</data>
  <data key="d1">JIEBA</data>
</node>
<node id="图灵">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="阿隆佐">
  <data key="d0">nr</data>
  <data key="d1">JIEBA</data>
</node>
<node id="邱奇">
  <data key="d0">nr</data>
  <data key="d1">JIEBA</data>
</node>
<node id="数学家">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="数理逻辑">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="范畴">
  <data key="d0">nr</data>
  <data key="d1">JIEBA</data>
</node>
<node id="论域">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="有益">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="交流">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="电子计算机">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="任务">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="机器">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="古希腊">
  <data key="d0">ns</data>
  <data key="d1">JIEBA</data>
</node>
<node id="时期">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="古老">
  <data key="d0">nr</data>
  <data key="d1">JIEBA</data>
</node>
<node id="仪器">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="机械">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="计算器">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="记录">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="理论家">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="埃达">
  <data key="d0">ns</data>
  <data key="d1">JIEBA</data>
</node>
<node id="查尔斯">
  <data key="d0">nr</data>
  <data key="d1">JIEBA</data>
</node>
<node id="巴贝奇">
  <data key="d0">nr</data>
  <data key="d1">JIEBA</data>
</node>
<node id="维多利亚">
  <data key="d0">ns</data>
  <data key="d1">JIEBA</data>
</node>
<node id="时代">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="差分">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="打孔机">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="局限">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="充其量">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="电子">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="数值积分">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="指代">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="祖先">
  <data key="d0">nr</data>
  <data key="d1">JIEBA</data>
</node>
<node id="学位点">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="科学研究">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="学术界">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="公司">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="革命">
  <data key="d0">vn</data>
  <data key="d1">JIEBA</data>
</node>
<node id="参与者">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="事情">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="指令">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="階段">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="时间">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="科学技术">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="可用性">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="有效性">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="专业人士">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="操作员">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="普及">
  <data key="d0">ns</data>
  <data key="d1">JIEBA</data>
</node>
<node id="专人">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="时候">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="援助">
  <data key="d0">vn</data>
  <data key="d1">JIEBA</data>
</node>
<node id="根本性">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="贡献">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="电子学">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="信息时代">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="奠基">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="驱动力">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="工业革命">
  <data key="d0">nz</data>
  <data key="d1">JIEBA</data>
</node>
<node id="新石器">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="人类">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="范式">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="硬件">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="协会">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="数据结构">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="编程">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="计算机网络">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="数据库系统">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="分布式计算">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="符号计算">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="经典">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="方面">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="杂项">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="数论">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="递归论">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="检验">
  <data key="d0">vn</data>
  <data key="d1">JIEBA</data>
</node>
<node id="目的">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="消耗">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="大奖">
  <data key="d0">nz</data>
  <data key="d1">JIEBA</data>
</node>
<node id="难题">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="香农">
  <data key="d0">nz</data>
  <data key="d1">JIEBA</data>
</node>
<node id="信号处理">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="密码学">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="个体">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="语言学">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="活跃">
  <data key="d0">vn</data>
  <data key="d1">JIEBA</data>
</node>
<node id="学术期刊">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="出版物">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="动机">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="可靠性">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="健壮性">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="成本">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="高可靠性">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="保安">
  <data key="d0">nz</data>
  <data key="d1">JIEBA</data>
</node>
<node id="自动机">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="语义学">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="数字">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="概念设计">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="运作">
  <data key="d0">vn</data>
  <data key="d1">JIEBA</data>
</node>
<node id="地址">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="组件">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="性能">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="电脑程式">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="核心">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="基石">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="作业系统">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="记忆体">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="系统资源">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="供需">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="优先">
  <data key="d0">vn</data>
  <data key="d1">JIEBA</data>
</node>
<node id="装置">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="网路">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="事务">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="使用者">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="电脑设备">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="介面">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="数学模型">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="网络连接">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="全球">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="连接成">
  <data key="d0">nr</data>
  <data key="d1">JIEBA</data>
</node>
<node id="计算机技术">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="中断">
  <data key="d0">ns</data>
  <data key="d1">JIEBA</data>
</node>
<node id="预期">
  <data key="d0">vn</data>
  <data key="d1">JIEBA</data>
</node>
<node id="解密">
  <data key="d0">nr</data>
  <data key="d1">JIEBA</data>
</node>
<node id="管理系统">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="查询语言">
  <data key="d0">nr</data>
  <data key="d1">JIEBA</data>
</node>
<node id="视觉">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="图像">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="图像处理">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="运用">
  <data key="d0">vn</data>
  <data key="d1">JIEBA</data>
</node>
<node id="电子游戏">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="科学计算">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="多媒体技术">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="图形图像">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="动画">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="声音">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="媒体">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="综合">
  <data key="d0">vn</data>
  <data key="d1">JIEBA</data>
</node>
<node id="感官">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="动物">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="人造">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="研究者">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="专长">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="符号学">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="电机">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="精神">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="神经">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="生理学">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="智力">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="金融">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="先驱">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="试验">
  <data key="d0">vn</data>
  <data key="d1">JIEBA</data>
</node>
<node id="终极">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="高质量">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="价格">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="可维护性">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="争议">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="话题">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="分会">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="程序设计">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="媒介">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="中学">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="职业培训">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="课程">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="工业">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="技能">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="日益">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="经济">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="页面">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="备份">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="互联网">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="教师">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="报告">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="毕业">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="篇文章">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="无党派">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="宣传">
  <data key="d0">vn</data>
  <data key="d1">JIEBA</data>
</node>
<node id="联邦">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="政府">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="政策">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="计划">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="工科">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="门类">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="细分">
  <data key="d0">n</data>
  <data key="d1">JIEBA</data>
</node>
<node id="datalogy">
  <data key="d0">QUOTED_TERM</data>
  <data key="d1">REGEX</data>
</node>
<node id="Computer science is no more about computers than astronomy is about telescopes.">
  <data key="d0">QUOTED_TERM</data>
  <data key="d1">REGEX</data>
</node>
<node id="Computer science">
  <data key="d0">DEFINITION</data>
  <data key="d1">REGEX</data>
</node>
<node id="UCPH Department of Computer Science）">
  <data key="d0">DEFINITION</data>
  <data key="d1">REGEX</data>
</node>
<node id="圖靈工程師（turingineer）">
  <data key="d0">DEFINITION</data>
  <data key="d1">REGEX</data>
</node>
<node id="计算机科学并不只是关于计算机">
  <data key="d0">DEFINITION</data>
  <data key="d1">REGEX</data>
</node>
<node id="Rózsa Péter）">
  <data key="d0">DEFINITION</data>
  <data key="d1">REGEX</data>
</node>
<node id="Stepped reckoner）的建造工作并于1694年竣工">
  <data key="d0">DEFINITION</data>
  <data key="d1">REGEX</data>
</node>
<node id="Peter Wegner（英语：Peter Wegner）提出计算机科学可以分成三个领域：数学工程学科學">
  <data key="d0">DEFINITION</data>
  <data key="d1">REGEX</data>
</node>
<node id="31 作为一个学科">
  <data key="d0">DEFINITION</data>
  <data key="d1">REGEX</data>
</node>
<node id="IEEE Computer Society）（IEEECS）的代表组成34">
  <data key="d0">DEFINITION</data>
  <data key="d1">REGEX</data>
</node>
<node id="计算理论">
  <data key="d0">DEFINITION</data>
  <data key="d1">REGEX</data>
</node>
<node id="计算机能够思考吗">
  <data key="d0">DEFINITION</data>
  <data key="d1">REGEX</data>
</node>
<node id="The Failure to Teach K12 Computer Science in the Digital Age的报告">
  <data key="d0">DEFINITION</data>
  <data key="d1">REGEX</data>
</node>
<node id="Computing in the Core（CinC）被建立">
  <data key="d0">DEFINITION</data>
  <data key="d1">REGEX</data>
</node>
<node id="英語：Computer science，有时缩写为CS">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="比如信息技术">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="computer science">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="computing science">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="英语：UCPH Department of Computer Science">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="turingineer">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="flowchartsman">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="applied metamathematician">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="applied epistemologist">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="information">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="computation">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="斯拉夫语族">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="&quot;Computer science is no more about computers than astronomy is about telescopes.&quot;">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="英语：Rózsa Péter">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="英语：Stepped reckoner">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="如ABC计算机电子数值积分计算机">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="International Business Machines的缩写">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="公元前80005000年">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="英语：Peter Wegner">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="以前被叫做Computing Sciences Accreditation Board">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="ACM">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="英语：IEEE Computer Society">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="IEEECS">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="code">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="security">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="或者计算科学">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="Special Interest Group on Information Retrieval">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="Knowledge Discovery and Data Mining">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="the Association for the Advance of Artificial Intelligence">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="Annual Meeting of the Association for Computational Linguistics">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="The North American Chapter of the Association for Computational Linguistics">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="Conference on Empirical Methods in Natural Language Processing">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="International Joint Conference on Artificial Intelligence">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="页面存档备份，存于互联网档案馆">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="一级门类">
  <data key="d0">PARENTHESIS</data>
  <data key="d1">REGEX</data>
</node>
<node id="NLP">
  <data key="d0">KG_TERM</data>
  <data key="d1">TERM</data>
</node>
<edge source="Knowledge Graph" target="结构化">
  <data key="d2">is_a</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="Knowledge Graph" target="语义">
  <data key="d2">is_a</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="Knowledge Graph" target="知识库">
  <data key="d2">is_a</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="Knowledge Graph" target="符号">
  <data key="d2">used_for</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="Knowledge Graph" target="形式">
  <data key="d2">used_for</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="Knowledge Graph" target="物理">
  <data key="d2">used_for</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="Knowledge Graph" target="结构">
  <data key="d2">is_a</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="Knowledge Graph" target="世界">
  <data key="d2">used_for</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="Knowledge Graph" target="概念">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="Knowledge Graph" target="关系">
  <data key="d2">used_for</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="Knowledge Graph" target="可视化">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="Knowledge Graph" target="图书">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="Knowledge Graph" target="情报学">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="Knowledge Graph" target="领域">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="Knowledge Graph" target="侧重于">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="Knowledge Graph" target="方式">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="谷歌" target="知识库">
  <data key="d2">defined_as</data>
  <data key="d3">知识图谱的概念最早由谷歌2012年5月17日提出，其将知识图谱定义为用于增强搜索引擎功能的辅助知识库</data>
</edge>
<edge source="谷歌" target="搜索引擎">
  <data key="d2">defined_as</data>
  <data key="d3">知识图谱的概念最早由谷歌2012年5月17日提出，其将知识图谱定义为用于增强搜索引擎功能的辅助知识库</data>
</edge>
<edge source="谷歌" target="功能">
  <data key="d2">defined_as</data>
  <data key="d3">知识图谱的概念最早由谷歌2012年5月17日提出，其将知识图谱定义为用于增强搜索引擎功能的辅助知识库</data>
</edge>
<edge source="谷歌" target="辅助">
  <data key="d2">defined_as</data>
  <data key="d3">知识图谱的概念最早由谷歌2012年5月17日提出，其将知识图谱定义为用于增强搜索引擎功能的辅助知识库</data>
</edge>
<edge source="谷歌" target="定义">
  <data key="d2">defined_as</data>
  <data key="d3">知识图谱的概念最早由谷歌2012年5月17日提出，其将知识图谱定义为用于增强搜索引擎功能的辅助知识库</data>
</edge>
<edge source="谷歌" target="语义">
  <data key="d2">is_a</data>
  <data key="d3">56 在谷歌于2012年发布知识图谱之前，Tim BernersLee于2006年就提出了Linked Data，是一种万维网数据上创建语义关联的方法</data>
</edge>
<edge source="谷歌" target="万维网">
  <data key="d2">is_a</data>
  <data key="d3">56 在谷歌于2012年发布知识图谱之前，Tim BernersLee于2006年就提出了Linked Data，是一种万维网数据上创建语义关联的方法</data>
</edge>
<edge source="谷歌" target="数据">
  <data key="d2">is_a</data>
  <data key="d3">56 在谷歌于2012年发布知识图谱之前，Tim BernersLee于2006年就提出了Linked Data，是一种万维网数据上创建语义关联的方法</data>
</edge>
<edge source="谷歌" target="关联">
  <data key="d2">is_a</data>
  <data key="d3">56 在谷歌于2012年发布知识图谱之前，Tim BernersLee于2006年就提出了Linked Data，是一种万维网数据上创建语义关联的方法</data>
</edge>
<edge source="谷歌" target="方法">
  <data key="d2">is_a</data>
  <data key="d3">56 在谷歌于2012年发布知识图谱之前，Tim BernersLee于2006年就提出了Linked Data，是一种万维网数据上创建语义关联的方法</data>
</edge>
<edge source="2012年5月17日" target="知识库">
  <data key="d2">defined_as</data>
  <data key="d3">知识图谱的概念最早由谷歌2012年5月17日提出，其将知识图谱定义为用于增强搜索引擎功能的辅助知识库</data>
</edge>
<edge source="2012年5月17日" target="搜索引擎">
  <data key="d2">defined_as</data>
  <data key="d3">知识图谱的概念最早由谷歌2012年5月17日提出，其将知识图谱定义为用于增强搜索引擎功能的辅助知识库</data>
</edge>
<edge source="2012年5月17日" target="功能">
  <data key="d2">defined_as</data>
  <data key="d3">知识图谱的概念最早由谷歌2012年5月17日提出，其将知识图谱定义为用于增强搜索引擎功能的辅助知识库</data>
</edge>
<edge source="2012年5月17日" target="辅助">
  <data key="d2">defined_as</data>
  <data key="d3">知识图谱的概念最早由谷歌2012年5月17日提出，其将知识图谱定义为用于增强搜索引擎功能的辅助知识库</data>
</edge>
<edge source="2012年5月17日" target="定义">
  <data key="d2">defined_as</data>
  <data key="d3">知识图谱的概念最早由谷歌2012年5月17日提出，其将知识图谱定义为用于增强搜索引擎功能的辅助知识库</data>
</edge>
<edge source="2006年" target="语义">
  <data key="d2">is_a</data>
  <data key="d3">56 在谷歌于2012年发布知识图谱之前，Tim BernersLee于2006年就提出了Linked Data，是一种万维网数据上创建语义关联的方法</data>
</edge>
<edge source="2006年" target="万维网">
  <data key="d2">is_a</data>
  <data key="d3">56 在谷歌于2012年发布知识图谱之前，Tim BernersLee于2006年就提出了Linked Data，是一种万维网数据上创建语义关联的方法</data>
</edge>
<edge source="2006年" target="数据">
  <data key="d2">is_a</data>
  <data key="d3">56 在谷歌于2012年发布知识图谱之前，Tim BernersLee于2006年就提出了Linked Data，是一种万维网数据上创建语义关联的方法</data>
</edge>
<edge source="2006年" target="关联">
  <data key="d2">is_a</data>
  <data key="d3">56 在谷歌于2012年发布知识图谱之前，Tim BernersLee于2006年就提出了Linked Data，是一种万维网数据上创建语义关联的方法</data>
</edge>
<edge source="2006年" target="方法">
  <data key="d2">is_a</data>
  <data key="d3">56 在谷歌于2012年发布知识图谱之前，Tim BernersLee于2006年就提出了Linked Data，是一种万维网数据上创建语义关联的方法</data>
</edge>
<edge source="3 三元组" target="通用">
  <data key="d2">is_a</data>
  <data key="d3">3 三元组是知识图谱的一种通用表示方式，即 G （E, R, S)，其中 E 是知识库中的实体，R 是知识库中的关系，S 代表知识库中的三元组</data>
</edge>
<edge source="3 三元组" target="图谱">
  <data key="d2">is_a</data>
  <data key="d3">3 三元组是知识图谱的一种通用表示方式，即 G （E, R, S)，其中 E 是知识库中的实体，R 是知识库中的关系，S 代表知识库中的三元组</data>
</edge>
<edge source="3 三元组" target="方式">
  <data key="d2">is_a</data>
  <data key="d3">3 三元组是知识图谱的一种通用表示方式，即 G （E, R, S)，其中 E 是知识库中的实体，R 是知识库中的关系，S 代表知识库中的三元组</data>
</edge>
<edge source="3 三元组" target="E, R, S">
  <data key="d2">is_a</data>
  <data key="d3">3 三元组是知识图谱的一种通用表示方式，即 G （E, R, S)，其中 E 是知识库中的实体，R 是知识库中的关系，S 代表知识库中的三元组</data>
</edge>
<edge source="3 三元组" target="知识图谱">
  <data key="d2">is_a</data>
  <data key="d3">3 三元组是知识图谱的一种通用表示方式，即 G （E, R, S)，其中 E 是知识库中的实体，R 是知识库中的关系，S 代表知识库中的三元组</data>
</edge>
<edge source="通用" target="知识库">
  <data key="d2">is_a</data>
  <data key="d3">3 三元组是知识图谱的一种通用表示方式，即 G （E, R, S)，其中 E 是知识库中的实体，R 是知识库中的关系，S 代表知识库中的三元组</data>
</edge>
<edge source="通用" target="关系">
  <data key="d2">is_a</data>
  <data key="d3">3 三元组是知识图谱的一种通用表示方式，即 G （E, R, S)，其中 E 是知识库中的实体，R 是知识库中的关系，S 代表知识库中的三元组</data>
</edge>
<edge source="通用" target="实体">
  <data key="d2">is_a</data>
  <data key="d3">3 三元组是知识图谱的一种通用表示方式，即 G （E, R, S)，其中 E 是知识库中的实体，R 是知识库中的关系，S 代表知识库中的三元组</data>
</edge>
<edge source="三元组" target="通用">
  <data key="d2">is_a</data>
  <data key="d3">3 三元组是知识图谱的一种通用表示方式，即 G （E, R, S)，其中 E 是知识库中的实体，R 是知识库中的关系，S 代表知识库中的三元组</data>
</edge>
<edge source="三元组" target="图谱">
  <data key="d2">is_a</data>
  <data key="d3">3 三元组是知识图谱的一种通用表示方式，即 G （E, R, S)，其中 E 是知识库中的实体，R 是知识库中的关系，S 代表知识库中的三元组</data>
</edge>
<edge source="三元组" target="方式">
  <data key="d2">is_a</data>
  <data key="d3">3 三元组是知识图谱的一种通用表示方式，即 G （E, R, S)，其中 E 是知识库中的实体，R 是知识库中的关系，S 代表知识库中的三元组</data>
</edge>
<edge source="三元组" target="E, R, S">
  <data key="d2">is_a</data>
  <data key="d3">3 三元组是知识图谱的一种通用表示方式，即 G （E, R, S)，其中 E 是知识库中的实体，R 是知识库中的关系，S 代表知识库中的三元组</data>
</edge>
<edge source="三元组" target="知识图谱">
  <data key="d2">is_a</data>
  <data key="d3">3 三元组是知识图谱的一种通用表示方式，即 G （E, R, S)，其中 E 是知识库中的实体，R 是知识库中的关系，S 代表知识库中的三元组</data>
</edge>
<edge source="三元组" target="概念">
  <data key="d2">includes</data>
  <data key="d3">三元组的基本形式主要包括实体1关系实体2和概念属性属性值等</data>
</edge>
<edge source="三元组" target="关系">
  <data key="d2">includes</data>
  <data key="d3">三元组的基本形式主要包括实体1关系实体2和概念属性属性值等</data>
</edge>
<edge source="三元组" target="实体">
  <data key="d2">includes</data>
  <data key="d3">三元组的基本形式主要包括实体1关系实体2和概念属性属性值等</data>
</edge>
<edge source="三元组" target="属性">
  <data key="d2">includes</data>
  <data key="d3">三元组的基本形式主要包括实体1关系实体2和概念属性属性值等</data>
</edge>
<edge source="三元组" target="信息">
  <data key="d2">used_for</data>
  <data key="d3">2011年，Fader采用人工标注方式对1000个句子中的实体关系三元组进行标注，并作为训练集得到逻辑斯蒂回归模型，用于对REVERB系统的信息抽取结果计算置信度</data>
</edge>
<edge source="三元组" target="结果">
  <data key="d2">used_for</data>
  <data key="d3">2011年，Fader采用人工标注方式对1000个句子中的实体关系三元组进行标注，并作为训练集得到逻辑斯蒂回归模型，用于对REVERB系统的信息抽取结果计算置信度</data>
</edge>
<edge source="三元组" target="系统">
  <data key="d2">used_for</data>
  <data key="d3">2011年，Fader采用人工标注方式对1000个句子中的实体关系三元组进行标注，并作为训练集得到逻辑斯蒂回归模型，用于对REVERB系统的信息抽取结果计算置信度</data>
</edge>
<edge source="三元组" target="置信度">
  <data key="d2">used_for</data>
  <data key="d3">2011年，Fader采用人工标注方式对1000个句子中的实体关系三元组进行标注，并作为训练集得到逻辑斯蒂回归模型，用于对REVERB系统的信息抽取结果计算置信度</data>
</edge>
<edge source="中国" target="可视化">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="中国" target="图书">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="中国" target="情报学">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="中国" target="领域">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="中国" target="概念">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="中国" target="侧重于">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="中国" target="方式">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="中国" target="专业">
  <data key="d2">is_a</data>
  <data key="d3">在中国，计算机科学或计算机科学与技术是工科（一级门类）下的二级专业</data>
</edge>
<edge source="中国" target="工科">
  <data key="d2">is_a</data>
  <data key="d3">在中国，计算机科学或计算机科学与技术是工科（一级门类）下的二级专业</data>
</edge>
<edge source="中国" target="门类">
  <data key="d2">is_a</data>
  <data key="d3">在中国，计算机科学或计算机科学与技术是工科（一级门类）下的二级专业</data>
</edge>
<edge source="中国" target="一级门类">
  <data key="d2">is_a</data>
  <data key="d3">在中国，计算机科学或计算机科学与技术是工科（一级门类）下的二级专业</data>
</edge>
<edge source="数据层" target="单位">
  <data key="d2">is_a</data>
  <data key="d3">数据层是以事实（fact）为存储单位的图数据库，其事实的基础表达方式就是实体关系实体或者实体属性属性值</data>
</edge>
<edge source="数据层" target="事实">
  <data key="d2">is_a</data>
  <data key="d3">数据层是以事实（fact）为存储单位的图数据库，其事实的基础表达方式就是实体关系实体或者实体属性属性值</data>
</edge>
<edge source="数据层" target="数据库">
  <data key="d2">is_a</data>
  <data key="d3">数据层是以事实（fact）为存储单位的图数据库，其事实的基础表达方式就是实体关系实体或者实体属性属性值</data>
</edge>
<edge source="数据层" target="fact">
  <data key="d2">is_a</data>
  <data key="d3">数据层是以事实（fact）为存储单位的图数据库，其事实的基础表达方式就是实体关系实体或者实体属性属性值</data>
</edge>
<edge source="数据层" target="图数据库">
  <data key="d2">is_a</data>
  <data key="d3">数据层是以事实（fact）为存储单位的图数据库，其事实的基础表达方式就是实体关系实体或者实体属性属性值</data>
</edge>
<edge source="第一" target="英语">
  <data key="d2">is_a</data>
  <data key="d3">第一个使用这个术语的科学机构是哥本哈根大学计算科学系（英语：UCPH Department of Computer Science），该学院成立于1969年，彼得諾爾便是第一任教授</data>
</edge>
<edge source="第一" target="UCPH Department of Computer Science">
  <data key="d2">is_a</data>
  <data key="d3">第一个使用这个术语的科学机构是哥本哈根大学计算科学系（英语：UCPH Department of Computer Science），该学院成立于1969年，彼得諾爾便是第一任教授</data>
</edge>
<edge source="第一" target="大学">
  <data key="d2">uses</data>
  <data key="d3">第一个使用这个术语的科学机构是哥本哈根大学计算科学系（英语：UCPH Department of Computer Science），该学院成立于1969年，彼得諾爾便是第一任教授</data>
</edge>
<edge source="第一" target="哥本哈根大学">
  <data key="d2">uses</data>
  <data key="d3">第一个使用这个术语的科学机构是哥本哈根大学计算科学系（英语：UCPH Department of Computer Science），该学院成立于1969年，彼得諾爾便是第一任教授</data>
</edge>
<edge source="第一" target="科学系">
  <data key="d2">uses</data>
  <data key="d3">第一个使用这个术语的科学机构是哥本哈根大学计算科学系（英语：UCPH Department of Computer Science），该学院成立于1969年，彼得諾爾便是第一任教授</data>
</edge>
<edge source="第一" target="UCPH Department of Computer Science）">
  <data key="d2">is_a</data>
  <data key="d3">第一个使用这个术语的科学机构是哥本哈根大学计算科学系（英语：UCPH Department of Computer Science），该学院成立于1969年，彼得諾爾便是第一任教授</data>
</edge>
<edge source="第一" target="英语：UCPH Department of Computer Science">
  <data key="d2">is_a</data>
  <data key="d3">第一个使用这个术语的科学机构是哥本哈根大学计算科学系（英语：UCPH Department of Computer Science），该学院成立于1969年，彼得諾爾便是第一任教授</data>
</edge>
<edge source="第一" target="普渡大学">
  <data key="d2">composed_of</data>
  <data key="d3">18 世界上第一个计算机科学学位点由普渡大学在1962年设立</data>
</edge>
<edge source="第一" target="1962年">
  <data key="d2">composed_of</data>
  <data key="d3">18 世界上第一个计算机科学学位点由普渡大学在1962年设立</data>
</edge>
<edge source="第一" target="19">
  <data key="d2">composed_of</data>
  <data key="d3">18 世界上第一个计算机科学学位点由普渡大学在1962年设立</data>
</edge>
<edge source="第一" target="术语">
  <data key="d2">uses</data>
  <data key="d3">第一个使用这个术语的科学机构是哥本哈根大学计算科学系（英语：UCPH Department of Computer Science），该学院成立于1969年，彼得諾爾便是第一任教授</data>
</edge>
<edge source="第一" target="科学">
  <data key="d2">uses</data>
  <data key="d3">第一个使用这个术语的科学机构是哥本哈根大学计算科学系（英语：UCPH Department of Computer Science），该学院成立于1969年，彼得諾爾便是第一任教授</data>
</edge>
<edge source="第一" target="机构">
  <data key="d2">uses</data>
  <data key="d3">第一个使用这个术语的科学机构是哥本哈根大学计算科学系（英语：UCPH Department of Computer Science），该学院成立于1969年，彼得諾爾便是第一任教授</data>
</edge>
<edge source="named" target="基础">
  <data key="d2">is_a</data>
  <data key="d3">6 实体抽取 实体抽取，也称为命名实体识别（named entity recognition，NER），指从源数据中自动识别命名实体，这一步是信息抽取中最基础和关键的部分，因为实体抽取的准确率和召回率对后续知识获取效率和质量影响很大</data>
</edge>
<edge source="named" target="部分">
  <data key="d2">is_a</data>
  <data key="d3">6 实体抽取 实体抽取，也称为命名实体识别（named entity recognition，NER），指从源数据中自动识别命名实体，这一步是信息抽取中最基础和关键的部分，因为实体抽取的准确率和召回率对后续知识获取效率和质量影响很大</data>
</edge>
<edge source="named" target="信息">
  <data key="d2">is_a</data>
  <data key="d3">6 实体抽取 实体抽取，也称为命名实体识别（named entity recognition，NER），指从源数据中自动识别命名实体，这一步是信息抽取中最基础和关键的部分，因为实体抽取的准确率和召回率对后续知识获取效率和质量影响很大</data>
</edge>
<edge source="named" target="关键">
  <data key="d2">is_a</data>
  <data key="d3">6 实体抽取 实体抽取，也称为命名实体识别（named entity recognition，NER），指从源数据中自动识别命名实体，这一步是信息抽取中最基础和关键的部分，因为实体抽取的准确率和召回率对后续知识获取效率和质量影响很大</data>
</edge>
<edge source="named" target="影响">
  <data key="d2">affects</data>
  <data key="d3">6 实体抽取 实体抽取，也称为命名实体识别（named entity recognition，NER），指从源数据中自动识别命名实体，这一步是信息抽取中最基础和关键的部分，因为实体抽取的准确率和召回率对后续知识获取效率和质量影响很大</data>
</edge>
<edge source="NER" target="基础">
  <data key="d2">is_a</data>
  <data key="d3">6 实体抽取 实体抽取，也称为命名实体识别（named entity recognition，NER），指从源数据中自动识别命名实体，这一步是信息抽取中最基础和关键的部分，因为实体抽取的准确率和召回率对后续知识获取效率和质量影响很大</data>
</edge>
<edge source="NER" target="部分">
  <data key="d2">is_a</data>
  <data key="d3">6 实体抽取 实体抽取，也称为命名实体识别（named entity recognition，NER），指从源数据中自动识别命名实体，这一步是信息抽取中最基础和关键的部分，因为实体抽取的准确率和召回率对后续知识获取效率和质量影响很大</data>
</edge>
<edge source="NER" target="信息">
  <data key="d2">is_a</data>
  <data key="d3">6 实体抽取 实体抽取，也称为命名实体识别（named entity recognition，NER），指从源数据中自动识别命名实体，这一步是信息抽取中最基础和关键的部分，因为实体抽取的准确率和召回率对后续知识获取效率和质量影响很大</data>
</edge>
<edge source="NER" target="关键">
  <data key="d2">is_a</data>
  <data key="d3">6 实体抽取 实体抽取，也称为命名实体识别（named entity recognition，NER），指从源数据中自动识别命名实体，这一步是信息抽取中最基础和关键的部分，因为实体抽取的准确率和召回率对后续知识获取效率和质量影响很大</data>
</edge>
<edge source="NER" target="影响">
  <data key="d2">affects</data>
  <data key="d3">6 实体抽取 实体抽取，也称为命名实体识别（named entity recognition，NER），指从源数据中自动识别命名实体，这一步是信息抽取中最基础和关键的部分，因为实体抽取的准确率和召回率对后续知识获取效率和质量影响很大</data>
</edge>
<edge source="2004年" target="数据">
  <data key="d2">based_on</data>
  <data key="d3">早期实体抽取的准召率不够理想，但在2004年，Lin等采用字典辅助下的最大熵算法，基于Medline论文摘要的GENIA数据集使得实体抽取的准召率均超过70</data>
</edge>
<edge source="2004年" target="论文">
  <data key="d2">based_on</data>
  <data key="d3">早期实体抽取的准召率不够理想，但在2004年，Lin等采用字典辅助下的最大熵算法，基于Medline论文摘要的GENIA数据集使得实体抽取的准召率均超过70</data>
</edge>
<edge source="82010年" target="语义">
  <data key="d2">based_on</data>
  <data key="d3">82010年，Jain等提出一种面向开放域的无监督学习算法，事先不给实体分类，而是基于实体的语义特征从搜索日志中识别命名实体，然后采用聚类算法对识别出的实体对象进行聚类</data>
</edge>
<edge source="82010年" target="特征">
  <data key="d2">based_on</data>
  <data key="d3">82010年，Jain等提出一种面向开放域的无监督学习算法，事先不给实体分类，而是基于实体的语义特征从搜索日志中识别命名实体，然后采用聚类算法对识别出的实体对象进行聚类</data>
</edge>
<edge source="82010年" target="命名">
  <data key="d2">based_on</data>
  <data key="d3">82010年，Jain等提出一种面向开放域的无监督学习算法，事先不给实体分类，而是基于实体的语义特征从搜索日志中识别命名实体，然后采用聚类算法对识别出的实体对象进行聚类</data>
</edge>
<edge source="82010年" target="日志">
  <data key="d2">based_on</data>
  <data key="d3">82010年，Jain等提出一种面向开放域的无监督学习算法，事先不给实体分类，而是基于实体的语义特征从搜索日志中识别命名实体，然后采用聚类算法对识别出的实体对象进行聚类</data>
</edge>
<edge source="82010年" target="命名实体">
  <data key="d2">based_on</data>
  <data key="d3">82010年，Jain等提出一种面向开放域的无监督学习算法，事先不给实体分类，而是基于实体的语义特征从搜索日志中识别命名实体，然后采用聚类算法对识别出的实体对象进行聚类</data>
</edge>
<edge source="10" target="语义">
  <data key="d2">based_on</data>
  <data key="d3">82010年，Jain等提出一种面向开放域的无监督学习算法，事先不给实体分类，而是基于实体的语义特征从搜索日志中识别命名实体，然后采用聚类算法对识别出的实体对象进行聚类</data>
</edge>
<edge source="10" target="特征">
  <data key="d2">based_on</data>
  <data key="d3">82010年，Jain等提出一种面向开放域的无监督学习算法，事先不给实体分类，而是基于实体的语义特征从搜索日志中识别命名实体，然后采用聚类算法对识别出的实体对象进行聚类</data>
</edge>
<edge source="10" target="命名">
  <data key="d2">based_on</data>
  <data key="d3">82010年，Jain等提出一种面向开放域的无监督学习算法，事先不给实体分类，而是基于实体的语义特征从搜索日志中识别命名实体，然后采用聚类算法对识别出的实体对象进行聚类</data>
</edge>
<edge source="10" target="日志">
  <data key="d2">based_on</data>
  <data key="d3">82010年，Jain等提出一种面向开放域的无监督学习算法，事先不给实体分类，而是基于实体的语义特征从搜索日志中识别命名实体，然后采用聚类算法对识别出的实体对象进行聚类</data>
</edge>
<edge source="10" target="命名实体">
  <data key="d2">based_on</data>
  <data key="d3">82010年，Jain等提出一种面向开放域的无监督学习算法，事先不给实体分类，而是基于实体的语义特征从搜索日志中识别命名实体，然后采用聚类算法对识别出的实体对象进行聚类</data>
</edge>
<edge source="10" target="关系">
  <data key="d2">includes</data>
  <data key="d3">10知识合并指从第三方知识库产品或已有数据化数据中获取知识输入，包括合并外部知识库和合并关系数据库</data>
</edge>
<edge source="10" target="数据库">
  <data key="d2">includes</data>
  <data key="d3">10知识合并指从第三方知识库产品或已有数据化数据中获取知识输入，包括合并外部知识库和合并关系数据库</data>
</edge>
<edge source="10" target="关系数据库">
  <data key="d2">includes</data>
  <data key="d3">10知识合并指从第三方知识库产品或已有数据化数据中获取知识输入，包括合并外部知识库和合并关系数据库</data>
</edge>
<edge source="10" target="关系数据">
  <data key="d2">includes</data>
  <data key="d3">10知识合并指从第三方知识库产品或已有数据化数据中获取知识输入，包括合并外部知识库和合并关系数据库</data>
</edge>
<edge source="10" target="信息">
  <data key="d2">used_for</data>
  <data key="d3">2011年，Fader采用人工标注方式对1000个句子中的实体关系三元组进行标注，并作为训练集得到逻辑斯蒂回归模型，用于对REVERB系统的信息抽取结果计算置信度</data>
</edge>
<edge source="10" target="结果">
  <data key="d2">used_for</data>
  <data key="d3">2011年，Fader采用人工标注方式对1000个句子中的实体关系三元组进行标注，并作为训练集得到逻辑斯蒂回归模型，用于对REVERB系统的信息抽取结果计算置信度</data>
</edge>
<edge source="10" target="系统">
  <data key="d2">used_for</data>
  <data key="d3">2011年，Fader采用人工标注方式对1000个句子中的实体关系三元组进行标注，并作为训练集得到逻辑斯蒂回归模型，用于对REVERB系统的信息抽取结果计算置信度</data>
</edge>
<edge source="10" target="置信度">
  <data key="d2">used_for</data>
  <data key="d3">2011年，Fader采用人工标注方式对1000个句子中的实体关系三元组进行标注，并作为训练集得到逻辑斯蒂回归模型，用于对REVERB系统的信息抽取结果计算置信度</data>
</edge>
<edge source="10" target="字符串">
  <data key="d2">is_a</data>
  <data key="d3">1例如，如果Σ  0, 1，则0101是在Σ之上的字符串</data>
</edge>
<edge source="10" target="字符">
  <data key="d2">is_a</data>
  <data key="d3">1例如，如果Σ  0, 1，则0101是在Σ之上的字符串</data>
</edge>
<edge source="10" target="形式">
  <data key="d2">is_a</data>
  <data key="d3">例如，如果Σ  0, 1，则带有偶数个零的字符串的集合（ε, 1, 00, 11, 001, 010, 100, 111, 0000, 0011, 0101, 0110, 1001, 1010, 1100, 1111,）是在Σ上的形式语言</data>
</edge>
<edge source="10" target="语言">
  <data key="d2">is_a</data>
  <data key="d3">例如，如果Σ  0, 1，则带有偶数个零的字符串的集合（ε, 1, 00, 11, 001, 010, 100, 111, 0000, 0011, 0101, 0110, 1001, 1010, 1100, 1111,）是在Σ上的形式语言</data>
</edge>
<edge source="第三方" target="关系">
  <data key="d2">includes</data>
  <data key="d3">10知识合并指从第三方知识库产品或已有数据化数据中获取知识输入，包括合并外部知识库和合并关系数据库</data>
</edge>
<edge source="第三方" target="数据库">
  <data key="d2">includes</data>
  <data key="d3">10知识合并指从第三方知识库产品或已有数据化数据中获取知识输入，包括合并外部知识库和合并关系数据库</data>
</edge>
<edge source="第三方" target="关系数据库">
  <data key="d2">includes</data>
  <data key="d3">10知识合并指从第三方知识库产品或已有数据化数据中获取知识输入，包括合并外部知识库和合并关系数据库</data>
</edge>
<edge source="第三方" target="关系数据">
  <data key="d2">includes</data>
  <data key="d3">10知识合并指从第三方知识库产品或已有数据化数据中获取知识输入，包括合并外部知识库和合并关系数据库</data>
</edge>
<edge source="数据化" target="关系">
  <data key="d2">includes</data>
  <data key="d3">10知识合并指从第三方知识库产品或已有数据化数据中获取知识输入，包括合并外部知识库和合并关系数据库</data>
</edge>
<edge source="数据化" target="数据库">
  <data key="d2">includes</data>
  <data key="d3">10知识合并指从第三方知识库产品或已有数据化数据中获取知识输入，包括合并外部知识库和合并关系数据库</data>
</edge>
<edge source="数据化" target="关系数据库">
  <data key="d2">includes</data>
  <data key="d3">10知识合并指从第三方知识库产品或已有数据化数据中获取知识输入，包括合并外部知识库和合并关系数据库</data>
</edge>
<edge source="数据化" target="关系数据">
  <data key="d2">includes</data>
  <data key="d3">10知识合并指从第三方知识库产品或已有数据化数据中获取知识输入，包括合并外部知识库和合并关系数据库</data>
</edge>
<edge source="11" target="信息">
  <data key="d2">used_for</data>
  <data key="d3">2011年，Fader采用人工标注方式对1000个句子中的实体关系三元组进行标注，并作为训练集得到逻辑斯蒂回归模型，用于对REVERB系统的信息抽取结果计算置信度</data>
</edge>
<edge source="11" target="结果">
  <data key="d2">used_for</data>
  <data key="d3">2011年，Fader采用人工标注方式对1000个句子中的实体关系三元组进行标注，并作为训练集得到逻辑斯蒂回归模型，用于对REVERB系统的信息抽取结果计算置信度</data>
</edge>
<edge source="11" target="系统">
  <data key="d2">used_for</data>
  <data key="d3">2011年，Fader采用人工标注方式对1000个句子中的实体关系三元组进行标注，并作为训练集得到逻辑斯蒂回归模型，用于对REVERB系统的信息抽取结果计算置信度</data>
</edge>
<edge source="11" target="置信度">
  <data key="d2">used_for</data>
  <data key="d3">2011年，Fader采用人工标注方式对1000个句子中的实体关系三元组进行标注，并作为训练集得到逻辑斯蒂回归模型，用于对REVERB系统的信息抽取结果计算置信度</data>
</edge>
<edge source="11" target="形式">
  <data key="d2">is_a</data>
  <data key="d3">例如，如果Σ  0, 1，则带有偶数个零的字符串的集合（ε, 1, 00, 11, 001, 010, 100, 111, 0000, 0011, 0101, 0110, 1001, 1010, 1100, 1111,）是在Σ上的形式语言</data>
</edge>
<edge source="11" target="语言">
  <data key="d2">is_a</data>
  <data key="d3">例如，如果Σ  0, 1，则带有偶数个零的字符串的集合（ε, 1, 00, 11, 001, 010, 100, 111, 0000, 0011, 0101, 0110, 1001, 1010, 1100, 1111,）是在Σ上的形式语言</data>
</edge>
<edge source="2011年" target="信息">
  <data key="d2">used_for</data>
  <data key="d3">2011年，Fader采用人工标注方式对1000个句子中的实体关系三元组进行标注，并作为训练集得到逻辑斯蒂回归模型，用于对REVERB系统的信息抽取结果计算置信度</data>
</edge>
<edge source="2011年" target="结果">
  <data key="d2">used_for</data>
  <data key="d3">2011年，Fader采用人工标注方式对1000个句子中的实体关系三元组进行标注，并作为训练集得到逻辑斯蒂回归模型，用于对REVERB系统的信息抽取结果计算置信度</data>
</edge>
<edge source="2011年" target="系统">
  <data key="d2">used_for</data>
  <data key="d3">2011年，Fader采用人工标注方式对1000个句子中的实体关系三元组进行标注，并作为训练集得到逻辑斯蒂回归模型，用于对REVERB系统的信息抽取结果计算置信度</data>
</edge>
<edge source="2011年" target="置信度">
  <data key="d2">used_for</data>
  <data key="d3">2011年，Fader采用人工标注方式对1000个句子中的实体关系三元组进行标注，并作为训练集得到逻辑斯蒂回归模型，用于对REVERB系统的信息抽取结果计算置信度</data>
</edge>
<edge source="1000" target="信息">
  <data key="d2">used_for</data>
  <data key="d3">2011年，Fader采用人工标注方式对1000个句子中的实体关系三元组进行标注，并作为训练集得到逻辑斯蒂回归模型，用于对REVERB系统的信息抽取结果计算置信度</data>
</edge>
<edge source="1000" target="结果">
  <data key="d2">used_for</data>
  <data key="d3">2011年，Fader采用人工标注方式对1000个句子中的实体关系三元组进行标注，并作为训练集得到逻辑斯蒂回归模型，用于对REVERB系统的信息抽取结果计算置信度</data>
</edge>
<edge source="1000" target="系统">
  <data key="d2">used_for</data>
  <data key="d3">2011年，Fader采用人工标注方式对1000个句子中的实体关系三元组进行标注，并作为训练集得到逻辑斯蒂回归模型，用于对REVERB系统的信息抽取结果计算置信度</data>
</edge>
<edge source="1000" target="置信度">
  <data key="d2">used_for</data>
  <data key="d3">2011年，Fader采用人工标注方式对1000个句子中的实体关系三元组进行标注，并作为训练集得到逻辑斯蒂回归模型，用于对REVERB系统的信息抽取结果计算置信度</data>
</edge>
<edge source="12" target="知识库">
  <data key="d2">defined_as</data>
  <data key="d3">知识图谱的概念最早由谷歌2012年5月17日提出，其将知识图谱定义为用于增强搜索引擎功能的辅助知识库</data>
</edge>
<edge source="12" target="搜索引擎">
  <data key="d2">defined_as</data>
  <data key="d3">知识图谱的概念最早由谷歌2012年5月17日提出，其将知识图谱定义为用于增强搜索引擎功能的辅助知识库</data>
</edge>
<edge source="12" target="功能">
  <data key="d2">defined_as</data>
  <data key="d3">知识图谱的概念最早由谷歌2012年5月17日提出，其将知识图谱定义为用于增强搜索引擎功能的辅助知识库</data>
</edge>
<edge source="12" target="辅助">
  <data key="d2">defined_as</data>
  <data key="d3">知识图谱的概念最早由谷歌2012年5月17日提出，其将知识图谱定义为用于增强搜索引擎功能的辅助知识库</data>
</edge>
<edge source="12" target="定义">
  <data key="d2">defined_as</data>
  <data key="d3">知识图谱的概念最早由谷歌2012年5月17日提出，其将知识图谱定义为用于增强搜索引擎功能的辅助知识库</data>
</edge>
<edge source="12" target="專注于">
  <data key="d2">is_a</data>
  <data key="d3">12计算理论的研究就是專注于回答这个根本问题，关于什么能够被计算，去实施这些计算又需要用到多少资源</data>
</edge>
<edge source="12" target="问题">
  <data key="d2">is_a</data>
  <data key="d3">12计算理论的研究就是專注于回答这个根本问题，关于什么能够被计算，去实施这些计算又需要用到多少资源</data>
</edge>
<edge source="12" target="英语">
  <data key="d2">affects</data>
  <data key="d3">12 早期计算机科学受数学研究成果的影响很大，如库尔特哥德尔艾伦图灵路莎彼得（英语：Rózsa Péter），阿隆佐邱奇等数学家的研究，这两个领域在某些学科，例如数理逻辑范畴论域理论和代数，也不断有有益的思想交流</data>
</edge>
<edge source="12" target="艾伦">
  <data key="d2">affects</data>
  <data key="d3">12 早期计算机科学受数学研究成果的影响很大，如库尔特哥德尔艾伦图灵路莎彼得（英语：Rózsa Péter），阿隆佐邱奇等数学家的研究，这两个领域在某些学科，例如数理逻辑范畴论域理论和代数，也不断有有益的思想交流</data>
</edge>
<edge source="12" target="影响">
  <data key="d2">affects</data>
  <data key="d3">12 早期计算机科学受数学研究成果的影响很大，如库尔特哥德尔艾伦图灵路莎彼得（英语：Rózsa Péter），阿隆佐邱奇等数学家的研究，这两个领域在某些学科，例如数理逻辑范畴论域理论和代数，也不断有有益的思想交流</data>
</edge>
<edge source="12" target="哥德尔">
  <data key="d2">affects</data>
  <data key="d3">12 早期计算机科学受数学研究成果的影响很大，如库尔特哥德尔艾伦图灵路莎彼得（英语：Rózsa Péter），阿隆佐邱奇等数学家的研究，这两个领域在某些学科，例如数理逻辑范畴论域理论和代数，也不断有有益的思想交流</data>
</edge>
<edge source="12" target="图灵">
  <data key="d2">affects</data>
  <data key="d3">12 早期计算机科学受数学研究成果的影响很大，如库尔特哥德尔艾伦图灵路莎彼得（英语：Rózsa Péter），阿隆佐邱奇等数学家的研究，这两个领域在某些学科，例如数理逻辑范畴论域理论和代数，也不断有有益的思想交流</data>
</edge>
<edge source="12" target="英语：Rózsa Péter">
  <data key="d2">affects</data>
  <data key="d3">12 早期计算机科学受数学研究成果的影响很大，如库尔特哥德尔艾伦图灵路莎彼得（英语：Rózsa Péter），阿隆佐邱奇等数学家的研究，这两个领域在某些学科，例如数理逻辑范畴论域理论和代数，也不断有有益的思想交流</data>
</edge>
<edge source="13" target="信息">
  <data key="d2">supports</data>
  <data key="d3">13 近年来，语义链网络已经发展为支持信息物理社会智能14 15，已经有了许多应用16</data>
</edge>
<edge source="13" target="问题">
  <data key="d2">extends</data>
  <data key="d3">13 Google Now Web Open Data Microsoft Cortana Web Open Data The World Book Encyclopedia YAGO KB NELL KB YAGO KB NELL KB Wikipedia Web Open Data Wikipedia 受到算法准召率低限制条件多扩展性不好等问题，针对开放域的信息抽取仍面对很大挑战</data>
</edge>
<edge source="13" target="扩展性">
  <data key="d2">extends</data>
  <data key="d3">13 Google Now Web Open Data Microsoft Cortana Web Open Data The World Book Encyclopedia YAGO KB NELL KB YAGO KB NELL KB Wikipedia Web Open Data Wikipedia 受到算法准召率低限制条件多扩展性不好等问题，针对开放域的信息抽取仍面对很大挑战</data>
</edge>
<edge source="13" target="15">
  <data key="d2">supports</data>
  <data key="d3">13 近年来，语义链网络已经发展为支持信息物理社会智能14 15，已经有了许多应用16</data>
</edge>
<edge source="13" target="智能">
  <data key="d2">supports</data>
  <data key="d3">13 近年来，语义链网络已经发展为支持信息物理社会智能14 15，已经有了许多应用16</data>
</edge>
<edge source="13" target="物理">
  <data key="d2">supports</data>
  <data key="d3">13 近年来，语义链网络已经发展为支持信息物理社会智能14 15，已经有了许多应用16</data>
</edge>
<edge source="13" target="社会">
  <data key="d2">supports</data>
  <data key="d3">13 近年来，语义链网络已经发展为支持信息物理社会智能14 15，已经有了许多应用16</data>
</edge>
<edge source="Data Microsoft" target="信息">
  <data key="d2">extends</data>
  <data key="d3">13 Google Now Web Open Data Microsoft Cortana Web Open Data The World Book Encyclopedia YAGO KB NELL KB YAGO KB NELL KB Wikipedia Web Open Data Wikipedia 受到算法准召率低限制条件多扩展性不好等问题，针对开放域的信息抽取仍面对很大挑战</data>
</edge>
<edge source="Data Microsoft" target="问题">
  <data key="d2">extends</data>
  <data key="d3">13 Google Now Web Open Data Microsoft Cortana Web Open Data The World Book Encyclopedia YAGO KB NELL KB YAGO KB NELL KB Wikipedia Web Open Data Wikipedia 受到算法准召率低限制条件多扩展性不好等问题，针对开放域的信息抽取仍面对很大挑战</data>
</edge>
<edge source="Data Microsoft" target="扩展性">
  <data key="d2">extends</data>
  <data key="d3">13 Google Now Web Open Data Microsoft Cortana Web Open Data The World Book Encyclopedia YAGO KB NELL KB YAGO KB NELL KB Wikipedia Web Open Data Wikipedia 受到算法准召率低限制条件多扩展性不好等问题，针对开放域的信息抽取仍面对很大挑战</data>
</edge>
<edge source="Data The World Book Encyclopedia Y" target="信息">
  <data key="d2">extends</data>
  <data key="d3">13 Google Now Web Open Data Microsoft Cortana Web Open Data The World Book Encyclopedia YAGO KB NELL KB YAGO KB NELL KB Wikipedia Web Open Data Wikipedia 受到算法准召率低限制条件多扩展性不好等问题，针对开放域的信息抽取仍面对很大挑战</data>
</edge>
<edge source="Data The World Book Encyclopedia Y" target="问题">
  <data key="d2">extends</data>
  <data key="d3">13 Google Now Web Open Data Microsoft Cortana Web Open Data The World Book Encyclopedia YAGO KB NELL KB YAGO KB NELL KB Wikipedia Web Open Data Wikipedia 受到算法准召率低限制条件多扩展性不好等问题，针对开放域的信息抽取仍面对很大挑战</data>
</edge>
<edge source="Data The World Book Encyclopedia Y" target="扩展性">
  <data key="d2">extends</data>
  <data key="d3">13 Google Now Web Open Data Microsoft Cortana Web Open Data The World Book Encyclopedia YAGO KB NELL KB YAGO KB NELL KB Wikipedia Web Open Data Wikipedia 受到算法准召率低限制条件多扩展性不好等问题，针对开放域的信息抽取仍面对很大挑战</data>
</edge>
<edge source="图谱" target="结构化">
  <data key="d2">is_a</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="图谱" target="语义">
  <data key="d2">uses</data>
  <data key="d3">Google知识图谱（英語：Google Knowledge Graph，也称Google知识图）是Google的一个知识库，其使用语义检索从多种来源收集信息，以提高Google搜索的质量</data>
</edge>
<edge source="图谱" target="知识库">
  <data key="d2">defined_as</data>
  <data key="d3">知识图谱的概念最早由谷歌2012年5月17日提出，其将知识图谱定义为用于增强搜索引擎功能的辅助知识库</data>
</edge>
<edge source="图谱" target="符号">
  <data key="d2">used_for</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="图谱" target="形式">
  <data key="d2">used_for</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="图谱" target="物理">
  <data key="d2">used_for</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="图谱" target="结构">
  <data key="d2">is_a</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="图谱" target="字符串">
  <data key="d2">supports</data>
  <data key="d3">知识图谱可以实现Web从网页链接向概念链接转变，支持用户按主题而不是字符串检索，真正实现语义检索</data>
</edge>
<edge source="图谱" target="检索">
  <data key="d2">uses</data>
  <data key="d3">Google知识图谱（英語：Google Knowledge Graph，也称Google知识图）是Google的一个知识库，其使用语义检索从多种来源收集信息，以提高Google搜索的质量</data>
</edge>
<edge source="图谱" target="數據">
  <data key="d2">is_a</data>
  <data key="d3">1 在知识表示中，知识图谱是一種知识库，其中的數據通過图结构的数据模型或拓扑整合而成</data>
</edge>
<edge source="图谱" target="数据模型">
  <data key="d2">is_a</data>
  <data key="d3">1 在知识表示中，知识图谱是一種知识库，其中的數據通過图结构的数据模型或拓扑整合而成</data>
</edge>
<edge source="图谱" target="数据">
  <data key="d2">is_a</data>
  <data key="d3">1 在知识表示中，知识图谱是一種知识库，其中的數據通過图结构的数据模型或拓扑整合而成</data>
</edge>
<edge source="图谱" target="模型">
  <data key="d2">is_a</data>
  <data key="d3">1 在知识表示中，知识图谱是一種知识库，其中的數據通過图结构的数据模型或拓扑整合而成</data>
</edge>
<edge source="图谱" target="关系">
  <data key="d2">used_for</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="图谱" target="实体">
  <data key="d2">is_a</data>
  <data key="d3">3 三元组是知识图谱的一种通用表示方式，即 G （E, R, S)，其中 E 是知识库中的实体，R 是知识库中的关系，S 代表知识库中的三元组</data>
</edge>
<edge source="图谱" target="方式">
  <data key="d2">is_a</data>
  <data key="d3">现阶段知识图谱大多为公开采集数据并自动抽取资源，经过人工审核后加入到知识库中，这种则是自底向上的构建方式</data>
</edge>
<edge source="图谱" target="谷歌">
  <data key="d2">composed_of</data>
  <data key="d3">知识图谱的概念最早由谷歌2012年5月17日提出，其将知识图谱定义为用于增强搜索引擎功能的辅助知识库</data>
</edge>
<edge source="图谱" target="2012年5月17日">
  <data key="d2">composed_of</data>
  <data key="d3">知识图谱的概念最早由谷歌2012年5月17日提出，其将知识图谱定义为用于增强搜索引擎功能的辅助知识库</data>
</edge>
<edge source="图谱" target="12">
  <data key="d2">composed_of</data>
  <data key="d3">知识图谱的概念最早由谷歌2012年5月17日提出，其将知识图谱定义为用于增强搜索引擎功能的辅助知识库</data>
</edge>
<edge source="图谱" target="世界">
  <data key="d2">includes</data>
  <data key="d3">2 据Google称，知识图谱的信息来自许多来源，包括CIA的世界概况，Freebase和维基百科1</data>
</edge>
<edge source="图谱" target="概念">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="图谱" target="搜索引擎">
  <data key="d2">defined_as</data>
  <data key="d3">知识图谱的概念最早由谷歌2012年5月17日提出，其将知识图谱定义为用于增强搜索引擎功能的辅助知识库</data>
</edge>
<edge source="图谱" target="功能">
  <data key="d2">defined_as</data>
  <data key="d3">知识图谱的概念最早由谷歌2012年5月17日提出，其将知识图谱定义为用于增强搜索引擎功能的辅助知识库</data>
</edge>
<edge source="图谱" target="辅助">
  <data key="d2">defined_as</data>
  <data key="d3">知识图谱的概念最早由谷歌2012年5月17日提出，其将知识图谱定义为用于增强搜索引擎功能的辅助知识库</data>
</edge>
<edge source="图谱" target="体系">
  <data key="d2">used_for</data>
  <data key="d3">在知识图谱中，本体位于模式层，用于描述概念层次体系的知识概念模版</data>
</edge>
<edge source="图谱" target="定义">
  <data key="d2">defined_as</data>
  <data key="d3">知识图谱的概念最早由谷歌2012年5月17日提出，其将知识图谱定义为用于增强搜索引擎功能的辅助知识库</data>
</edge>
<edge source="图谱" target="用户">
  <data key="d2">implements</data>
  <data key="d3">知识图谱可以实现Web从网页链接向概念链接转变，支持用户按主题而不是字符串检索，真正实现语义检索</data>
</edge>
<edge source="图谱" target="主题">
  <data key="d2">supports</data>
  <data key="d3">知识图谱可以实现Web从网页链接向概念链接转变，支持用户按主题而不是字符串检索，真正实现语义检索</data>
</edge>
<edge source="图谱" target="网页">
  <data key="d2">implements</data>
  <data key="d3">知识图谱可以实现Web从网页链接向概念链接转变，支持用户按主题而不是字符串检索，真正实现语义检索</data>
</edge>
<edge source="图谱" target="链接">
  <data key="d2">implements</data>
  <data key="d3">知识图谱可以实现Web从网页链接向概念链接转变，支持用户按主题而不是字符串检索，真正实现语义检索</data>
</edge>
<edge source="图谱" target="绘制">
  <data key="d2">used_for</data>
  <data key="d3">科学知识图谱也称为知识域可视化（Mapping Knowledge Domains），是用于绘制分析和显示学科或学术研究主体之间的相互联系，用于揭示显示科学知识发展进程与结构关系的可视化工具1</data>
</edge>
<edge source="图谱" target="分析">
  <data key="d2">used_for</data>
  <data key="d3">科学知识图谱也称为知识域可视化（Mapping Knowledge Domains），是用于绘制分析和显示学科或学术研究主体之间的相互联系，用于揭示显示科学知识发展进程与结构关系的可视化工具1</data>
</edge>
<edge source="图谱" target="学科">
  <data key="d2">used_for</data>
  <data key="d3">科学知识图谱也称为知识域可视化（Mapping Knowledge Domains），是用于绘制分析和显示学科或学术研究主体之间的相互联系，用于揭示显示科学知识发展进程与结构关系的可视化工具1</data>
</edge>
<edge source="图谱" target="学术研究">
  <data key="d2">used_for</data>
  <data key="d3">科学知识图谱也称为知识域可视化（Mapping Knowledge Domains），是用于绘制分析和显示学科或学术研究主体之间的相互联系，用于揭示显示科学知识发展进程与结构关系的可视化工具1</data>
</edge>
<edge source="图谱" target="主体">
  <data key="d2">used_for</data>
  <data key="d3">科学知识图谱也称为知识域可视化（Mapping Knowledge Domains），是用于绘制分析和显示学科或学术研究主体之间的相互联系，用于揭示显示科学知识发展进程与结构关系的可视化工具1</data>
</edge>
<edge source="图谱" target="学术">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="图谱" target="可视化">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="图谱" target="图书">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="图谱" target="情报学">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="图谱" target="领域">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="图谱" target="侧重于">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="图谱" target="节点">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="图谱" target="代表">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="图谱" target="作者">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="图谱" target="机构">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="图谱" target="文献">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="图谱" target="关键词">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="图谱" target="万维网">
  <data key="d2">is_a</data>
  <data key="d3">56 在谷歌于2012年发布知识图谱之前，Tim BernersLee于2006年就提出了Linked Data，是一种万维网数据上创建语义关联的方法</data>
</edge>
<edge source="图谱" target="关联">
  <data key="d2">is_a</data>
  <data key="d3">56 在谷歌于2012年发布知识图谱之前，Tim BernersLee于2006年就提出了Linked Data，是一种万维网数据上创建语义关联的方法</data>
</edge>
<edge source="图谱" target="方法">
  <data key="d2">is_a</data>
  <data key="d3">56 在谷歌于2012年发布知识图谱之前，Tim BernersLee于2006年就提出了Linked Data，是一种万维网数据上创建语义关联的方法</data>
</edge>
<edge source="图谱" target="列表">
  <data key="d2">is_a</data>
  <data key="d3">Google的约翰娜怀特解释说，搜索引擎使用知识图谱的数据产生的结果：知识图谱知道，圣克鲁斯是一个地方，且此列表与圣克鲁斯有关</data>
</edge>
<edge source="图谱" target="地方">
  <data key="d2">produces</data>
  <data key="d3">Google的约翰娜怀特解释说，搜索引擎使用知识图谱的数据产生的结果：知识图谱知道，圣克鲁斯是一个地方，且此列表与圣克鲁斯有关</data>
</edge>
<edge source="图谱" target="有关">
  <data key="d2">is_a</data>
  <data key="d3">Google的约翰娜怀特解释说，搜索引擎使用知识图谱的数据产生的结果：知识图谱知道，圣克鲁斯是一个地方，且此列表与圣克鲁斯有关</data>
</edge>
<edge source="图谱" target="Freebase">
  <data key="d2">includes</data>
  <data key="d3">2 据Google称，知识图谱的信息来自许多来源，包括CIA的世界概况，Freebase和维基百科1</data>
</edge>
<edge source="图谱" target="百科1">
  <data key="d2">includes</data>
  <data key="d3">2 据Google称，知识图谱的信息来自许多来源，包括CIA的世界概况，Freebase和维基百科1</data>
</edge>
<edge source="图谱" target="概况">
  <data key="d2">includes</data>
  <data key="d3">2 据Google称，知识图谱的信息来自许多来源，包括CIA的世界概况，Freebase和维基百科1</data>
</edge>
<edge source="图谱" target="维基百科">
  <data key="d2">includes</data>
  <data key="d3">2 据Google称，知识图谱的信息来自许多来源，包括CIA的世界概况，Freebase和维基百科1</data>
</edge>
<edge source="图谱" target="圣克鲁斯">
  <data key="d2">produces</data>
  <data key="d3">Google的约翰娜怀特解释说，搜索引擎使用知识图谱的数据产生的结果：知识图谱知道，圣克鲁斯是一个地方，且此列表与圣克鲁斯有关</data>
</edge>
<edge source="图谱" target="结果">
  <data key="d2">produces</data>
  <data key="d3">Google的约翰娜怀特解释说，搜索引擎使用知识图谱的数据产生的结果：知识图谱知道，圣克鲁斯是一个地方，且此列表与圣克鲁斯有关</data>
</edge>
<edge source="图谱" target="产生">
  <data key="d2">produces</data>
  <data key="d3">Google的约翰娜怀特解释说，搜索引擎使用知识图谱的数据产生的结果：知识图谱知道，圣克鲁斯是一个地方，且此列表与圣克鲁斯有关</data>
</edge>
<edge source="图谱" target="知识图谱知道">
  <data key="d2">produces</data>
  <data key="d3">Google的约翰娜怀特解释说，搜索引擎使用知识图谱的数据产生的结果：知识图谱知道，圣克鲁斯是一个地方，且此列表与圣克鲁斯有关</data>
</edge>
<edge source="图谱" target="来源">
  <data key="d2">uses</data>
  <data key="d3">Google知识图谱（英語：Google Knowledge Graph，也称Google知识图）是Google的一个知识库，其使用语义检索从多种来源收集信息，以提高Google搜索的质量</data>
</edge>
<edge source="图谱" target="信息">
  <data key="d2">uses</data>
  <data key="d3">Google知识图谱（英語：Google Knowledge Graph，也称Google知识图）是Google的一个知识库，其使用语义检索从多种来源收集信息，以提高Google搜索的质量</data>
</edge>
<edge source="英語" target="结构化">
  <data key="d2">is_a</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="英語" target="语义">
  <data key="d2">uses</data>
  <data key="d3">Google知识图谱（英語：Google Knowledge Graph，也称Google知识图）是Google的一个知识库，其使用语义检索从多种来源收集信息，以提高Google搜索的质量</data>
</edge>
<edge source="英語" target="知识库">
  <data key="d2">is_a</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="英語" target="符号">
  <data key="d2">used_for</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="英語" target="形式">
  <data key="d2">used_for</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="英語" target="物理">
  <data key="d2">used_for</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="英語" target="结构">
  <data key="d2">is_a</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="英語" target="世界">
  <data key="d2">used_for</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="英語" target="概念">
  <data key="d2">used_for</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="英語" target="关系">
  <data key="d2">used_for</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="英語" target="序列">
  <data key="d2">composed_of</data>
  <data key="d3">字符串（英語：string），是由零个或多个字符组成的有限序列</data>
</edge>
<edge source="英語" target="个字符">
  <data key="d2">composed_of</data>
  <data key="d3">字符串（英語：string），是由零个或多个字符组成的有限序列</data>
</edge>
<edge source="英語" target="二元">
  <data key="d2">is_a</data>
  <data key="d3">串接（英語：concatenation）是Σ上的重要二元运算</data>
</edge>
<edge source="英語" target="运算">
  <data key="d2">is_a</data>
  <data key="d3">串接（英語：concatenation）是Σ上的重要二元运算</data>
</edge>
<edge source="英語" target="数学">
  <data key="d2">is_a</data>
  <data key="d3">图论（英語：Graph theory），是组合数学分支，和其他数学分支如群论矩阵论拓扑学有着密切关系</data>
</edge>
<edge source="英語" target="分支">
  <data key="d2">is_a</data>
  <data key="d3">图论（英語：Graph theory），是组合数学分支，和其他数学分支如群论矩阵论拓扑学有着密切关系</data>
</edge>
<edge source="英語" target="群论">
  <data key="d2">is_a</data>
  <data key="d3">图论（英語：Graph theory），是组合数学分支，和其他数学分支如群论矩阵论拓扑学有着密切关系</data>
</edge>
<edge source="英語" target="矩阵">
  <data key="d2">is_a</data>
  <data key="d3">图论（英語：Graph theory），是组合数学分支，和其他数学分支如群论矩阵论拓扑学有着密切关系</data>
</edge>
<edge source="英語" target="拓扑学">
  <data key="d2">is_a</data>
  <data key="d3">图论（英語：Graph theory），是组合数学分支，和其他数学分支如群论矩阵论拓扑学有着密切关系</data>
</edge>
<edge source="英語" target="图书馆">
  <data key="d2">composed_of</data>
  <data key="d3">圖書資訊學註 1（英語：library and information science, LIS）于20世纪70年代由图书馆学與信息学两大领域合并而成</data>
</edge>
<edge source="英語" target="信息学">
  <data key="d2">composed_of</data>
  <data key="d3">圖書資訊學註 1（英語：library and information science, LIS）于20世纪70年代由图书馆学與信息学两大领域合并而成</data>
</edge>
<edge source="英語" target="图书馆学">
  <data key="d2">composed_of</data>
  <data key="d3">圖書資訊學註 1（英語：library and information science, LIS）于20世纪70年代由图书馆学與信息学两大领域合并而成</data>
</edge>
<edge source="英語" target="领域">
  <data key="d2">composed_of</data>
  <data key="d3">圖書資訊學註 1（英語：library and information science, LIS）于20世纪70年代由图书馆学與信息学两大领域合并而成</data>
</edge>
<edge source="英語" target="信息">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="英語" target="检索">
  <data key="d2">uses</data>
  <data key="d3">Google知识图谱（英語：Google Knowledge Graph，也称Google知识图）是Google的一个知识库，其使用语义检索从多种来源收集信息，以提高Google搜索的质量</data>
</edge>
<edge source="英語" target="阿密特">
  <data key="d2">contains</data>
  <data key="d3">对话搜索（英語：Conversational search）技术包含阿密特推出的一种热关键词的搜索技术，不需要一个接口，即用户只需将Google搜索引擎说OK Google</data>
</edge>
<edge source="英語" target="关键词">
  <data key="d2">contains</data>
  <data key="d3">对话搜索（英語：Conversational search）技术包含阿密特推出的一种热关键词的搜索技术，不需要一个接口，即用户只需将Google搜索引擎说OK Google</data>
</edge>
<edge source="英語" target="来源">
  <data key="d2">uses</data>
  <data key="d3">Google知识图谱（英語：Google Knowledge Graph，也称Google知识图）是Google的一个知识库，其使用语义检索从多种来源收集信息，以提高Google搜索的质量</data>
</edge>
<edge source="英語" target="系统性">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="英語" target="研究">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="英語" target="理论">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="英語" target="基础">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="英語" target="计算机系统">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="英語" target="系统">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="英語" target="实用技术">
  <data key="d2">implements</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="英語" target="学科">
  <data key="d2">implements</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="英語" target="技术">
  <data key="d2">implements</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="结构化" target="符号">
  <data key="d2">used_for</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="结构化" target="形式">
  <data key="d2">used_for</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="结构化" target="物理">
  <data key="d2">used_for</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="结构化" target="世界">
  <data key="d2">used_for</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="结构化" target="概念">
  <data key="d2">used_for</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="结构化" target="关系">
  <data key="d2">used_for</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="语义" target="符号">
  <data key="d2">used_for</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="语义" target="形式">
  <data key="d2">used_for</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="语义" target="物理">
  <data key="d2">supports</data>
  <data key="d3">13 近年来，语义链网络已经发展为支持信息物理社会智能14 15，已经有了许多应用16</data>
</edge>
<edge source="语义" target="世界">
  <data key="d2">used_for</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="语义" target="概念">
  <data key="d2">used_for</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="语义" target="关系">
  <data key="d2">used_for</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="语义" target="方法">
  <data key="d2">is_a</data>
  <data key="d3">更早之前，语义链网络（Semantic Link Network）已经开始了系统性的研究，目标是创立一个自组织的语义互联方法来表达知识支持智能应用, 系统性的理论和方法作为专著发表于2004年</data>
</edge>
<edge source="语义" target="570亿">
  <data key="d2">contains</data>
  <data key="d3">)update，其语义网络包含超过570亿个对象，超过18亿个介绍，这些不同的对象之间有链接关系，用来理解搜索关键词的含义</data>
</edge>
<edge source="语义" target="18亿">
  <data key="d2">contains</data>
  <data key="d3">)update，其语义网络包含超过570亿个对象，超过18亿个介绍，这些不同的对象之间有链接关系，用来理解搜索关键词的含义</data>
</edge>
<edge source="语义" target="对象">
  <data key="d2">contains</data>
  <data key="d3">)update，其语义网络包含超过570亿个对象，超过18亿个介绍，这些不同的对象之间有链接关系，用来理解搜索关键词的含义</data>
</edge>
<edge source="语义" target="智能">
  <data key="d2">supports</data>
  <data key="d3">更早之前，语义链网络（Semantic Link Network）已经开始了系统性的研究，目标是创立一个自组织的语义互联方法来表达知识支持智能应用, 系统性的理论和方法作为专著发表于2004年</data>
</edge>
<edge source="语义" target="理论">
  <data key="d2">supports</data>
  <data key="d3">更早之前，语义链网络（Semantic Link Network）已经开始了系统性的研究，目标是创立一个自组织的语义互联方法来表达知识支持智能应用, 系统性的理论和方法作为专著发表于2004年</data>
</edge>
<edge source="语义" target="专著">
  <data key="d2">supports</data>
  <data key="d3">更早之前，语义链网络（Semantic Link Network）已经开始了系统性的研究，目标是创立一个自组织的语义互联方法来表达知识支持智能应用, 系统性的理论和方法作为专著发表于2004年</data>
</edge>
<edge source="语义" target="15">
  <data key="d2">supports</data>
  <data key="d3">13 近年来，语义链网络已经发展为支持信息物理社会智能14 15，已经有了许多应用16</data>
</edge>
<edge source="语义" target="信息">
  <data key="d2">supports</data>
  <data key="d3">13 近年来，语义链网络已经发展为支持信息物理社会智能14 15，已经有了许多应用16</data>
</edge>
<edge source="语义" target="社会">
  <data key="d2">supports</data>
  <data key="d3">13 近年来，语义链网络已经发展为支持信息物理社会智能14 15，已经有了许多应用16</data>
</edge>
<edge source="知识库" target="关系">
  <data key="d2">used_for</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="知识库" target="代表">
  <data key="d2">is_a</data>
  <data key="d3">3 三元组是知识图谱的一种通用表示方式，即 G （E, R, S)，其中 E 是知识库中的实体，R 是知识库中的关系，S 代表知识库中的三元组</data>
</edge>
<edge source="知识库" target="方式">
  <data key="d2">is_a</data>
  <data key="d3">现阶段知识图谱大多为公开采集数据并自动抽取资源，经过人工审核后加入到知识库中，这种则是自底向上的构建方式</data>
</edge>
<edge source="知识库" target="命名">
  <data key="d2">is_a</data>
  <data key="d3">9 关系抽取 经过实体抽取, 知识库目前得到的仅是一系列离散的命名实体,</data>
</edge>
<edge source="知识库" target="命名实体">
  <data key="d2">is_a</data>
  <data key="d3">9 关系抽取 经过实体抽取, 知识库目前得到的仅是一系列离散的命名实体,</data>
</edge>
<edge source="知识库" target="数据库">
  <data key="d2">used_for</data>
  <data key="d3">知识库（Knowledge base）是用于知识管理的一种特殊的数据库，以便于有关领域知识的采集整理以及提取</data>
</edge>
<edge source="知识库" target="关系数据库">
  <data key="d2">includes</data>
  <data key="d3">10知识合并指从第三方知识库产品或已有数据化数据中获取知识输入，包括合并外部知识库和合并关系数据库</data>
</edge>
<edge source="知识库" target="关系数据">
  <data key="d2">includes</data>
  <data key="d3">10知识合并指从第三方知识库产品或已有数据化数据中获取知识输入，包括合并外部知识库和合并关系数据库</data>
</edge>
<edge source="知识库" target="符号">
  <data key="d2">used_for</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="知识库" target="形式">
  <data key="d2">used_for</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="知识库" target="物理">
  <data key="d2">used_for</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="知识库" target="世界">
  <data key="d2">used_for</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="知识库" target="概念">
  <data key="d2">used_for</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="知识库" target="管理">
  <data key="d2">used_for</data>
  <data key="d3">知识库（Knowledge base）是用于知识管理的一种特殊的数据库，以便于有关领域知识的采集整理以及提取</data>
</edge>
<edge source="知识库" target="有关">
  <data key="d2">used_for</data>
  <data key="d3">知识库（Knowledge base）是用于知识管理的一种特殊的数据库，以便于有关领域知识的采集整理以及提取</data>
</edge>
<edge source="知识库" target="问题">
  <data key="d2">is_a</data>
  <data key="d3">知识库中的知识源于领域专家，它是求解问题所需领域知识的集合，包括基本事实规则和其它有关信息</data>
</edge>
<edge source="知识库" target="基本">
  <data key="d2">includes</data>
  <data key="d3">知识库中的知识源于领域专家，它是求解问题所需领域知识的集合，包括基本事实规则和其它有关信息</data>
</edge>
<edge source="知识库" target="事实">
  <data key="d2">includes</data>
  <data key="d3">知识库中的知识源于领域专家，它是求解问题所需领域知识的集合，包括基本事实规则和其它有关信息</data>
</edge>
<edge source="知识库" target="规则">
  <data key="d2">includes</data>
  <data key="d3">知识库中的知识源于领域专家，它是求解问题所需领域知识的集合，包括基本事实规则和其它有关信息</data>
</edge>
<edge source="知识库" target="信息">
  <data key="d2">uses</data>
  <data key="d3">Google知识图谱（英語：Google Knowledge Graph，也称Google知识图）是Google的一个知识库，其使用语义检索从多种来源收集信息，以提高Google搜索的质量</data>
</edge>
<edge source="知识库" target="领域">
  <data key="d2">used_for</data>
  <data key="d3">知识库（Knowledge base）是用于知识管理的一种特殊的数据库，以便于有关领域知识的采集整理以及提取</data>
</edge>
<edge source="知识库" target="语义">
  <data key="d2">uses</data>
  <data key="d3">Google知识图谱（英語：Google Knowledge Graph，也称Google知识图）是Google的一个知识库，其使用语义检索从多种来源收集信息，以提高Google搜索的质量</data>
</edge>
<edge source="知识库" target="检索">
  <data key="d2">uses</data>
  <data key="d3">Google知识图谱（英語：Google Knowledge Graph，也称Google知识图）是Google的一个知识库，其使用语义检索从多种来源收集信息，以提高Google搜索的质量</data>
</edge>
<edge source="知识库" target="来源">
  <data key="d2">uses</data>
  <data key="d3">Google知识图谱（英語：Google Knowledge Graph，也称Google知识图）是Google的一个知识库，其使用语义检索从多种来源收集信息，以提高Google搜索的质量</data>
</edge>
<edge source="形式" target="概念">
  <data key="d2">includes</data>
  <data key="d3">三元组的基本形式主要包括实体1关系实体2和概念属性属性值等</data>
</edge>
<edge source="形式" target="关系">
  <data key="d2">includes</data>
  <data key="d3">三元组的基本形式主要包括实体1关系实体2和概念属性属性值等</data>
</edge>
<edge source="形式" target="实体">
  <data key="d2">includes</data>
  <data key="d3">三元组的基本形式主要包括实体1关系实体2和概念属性属性值等</data>
</edge>
<edge source="形式" target="属性">
  <data key="d2">includes</data>
  <data key="d3">三元组的基本形式主要包括实体1关系实体2和概念属性属性值等</data>
</edge>
<edge source="形式" target="系统">
  <data key="d2">based_on</data>
  <data key="d3">形式化方法是一种特别的基于数学的技术，用于软件和硬件系统的形式规范开发以及驗證</data>
</edge>
<edge source="形式" target="软件">
  <data key="d2">based_on</data>
  <data key="d3">形式化方法是一种特别的基于数学的技术，用于软件和硬件系统的形式规范开发以及驗證</data>
</edge>
<edge source="形式" target="数学">
  <data key="d2">uses</data>
  <data key="d3">在软件和硬件设计方面，形式化方法的使用动机，如同其它工程学科，是通过适当的数学分析便有助于设计的可靠性和健壮性的期望</data>
</edge>
<edge source="形式" target="技术">
  <data key="d2">based_on</data>
  <data key="d3">形式化方法是一种特别的基于数学的技术，用于软件和硬件系统的形式规范开发以及驗證</data>
</edge>
<edge source="形式" target="硬件">
  <data key="d2">based_on</data>
  <data key="d3">形式化方法是一种特别的基于数学的技术，用于软件和硬件系统的形式规范开发以及驗證</data>
</edge>
<edge source="形式" target="分析">
  <data key="d2">uses</data>
  <data key="d3">在软件和硬件设计方面，形式化方法的使用动机，如同其它工程学科，是通过适当的数学分析便有助于设计的可靠性和健壮性的期望</data>
</edge>
<edge source="形式" target="可靠性">
  <data key="d2">used_for</data>
  <data key="d3">但是，使用形式化方法会带来很高的成本，意味着它们通常只用于高可靠性系统，这种系统中安全或保安（security）是最重要的</data>
</edge>
<edge source="形式" target="健壮性">
  <data key="d2">is_a</data>
  <data key="d3">在软件和硬件设计方面，形式化方法的使用动机，如同其它工程学科，是通过适当的数学分析便有助于设计的可靠性和健壮性的期望</data>
</edge>
<edge source="形式" target="计算机科学">
  <data key="d2">is_a</data>
  <data key="d3">对于形式化方法的最佳形容是各种理论计算机科学基础种类的应用，特别是计算机逻辑演算，形式语言，自动机理论和形式语义学，此外还有类型系统代数数据类型，以及软件和硬件规范和验证中的一些问题</data>
</edge>
<edge source="形式" target="理论">
  <data key="d2">is_a</data>
  <data key="d3">对于形式化方法的最佳形容是各种理论计算机科学基础种类的应用，特别是计算机逻辑演算，形式语言，自动机理论和形式语义学，此外还有类型系统代数数据类型，以及软件和硬件规范和验证中的一些问题</data>
</edge>
<edge source="形式" target="基础">
  <data key="d2">is_a</data>
  <data key="d3">对于形式化方法的最佳形容是各种理论计算机科学基础种类的应用，特别是计算机逻辑演算，形式语言，自动机理论和形式语义学，此外还有类型系统代数数据类型，以及软件和硬件规范和验证中的一些问题</data>
</edge>
<edge source="形式" target="计算机">
  <data key="d2">is_a</data>
  <data key="d3">对于形式化方法的最佳形容是各种理论计算机科学基础种类的应用，特别是计算机逻辑演算，形式语言，自动机理论和形式语义学，此外还有类型系统代数数据类型，以及软件和硬件规范和验证中的一些问题</data>
</edge>
<edge source="形式" target="科学">
  <data key="d2">is_a</data>
  <data key="d3">对于形式化方法的最佳形容是各种理论计算机科学基础种类的应用，特别是计算机逻辑演算，形式语言，自动机理论和形式语义学，此外还有类型系统代数数据类型，以及软件和硬件规范和验证中的一些问题</data>
</edge>
<edge source="形式" target="种类">
  <data key="d2">is_a</data>
  <data key="d3">对于形式化方法的最佳形容是各种理论计算机科学基础种类的应用，特别是计算机逻辑演算，形式语言，自动机理论和形式语义学，此外还有类型系统代数数据类型，以及软件和硬件规范和验证中的一些问题</data>
</edge>
<edge source="形式" target="规范">
  <data key="d2">based_on</data>
  <data key="d3">形式化方法是一种特别的基于数学的技术，用于软件和硬件系统的形式规范开发以及驗證</data>
</edge>
<edge source="形式" target="高可靠性">
  <data key="d2">used_for</data>
  <data key="d3">但是，使用形式化方法会带来很高的成本，意味着它们通常只用于高可靠性系统，这种系统中安全或保安（security）是最重要的</data>
</edge>
<edge source="形式" target="保安">
  <data key="d2">used_for</data>
  <data key="d3">但是，使用形式化方法会带来很高的成本，意味着它们通常只用于高可靠性系统，这种系统中安全或保安（security）是最重要的</data>
</edge>
<edge source="形式" target="security">
  <data key="d2">used_for</data>
  <data key="d3">但是，使用形式化方法会带来很高的成本，意味着它们通常只用于高可靠性系统，这种系统中安全或保安（security）是最重要的</data>
</edge>
<edge source="形式" target="学科">
  <data key="d2">uses</data>
  <data key="d3">在软件和硬件设计方面，形式化方法的使用动机，如同其它工程学科，是通过适当的数学分析便有助于设计的可靠性和健壮性的期望</data>
</edge>
<edge source="形式" target="工程">
  <data key="d2">uses</data>
  <data key="d3">在软件和硬件设计方面，形式化方法的使用动机，如同其它工程学科，是通过适当的数学分析便有助于设计的可靠性和健壮性的期望</data>
</edge>
<edge source="形式" target="工程学">
  <data key="d2">uses</data>
  <data key="d3">在软件和硬件设计方面，形式化方法的使用动机，如同其它工程学科，是通过适当的数学分析便有助于设计的可靠性和健壮性的期望</data>
</edge>
<edge source="形式" target="动机">
  <data key="d2">uses</data>
  <data key="d3">在软件和硬件设计方面，形式化方法的使用动机，如同其它工程学科，是通过适当的数学分析便有助于设计的可靠性和健壮性的期望</data>
</edge>
<edge source="世界" target="图论">
  <data key="d2">is_a</data>
  <data key="d3">1857年，哈密顿发明了環遊世界遊戲（英语：icosian game）（icosian game），与此相关的则是另一个广为人知的图论问题哈密顿路径问题</data>
</edge>
<edge source="世界" target="问题">
  <data key="d2">is_a</data>
  <data key="d3">1857年，哈密顿发明了環遊世界遊戲（英语：icosian game）（icosian game），与此相关的则是另一个广为人知的图论问题哈密顿路径问题</data>
</edge>
<edge source="世界" target="路径">
  <data key="d2">is_a</data>
  <data key="d3">1857年，哈密顿发明了環遊世界遊戲（英语：icosian game）（icosian game），与此相关的则是另一个广为人知的图论问题哈密顿路径问题</data>
</edge>
<edge source="世界" target="普渡大学">
  <data key="d2">composed_of</data>
  <data key="d3">18 世界上第一个计算机科学学位点由普渡大学在1962年设立</data>
</edge>
<edge source="世界" target="1962年">
  <data key="d2">composed_of</data>
  <data key="d3">18 世界上第一个计算机科学学位点由普渡大学在1962年设立</data>
</edge>
<edge source="世界" target="19">
  <data key="d2">composed_of</data>
  <data key="d3">18 世界上第一个计算机科学学位点由普渡大学在1962年设立</data>
</edge>
<edge source="世界" target="大学">
  <data key="d2">composed_of</data>
  <data key="d3">18 世界上第一个计算机科学学位点由普渡大学在1962年设立</data>
</edge>
<edge source="概念" target="语义">
  <data key="d2">implements</data>
  <data key="d3">知识图谱可以实现Web从网页链接向概念链接转变，支持用户按主题而不是字符串检索，真正实现语义检索</data>
</edge>
<edge source="概念" target="字符串">
  <data key="d2">supports</data>
  <data key="d3">知识图谱可以实现Web从网页链接向概念链接转变，支持用户按主题而不是字符串检索，真正实现语义检索</data>
</edge>
<edge source="概念" target="检索">
  <data key="d2">supports</data>
  <data key="d3">知识图谱可以实现Web从网页链接向概念链接转变，支持用户按主题而不是字符串检索，真正实现语义检索</data>
</edge>
<edge source="概念" target="谷歌">
  <data key="d2">composed_of</data>
  <data key="d3">知识图谱的概念最早由谷歌2012年5月17日提出，其将知识图谱定义为用于增强搜索引擎功能的辅助知识库</data>
</edge>
<edge source="概念" target="2012年5月17日">
  <data key="d2">composed_of</data>
  <data key="d3">知识图谱的概念最早由谷歌2012年5月17日提出，其将知识图谱定义为用于增强搜索引擎功能的辅助知识库</data>
</edge>
<edge source="概念" target="12">
  <data key="d2">composed_of</data>
  <data key="d3">知识图谱的概念最早由谷歌2012年5月17日提出，其将知识图谱定义为用于增强搜索引擎功能的辅助知识库</data>
</edge>
<edge source="概念" target="知识库">
  <data key="d2">defined_as</data>
  <data key="d3">知识图谱的概念最早由谷歌2012年5月17日提出，其将知识图谱定义为用于增强搜索引擎功能的辅助知识库</data>
</edge>
<edge source="概念" target="搜索引擎">
  <data key="d2">defined_as</data>
  <data key="d3">知识图谱的概念最早由谷歌2012年5月17日提出，其将知识图谱定义为用于增强搜索引擎功能的辅助知识库</data>
</edge>
<edge source="概念" target="功能">
  <data key="d2">defined_as</data>
  <data key="d3">知识图谱的概念最早由谷歌2012年5月17日提出，其将知识图谱定义为用于增强搜索引擎功能的辅助知识库</data>
</edge>
<edge source="概念" target="辅助">
  <data key="d2">defined_as</data>
  <data key="d3">知识图谱的概念最早由谷歌2012年5月17日提出，其将知识图谱定义为用于增强搜索引擎功能的辅助知识库</data>
</edge>
<edge source="概念" target="定义">
  <data key="d2">defined_as</data>
  <data key="d3">知识图谱的概念最早由谷歌2012年5月17日提出，其将知识图谱定义为用于增强搜索引擎功能的辅助知识库</data>
</edge>
<edge source="概念" target="用户">
  <data key="d2">supports</data>
  <data key="d3">知识图谱可以实现Web从网页链接向概念链接转变，支持用户按主题而不是字符串检索，真正实现语义检索</data>
</edge>
<edge source="概念" target="主题">
  <data key="d2">supports</data>
  <data key="d3">知识图谱可以实现Web从网页链接向概念链接转变，支持用户按主题而不是字符串检索，真正实现语义检索</data>
</edge>
<edge source="概念" target="结构">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="概念" target="计算机领域">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="概念" target="结构化">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="概念" target="数据">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="概念" target="形式">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="概念" target="计算机科学">
  <data key="d2">used_for</data>
  <data key="d3">17计算机的概念变得更加清晰，它不仅仅用于数学运算，总的来说计算机科学的领域也扩展到了对于计算的研究</data>
</edge>
<edge source="概念" target="领域">
  <data key="d2">used_for</data>
  <data key="d3">17计算机的概念变得更加清晰，它不仅仅用于数学运算，总的来说计算机科学的领域也扩展到了对于计算的研究</data>
</edge>
<edge source="概念" target="科学">
  <data key="d2">used_for</data>
  <data key="d3">17计算机的概念变得更加清晰，它不仅仅用于数学运算，总的来说计算机科学的领域也扩展到了对于计算的研究</data>
</edge>
<edge source="概念" target="数学">
  <data key="d2">used_for</data>
  <data key="d3">17计算机的概念变得更加清晰，它不仅仅用于数学运算，总的来说计算机科学的领域也扩展到了对于计算的研究</data>
</edge>
<edge source="概念" target="运算">
  <data key="d2">used_for</data>
  <data key="d3">17计算机的概念变得更加清晰，它不仅仅用于数学运算，总的来说计算机科学的领域也扩展到了对于计算的研究</data>
</edge>
<edge source="概念" target="研究">
  <data key="d2">extends</data>
  <data key="d3">17计算机的概念变得更加清晰，它不仅仅用于数学运算，总的来说计算机科学的领域也扩展到了对于计算的研究</data>
</edge>
<edge source="关系" target="命名">
  <data key="d2">is_a</data>
  <data key="d3">9 关系抽取 经过实体抽取, 知识库目前得到的仅是一系列离散的命名实体,</data>
</edge>
<edge source="关系" target="命名实体">
  <data key="d2">is_a</data>
  <data key="d3">9 关系抽取 经过实体抽取, 知识库目前得到的仅是一系列离散的命名实体,</data>
</edge>
<edge source="关系" target="概念">
  <data key="d2">includes</data>
  <data key="d3">知识推理的对象除了实体关系，还包括实体的属性值本体概念层次关系等</data>
</edge>
<edge source="关系" target="属性">
  <data key="d2">includes</data>
  <data key="d3">知识推理的对象除了实体关系，还包括实体的属性值本体概念层次关系等</data>
</edge>
<edge source="关系" target="本体">
  <data key="d2">includes</data>
  <data key="d3">知识推理的对象除了实体关系，还包括实体的属性值本体概念层次关系等</data>
</edge>
<edge source="关系" target="信息">
  <data key="d2">used_for</data>
  <data key="d3">2011年，Fader采用人工标注方式对1000个句子中的实体关系三元组进行标注，并作为训练集得到逻辑斯蒂回归模型，用于对REVERB系统的信息抽取结果计算置信度</data>
</edge>
<edge source="关系" target="结果">
  <data key="d2">used_for</data>
  <data key="d3">2011年，Fader采用人工标注方式对1000个句子中的实体关系三元组进行标注，并作为训练集得到逻辑斯蒂回归模型，用于对REVERB系统的信息抽取结果计算置信度</data>
</edge>
<edge source="关系" target="系统">
  <data key="d2">used_for</data>
  <data key="d3">2011年，Fader采用人工标注方式对1000个句子中的实体关系三元组进行标注，并作为训练集得到逻辑斯蒂回归模型，用于对REVERB系统的信息抽取结果计算置信度</data>
</edge>
<edge source="关系" target="置信度">
  <data key="d2">used_for</data>
  <data key="d3">2011年，Fader采用人工标注方式对1000个句子中的实体关系三元组进行标注，并作为训练集得到逻辑斯蒂回归模型，用于对REVERB系统的信息抽取结果计算置信度</data>
</edge>
<edge source="关系" target="空串">
  <data key="d2">is_a</data>
  <data key="d3">是其子串关系定义了在Σ上的偏序，其最小元是空串</data>
</edge>
<edge source="关系" target="争议">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学和软件工程的关系是一个有争议的话题，随后关于什么是软件工程，计算机科学又该如何定义的争论使得情况更加混乱</data>
</edge>
<edge source="关系" target="话题">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学和软件工程的关系是一个有争议的话题，随后关于什么是软件工程，计算机科学又该如何定义的争论使得情况更加混乱</data>
</edge>
<edge source="关系" target="研究">
  <data key="d2">is_a</data>
  <data key="d3">David Parnas从其它工程和科学学科之间的关系得到启示，宣称计算机科学的主要重点总的来说是研究计算的性质，而软件工程的主要重点是具体的计算设计，以达到实用的目的，这样便构成了两个独立但又互补的学科</data>
</edge>
<edge source="关系" target="性质">
  <data key="d2">is_a</data>
  <data key="d3">David Parnas从其它工程和科学学科之间的关系得到启示，宣称计算机科学的主要重点总的来说是研究计算的性质，而软件工程的主要重点是具体的计算设计，以达到实用的目的，这样便构成了两个独立但又互补的学科</data>
</edge>
<edge source="关系" target="软件">
  <data key="d2">is_a</data>
  <data key="d3">David Parnas从其它工程和科学学科之间的关系得到启示，宣称计算机科学的主要重点总的来说是研究计算的性质，而软件工程的主要重点是具体的计算设计，以达到实用的目的，这样便构成了两个独立但又互补的学科</data>
</edge>
<edge source="基本" target="三元组">
  <data key="d2">is_a</data>
  <data key="d3">其基本组成单位是实体关系实体三元组，以及实体及其相关属性值对，实体间通过关系相互联结，构成网状的知识结构</data>
</edge>
<edge source="基本" target="关系">
  <data key="d2">includes</data>
  <data key="d3">三元组的基本形式主要包括实体1关系实体2和概念属性属性值等</data>
</edge>
<edge source="基本" target="实体">
  <data key="d2">includes</data>
  <data key="d3">三元组的基本形式主要包括实体1关系实体2和概念属性属性值等</data>
</edge>
<edge source="基本" target="属性">
  <data key="d2">includes</data>
  <data key="d3">三元组的基本形式主要包括实体1关系实体2和概念属性属性值等</data>
</edge>
<edge source="基本" target="概念">
  <data key="d2">includes</data>
  <data key="d3">三元组的基本形式主要包括实体1关系实体2和概念属性属性值等</data>
</edge>
<edge source="基本" target="顺序存储">
  <data key="d2">is_a</data>
  <data key="d3">串的两种最基本的存储方式是顺序存储方式和链接存储方式</data>
</edge>
<edge source="基本" target="链接">
  <data key="d2">is_a</data>
  <data key="d3">串的两种最基本的存储方式是顺序存储方式和链接存储方式</data>
</edge>
<edge source="基本" target="规则">
  <data key="d2">is_a</data>
  <data key="d3">某些语言如C把字符串实现为可以用于任何基本类型的模版，但这是个例外而不是规则</data>
</edge>
<edge source="单位" target="三元组">
  <data key="d2">is_a</data>
  <data key="d3">其基本组成单位是实体关系实体三元组，以及实体及其相关属性值对，实体间通过关系相互联结，构成网状的知识结构</data>
</edge>
<edge source="单位" target="关系">
  <data key="d2">is_a</data>
  <data key="d3">其基本组成单位是实体关系实体三元组，以及实体及其相关属性值对，实体间通过关系相互联结，构成网状的知识结构</data>
</edge>
<edge source="单位" target="实体">
  <data key="d2">is_a</data>
  <data key="d3">其基本组成单位是实体关系实体三元组，以及实体及其相关属性值对，实体间通过关系相互联结，构成网状的知识结构</data>
</edge>
<edge source="单位" target="属性">
  <data key="d2">is_a</data>
  <data key="d3">其基本组成单位是实体关系实体三元组，以及实体及其相关属性值对，实体间通过关系相互联结，构成网状的知识结构</data>
</edge>
<edge source="实体" target="关系">
  <data key="d2">is_a</data>
  <data key="d3">3 三元组是知识图谱的一种通用表示方式，即 G （E, R, S)，其中 E 是知识库中的实体，R 是知识库中的关系，S 代表知识库中的三元组</data>
</edge>
<edge source="实体" target="代表">
  <data key="d2">is_a</data>
  <data key="d3">3 三元组是知识图谱的一种通用表示方式，即 G （E, R, S)，其中 E 是知识库中的实体，R 是知识库中的关系，S 代表知识库中的三元组</data>
</edge>
<edge source="实体" target="图谱">
  <data key="d2">is_a</data>
  <data key="d3">实体是知识图谱中的最基本元素，不同的实体间存在不同的关系</data>
</edge>
<edge source="实体" target="基本">
  <data key="d2">is_a</data>
  <data key="d3">实体是知识图谱中的最基本元素，不同的实体间存在不同的关系</data>
</edge>
<edge source="实体" target="元素">
  <data key="d2">is_a</data>
  <data key="d3">实体是知识图谱中的最基本元素，不同的实体间存在不同的关系</data>
</edge>
<edge source="实体" target="知识图谱">
  <data key="d2">is_a</data>
  <data key="d3">实体是知识图谱中的最基本元素，不同的实体间存在不同的关系</data>
</edge>
<edge source="实体" target="基础">
  <data key="d2">is_a</data>
  <data key="d3">6 实体抽取 实体抽取，也称为命名实体识别（named entity recognition，NER），指从源数据中自动识别命名实体，这一步是信息抽取中最基础和关键的部分，因为实体抽取的准确率和召回率对后续知识获取效率和质量影响很大</data>
</edge>
<edge source="实体" target="部分">
  <data key="d2">is_a</data>
  <data key="d3">6 实体抽取 实体抽取，也称为命名实体识别（named entity recognition，NER），指从源数据中自动识别命名实体，这一步是信息抽取中最基础和关键的部分，因为实体抽取的准确率和召回率对后续知识获取效率和质量影响很大</data>
</edge>
<edge source="实体" target="信息">
  <data key="d2">used_for</data>
  <data key="d3">2011年，Fader采用人工标注方式对1000个句子中的实体关系三元组进行标注，并作为训练集得到逻辑斯蒂回归模型，用于对REVERB系统的信息抽取结果计算置信度</data>
</edge>
<edge source="实体" target="关键">
  <data key="d2">is_a</data>
  <data key="d3">6 实体抽取 实体抽取，也称为命名实体识别（named entity recognition，NER），指从源数据中自动识别命名实体，这一步是信息抽取中最基础和关键的部分，因为实体抽取的准确率和召回率对后续知识获取效率和质量影响很大</data>
</edge>
<edge source="实体" target="语义">
  <data key="d2">based_on</data>
  <data key="d3">82010年，Jain等提出一种面向开放域的无监督学习算法，事先不给实体分类，而是基于实体的语义特征从搜索日志中识别命名实体，然后采用聚类算法对识别出的实体对象进行聚类</data>
</edge>
<edge source="实体" target="特征">
  <data key="d2">based_on</data>
  <data key="d3">82010年，Jain等提出一种面向开放域的无监督学习算法，事先不给实体分类，而是基于实体的语义特征从搜索日志中识别命名实体，然后采用聚类算法对识别出的实体对象进行聚类</data>
</edge>
<edge source="实体" target="命名">
  <data key="d2">based_on</data>
  <data key="d3">82010年，Jain等提出一种面向开放域的无监督学习算法，事先不给实体分类，而是基于实体的语义特征从搜索日志中识别命名实体，然后采用聚类算法对识别出的实体对象进行聚类</data>
</edge>
<edge source="实体" target="日志">
  <data key="d2">based_on</data>
  <data key="d3">82010年，Jain等提出一种面向开放域的无监督学习算法，事先不给实体分类，而是基于实体的语义特征从搜索日志中识别命名实体，然后采用聚类算法对识别出的实体对象进行聚类</data>
</edge>
<edge source="实体" target="命名实体">
  <data key="d2">based_on</data>
  <data key="d3">82010年，Jain等提出一种面向开放域的无监督学习算法，事先不给实体分类，而是基于实体的语义特征从搜索日志中识别命名实体，然后采用聚类算法对识别出的实体对象进行聚类</data>
</edge>
<edge source="实体" target="概念">
  <data key="d2">includes</data>
  <data key="d3">知识推理的对象除了实体关系，还包括实体的属性值本体概念层次关系等</data>
</edge>
<edge source="实体" target="属性">
  <data key="d2">includes</data>
  <data key="d3">知识推理的对象除了实体关系，还包括实体的属性值本体概念层次关系等</data>
</edge>
<edge source="实体" target="本体">
  <data key="d2">includes</data>
  <data key="d3">知识推理的对象除了实体关系，还包括实体的属性值本体概念层次关系等</data>
</edge>
<edge source="实体" target="结果">
  <data key="d2">used_for</data>
  <data key="d3">2011年，Fader采用人工标注方式对1000个句子中的实体关系三元组进行标注，并作为训练集得到逻辑斯蒂回归模型，用于对REVERB系统的信息抽取结果计算置信度</data>
</edge>
<edge source="实体" target="系统">
  <data key="d2">used_for</data>
  <data key="d3">2011年，Fader采用人工标注方式对1000个句子中的实体关系三元组进行标注，并作为训练集得到逻辑斯蒂回归模型，用于对REVERB系统的信息抽取结果计算置信度</data>
</edge>
<edge source="实体" target="置信度">
  <data key="d2">used_for</data>
  <data key="d3">2011年，Fader采用人工标注方式对1000个句子中的实体关系三元组进行标注，并作为训练集得到逻辑斯蒂回归模型，用于对REVERB系统的信息抽取结果计算置信度</data>
</edge>
<edge source="实体" target="数据">
  <data key="d2">based_on</data>
  <data key="d3">早期实体抽取的准召率不够理想，但在2004年，Lin等采用字典辅助下的最大熵算法，基于Medline论文摘要的GENIA数据集使得实体抽取的准召率均超过70</data>
</edge>
<edge source="实体" target="论文">
  <data key="d2">based_on</data>
  <data key="d3">早期实体抽取的准召率不够理想，但在2004年，Lin等采用字典辅助下的最大熵算法，基于Medline论文摘要的GENIA数据集使得实体抽取的准召率均超过70</data>
</edge>
<edge source="实体" target="影响">
  <data key="d2">affects</data>
  <data key="d3">6 实体抽取 实体抽取，也称为命名实体识别（named entity recognition，NER），指从源数据中自动识别命名实体，这一步是信息抽取中最基础和关键的部分，因为实体抽取的准确率和召回率对后续知识获取效率和质量影响很大</data>
</edge>
<edge source="属性" target="实体">
  <data key="d2">is_a</data>
  <data key="d3">1 属性抽取 属性抽取是从不同信息源中采集特定实体的属性信息</data>
</edge>
<edge source="属性" target="信息">
  <data key="d2">is_a</data>
  <data key="d3">1 属性抽取 属性抽取是从不同信息源中采集特定实体的属性信息</data>
</edge>
<edge source="属性" target="信息源">
  <data key="d2">is_a</data>
  <data key="d3">1 属性抽取 属性抽取是从不同信息源中采集特定实体的属性信息</data>
</edge>
<edge source="网页" target="语义">
  <data key="d2">implements</data>
  <data key="d3">知识图谱可以实现Web从网页链接向概念链接转变，支持用户按主题而不是字符串检索，真正实现语义检索</data>
</edge>
<edge source="网页" target="字符串">
  <data key="d2">supports</data>
  <data key="d3">知识图谱可以实现Web从网页链接向概念链接转变，支持用户按主题而不是字符串检索，真正实现语义检索</data>
</edge>
<edge source="网页" target="检索">
  <data key="d2">supports</data>
  <data key="d3">知识图谱可以实现Web从网页链接向概念链接转变，支持用户按主题而不是字符串检索，真正实现语义检索</data>
</edge>
<edge source="网页" target="用户">
  <data key="d2">supports</data>
  <data key="d3">知识图谱可以实现Web从网页链接向概念链接转变，支持用户按主题而不是字符串检索，真正实现语义检索</data>
</edge>
<edge source="网页" target="主题">
  <data key="d2">supports</data>
  <data key="d3">知识图谱可以实现Web从网页链接向概念链接转变，支持用户按主题而不是字符串检索，真正实现语义检索</data>
</edge>
<edge source="链接" target="语义">
  <data key="d2">implements</data>
  <data key="d3">知识图谱可以实现Web从网页链接向概念链接转变，支持用户按主题而不是字符串检索，真正实现语义检索</data>
</edge>
<edge source="链接" target="字符串">
  <data key="d2">supports</data>
  <data key="d3">知识图谱可以实现Web从网页链接向概念链接转变，支持用户按主题而不是字符串检索，真正实现语义检索</data>
</edge>
<edge source="链接" target="检索">
  <data key="d2">supports</data>
  <data key="d3">知识图谱可以实现Web从网页链接向概念链接转变，支持用户按主题而不是字符串检索，真正实现语义检索</data>
</edge>
<edge source="链接" target="用户">
  <data key="d2">supports</data>
  <data key="d3">知识图谱可以实现Web从网页链接向概念链接转变，支持用户按主题而不是字符串检索，真正实现语义检索</data>
</edge>
<edge source="链接" target="主题">
  <data key="d2">supports</data>
  <data key="d3">知识图谱可以实现Web从网页链接向概念链接转变，支持用户按主题而不是字符串检索，真正实现语义检索</data>
</edge>
<edge source="用户" target="语义">
  <data key="d2">implements</data>
  <data key="d3">知识图谱可以实现Web从网页链接向概念链接转变，支持用户按主题而不是字符串检索，真正实现语义检索</data>
</edge>
<edge source="用户" target="字符串">
  <data key="d2">is_a</data>
  <data key="d3">知识图谱可以实现Web从网页链接向概念链接转变，支持用户按主题而不是字符串检索，真正实现语义检索</data>
</edge>
<edge source="用户" target="检索">
  <data key="d2">is_a</data>
  <data key="d3">知识图谱可以实现Web从网页链接向概念链接转变，支持用户按主题而不是字符串检索，真正实现语义检索</data>
</edge>
<edge source="用户" target="信息">
  <data key="d2">uses</data>
  <data key="d3">其目标是，用户将能够使用此功能提供的信息来解决他们查询的问题，而不必导航到其他网站并自己汇总信息</data>
</edge>
<edge source="用户" target="功能">
  <data key="d2">uses</data>
  <data key="d3">其目标是，用户将能够使用此功能提供的信息来解决他们查询的问题，而不必导航到其他网站并自己汇总信息</data>
</edge>
<edge source="用户" target="问题">
  <data key="d2">uses</data>
  <data key="d3">其目标是，用户将能够使用此功能提供的信息来解决他们查询的问题，而不必导航到其他网站并自己汇总信息</data>
</edge>
<edge source="用户" target="查询">
  <data key="d2">uses</data>
  <data key="d3">其目标是，用户将能够使用此功能提供的信息来解决他们查询的问题，而不必导航到其他网站并自己汇总信息</data>
</edge>
<edge source="主题" target="语义">
  <data key="d2">implements</data>
  <data key="d3">知识图谱可以实现Web从网页链接向概念链接转变，支持用户按主题而不是字符串检索，真正实现语义检索</data>
</edge>
<edge source="主题" target="字符串">
  <data key="d2">is_a</data>
  <data key="d3">知识图谱可以实现Web从网页链接向概念链接转变，支持用户按主题而不是字符串检索，真正实现语义检索</data>
</edge>
<edge source="主题" target="检索">
  <data key="d2">is_a</data>
  <data key="d3">知识图谱可以实现Web从网页链接向概念链接转变，支持用户按主题而不是字符串检索，真正实现语义检索</data>
</edge>
<edge source="字符串" target="语义">
  <data key="d2">implements</data>
  <data key="d3">知识图谱可以实现Web从网页链接向概念链接转变，支持用户按主题而不是字符串检索，真正实现语义检索</data>
</edge>
<edge source="字符串" target="序列">
  <data key="d2">defined_as</data>
  <data key="d3">对于Σ中的两个字符串s和t，它们的串接被定义为在s中的字符序列之后跟随着t中的字符序列，并被指示为st</data>
</edge>
<edge source="字符串" target="个字符">
  <data key="d2">composed_of</data>
  <data key="d3">字符串（英語：string），是由零个或多个字符组成的有限序列</data>
</edge>
<edge source="字符串" target="长度">
  <data key="d2">is_a</data>
  <data key="d3">两个字符串相等的充要条件是：长度相等，并且各个对应位置上的字符都相等</data>
</edge>
<edge source="字符串" target="对应">
  <data key="d2">is_a</data>
  <data key="d3">两个字符串相等的充要条件是：长度相等，并且各个对应位置上的字符都相等</data>
</edge>
<edge source="字符串" target="长度相等">
  <data key="d2">is_a</data>
  <data key="d3">两个字符串相等的充要条件是：长度相等，并且各个对应位置上的字符都相等</data>
</edge>
<edge source="字符串" target="数目">
  <data key="d2">is_a</data>
  <data key="d3">字符串的长度是在字符串中字符的数目（序列的长度），它可以是任何非负整数</data>
</edge>
<edge source="字符串" target="序列的长度">
  <data key="d2">is_a</data>
  <data key="d3">字符串的长度是在字符串中字符的数目（序列的长度），它可以是任何非负整数</data>
</edge>
<edge source="字符串" target="子集">
  <data key="d2">is_a</data>
  <data key="d3">在Σ上一个字符串的集合（就是Σ的任何子集）被称为在Σ上的形式语言</data>
</edge>
<edge source="字符串" target="形式">
  <data key="d2">is_a</data>
  <data key="d3">在Σ上一个字符串的集合（就是Σ的任何子集）被称为在Σ上的形式语言</data>
</edge>
<edge source="字符串" target="语言">
  <data key="d2">is_a</data>
  <data key="d3">在Σ上一个字符串的集合（就是Σ的任何子集）被称为在Σ上的形式语言</data>
</edge>
<edge source="字符串" target="运算">
  <data key="d2">is_a</data>
  <data key="d3">字符串串接是结合性的，但非交换性运算</data>
</edge>
<edge source="字符串" target="string">
  <data key="d2">is_a</data>
  <data key="d3">字符串s被称为是字符串t的子串（英語：substring）或因子（英語：factor），如果存在（可能为空）字符串u和v使得t  usv</data>
</edge>
<edge source="字符串" target="英語">
  <data key="d2">is_a</data>
  <data key="d3">字符串s被称为是字符串t的子串（英語：substring）或因子（英語：factor），如果存在（可能为空）字符串u和v使得t  usv</data>
</edge>
<edge source="字符串" target="子串">
  <data key="d2">is_a</data>
  <data key="d3">字符串s被称为是字符串t的子串（英語：substring）或因子（英語：factor），如果存在（可能为空）字符串u和v使得t  usv</data>
</edge>
<edge source="字符串" target="string）">
  <data key="d2">is_a</data>
  <data key="d3">字符串s被称为是字符串t的子串（英語：substring）或因子（英語：factor），如果存在（可能为空）字符串u和v使得t  usv</data>
</edge>
<edge source="字符串" target="substring）或因子（英語：factor）">
  <data key="d2">is_a</data>
  <data key="d3">字符串s被称为是字符串t的子串（英語：substring）或因子（英語：factor），如果存在（可能为空）字符串u和v使得t  usv</data>
</edge>
<edge source="字符串" target="英語：substring">
  <data key="d2">is_a</data>
  <data key="d3">字符串s被称为是字符串t的子串（英語：substring）或因子（英語：factor），如果存在（可能为空）字符串u和v使得t  usv</data>
</edge>
<edge source="字符串" target="建模">
  <data key="d2">is_a</data>
  <data key="d3">字符串数据类型是建模在形式字符串的想法上的数据类型（Data type）</data>
</edge>
<edge source="字符串" target="Data type">
  <data key="d2">is_a</data>
  <data key="d3">字符串数据类型是建模在形式字符串的想法上的数据类型（Data type）</data>
</edge>
<edge source="字符串" target="编程语言">
  <data key="d2">is_a</data>
  <data key="d3">字符串是几乎在所有编程语言中都可以实现的非常重要和有用的数据类型</data>
</edge>
<edge source="字符串" target="极大值">
  <data key="d2">is_a</data>
  <data key="d3">一般的说，有两种类型的字符串数据类型：定长字符串，它有固定的极大长度并且不管是否达到了这个极大值都使用同样数量的内存；和变长字符串，它的长度不是专断固定的并且依赖于实际的大小使用可变数量的内存</data>
</edge>
<edge source="字符串" target="数量">
  <data key="d2">uses</data>
  <data key="d3">一般的说，有两种类型的字符串数据类型：定长字符串，它有固定的极大长度并且不管是否达到了这个极大值都使用同样数量的内存；和变长字符串，它的长度不是专断固定的并且依赖于实际的大小使用可变数量的内存</data>
</edge>
<edge source="字符串" target="内存">
  <data key="d2">uses</data>
  <data key="d3">一般的说，有两种类型的字符串数据类型：定长字符串，它有固定的极大长度并且不管是否达到了这个极大值都使用同样数量的内存；和变长字符串，它的长度不是专断固定的并且依赖于实际的大小使用可变数量的内存</data>
</edge>
<edge source="字符串" target="设计">
  <data key="d2">depends_on</data>
  <data key="d3">现存代码在用到它们会导致一些字符串匹配和切断上的问题，严重程度依赖于字符编码是如何设计的</data>
</edge>
<edge source="字符串" target="位面">
  <data key="d2">is_a</data>
  <data key="d3">多数语言有Unicode字符串数据类型（通常是UTF16，因为它在Unicode补充位面介入之前就被增加了）</data>
</edge>
<edge source="字符串" target="问题">
  <data key="d2">is_a</data>
  <data key="d3">在Unicode和本地编码之间转换要求理解本地编码，这对于现存系统要一起传输各种编码的字符串而又没有实际标记出它们用了什么编码就是个问题</data>
</edge>
<edge source="字符串" target="规则">
  <data key="d2">used_for</data>
  <data key="d3">某些语言如C把字符串实现为可以用于任何基本类型的模版，但这是个例外而不是规则</data>
</edge>
<edge source="字符串" target="基本">
  <data key="d2">implements</data>
  <data key="d3">某些语言如C把字符串实现为可以用于任何基本类型的模版，但这是个例外而不是规则</data>
</edge>
<edge source="字符串" target="类型">
  <data key="d2">implements</data>
  <data key="d3">字符串是几乎在所有编程语言中都可以实现的非常重要和有用的数据类型</data>
</edge>
<edge source="字符串" target="算法">
  <data key="d2">used_for</data>
  <data key="d3">这是一些例子： 很多UNIX实用程序进行简单的字符串处理，并能用于简单地编写一些强大的字符串处理算法</data>
</edge>
<edge source="字符串" target="定义">
  <data key="d2">defined_as</data>
  <data key="d3">对于Σ中的两个字符串s和t，它们的串接被定义为在s中的字符序列之后跟随着t中的字符序列，并被指示为st</data>
</edge>
<edge source="字符串" target="实际">
  <data key="d2">depends_on</data>
  <data key="d3">一般的说，有两种类型的字符串数据类型：定长字符串，它有固定的极大长度并且不管是否达到了这个极大值都使用同样数量的内存；和变长字符串，它的长度不是专断固定的并且依赖于实际的大小使用可变数量的内存</data>
</edge>
<edge source="字符串" target="编码">
  <data key="d2">depends_on</data>
  <data key="d3">现存代码在用到它们会导致一些字符串匹配和切断上的问题，严重程度依赖于字符编码是如何设计的</data>
</edge>
<edge source="字符串" target="数据类型">
  <data key="d2">implements</data>
  <data key="d3">字符串是几乎在所有编程语言中都可以实现的非常重要和有用的数据类型</data>
</edge>
<edge source="检索" target="语义">
  <data key="d2">implements</data>
  <data key="d3">知识图谱可以实现Web从网页链接向概念链接转变，支持用户按主题而不是字符串检索，真正实现语义检索</data>
</edge>
<edge source="搜索引擎" target="列表">
  <data key="d2">is_a</data>
  <data key="d3">Google的约翰娜怀特解释说，搜索引擎使用知识图谱的数据产生的结果：知识图谱知道，圣克鲁斯是一个地方，且此列表与圣克鲁斯有关</data>
</edge>
<edge source="搜索引擎" target="地方">
  <data key="d2">produces</data>
  <data key="d3">Google的约翰娜怀特解释说，搜索引擎使用知识图谱的数据产生的结果：知识图谱知道，圣克鲁斯是一个地方，且此列表与圣克鲁斯有关</data>
</edge>
<edge source="搜索引擎" target="有关">
  <data key="d2">is_a</data>
  <data key="d3">Google的约翰娜怀特解释说，搜索引擎使用知识图谱的数据产生的结果：知识图谱知道，圣克鲁斯是一个地方，且此列表与圣克鲁斯有关</data>
</edge>
<edge source="搜索引擎" target="圣克鲁斯">
  <data key="d2">uses</data>
  <data key="d3">Google的约翰娜怀特解释说，搜索引擎使用知识图谱的数据产生的结果：知识图谱知道，圣克鲁斯是一个地方，且此列表与圣克鲁斯有关</data>
</edge>
<edge source="搜索引擎" target="结果">
  <data key="d2">uses</data>
  <data key="d3">Google的约翰娜怀特解释说，搜索引擎使用知识图谱的数据产生的结果：知识图谱知道，圣克鲁斯是一个地方，且此列表与圣克鲁斯有关</data>
</edge>
<edge source="搜索引擎" target="产生">
  <data key="d2">uses</data>
  <data key="d3">Google的约翰娜怀特解释说，搜索引擎使用知识图谱的数据产生的结果：知识图谱知道，圣克鲁斯是一个地方，且此列表与圣克鲁斯有关</data>
</edge>
<edge source="搜索引擎" target="知识图谱知道">
  <data key="d2">uses</data>
  <data key="d3">Google的约翰娜怀特解释说，搜索引擎使用知识图谱的数据产生的结果：知识图谱知道，圣克鲁斯是一个地方，且此列表与圣克鲁斯有关</data>
</edge>
<edge source="搜索引擎" target="图谱">
  <data key="d2">uses</data>
  <data key="d3">Google的约翰娜怀特解释说，搜索引擎使用知识图谱的数据产生的结果：知识图谱知道，圣克鲁斯是一个地方，且此列表与圣克鲁斯有关</data>
</edge>
<edge source="搜索引擎" target="数据">
  <data key="d2">uses</data>
  <data key="d3">Google的约翰娜怀特解释说，搜索引擎使用知识图谱的数据产生的结果：知识图谱知道，圣克鲁斯是一个地方，且此列表与圣克鲁斯有关</data>
</edge>
<edge source="搜索引擎" target="知识图谱">
  <data key="d2">uses</data>
  <data key="d3">Google的约翰娜怀特解释说，搜索引擎使用知识图谱的数据产生的结果：知识图谱知道，圣克鲁斯是一个地方，且此列表与圣克鲁斯有关</data>
</edge>
<edge source="方式" target="知识库">
  <data key="d2">is_a</data>
  <data key="d3">3 三元组是知识图谱的一种通用表示方式，即 G （E, R, S)，其中 E 是知识库中的实体，R 是知识库中的关系，S 代表知识库中的三元组</data>
</edge>
<edge source="方式" target="关系">
  <data key="d2">is_a</data>
  <data key="d3">3 三元组是知识图谱的一种通用表示方式，即 G （E, R, S)，其中 E 是知识库中的实体，R 是知识库中的关系，S 代表知识库中的三元组</data>
</edge>
<edge source="方式" target="实体">
  <data key="d2">is_a</data>
  <data key="d3">3 三元组是知识图谱的一种通用表示方式，即 G （E, R, S)，其中 E 是知识库中的实体，R 是知识库中的关系，S 代表知识库中的三元组</data>
</edge>
<edge source="方式" target="属性">
  <data key="d2">is_a</data>
  <data key="d3">数据层是以事实（fact）为存储单位的图数据库，其事实的基础表达方式就是实体关系实体或者实体属性属性值</data>
</edge>
<edge source="方式" target="信息">
  <data key="d2">used_for</data>
  <data key="d3">2011年，Fader采用人工标注方式对1000个句子中的实体关系三元组进行标注，并作为训练集得到逻辑斯蒂回归模型，用于对REVERB系统的信息抽取结果计算置信度</data>
</edge>
<edge source="方式" target="结果">
  <data key="d2">used_for</data>
  <data key="d3">2011年，Fader采用人工标注方式对1000个句子中的实体关系三元组进行标注，并作为训练集得到逻辑斯蒂回归模型，用于对REVERB系统的信息抽取结果计算置信度</data>
</edge>
<edge source="方式" target="系统">
  <data key="d2">used_for</data>
  <data key="d3">2011年，Fader采用人工标注方式对1000个句子中的实体关系三元组进行标注，并作为训练集得到逻辑斯蒂回归模型，用于对REVERB系统的信息抽取结果计算置信度</data>
</edge>
<edge source="方式" target="置信度">
  <data key="d2">used_for</data>
  <data key="d3">2011年，Fader采用人工标注方式对1000个句子中的实体关系三元组进行标注，并作为训练集得到逻辑斯蒂回归模型，用于对REVERB系统的信息抽取结果计算置信度</data>
</edge>
<edge source="方式" target="顺序存储">
  <data key="d2">is_a</data>
  <data key="d3">串的两种最基本的存储方式是顺序存储方式和链接存储方式</data>
</edge>
<edge source="方式" target="链接">
  <data key="d2">is_a</data>
  <data key="d3">串的两种最基本的存储方式是顺序存储方式和链接存储方式</data>
</edge>
<edge source="方式" target="结构">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="方式" target="计算机领域">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="方式" target="结构化">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="方式" target="数据">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="方式" target="形式">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="大量" target="道路">
  <data key="d2">uses</data>
  <data key="d3">1860年之1930年间，若当库拉托夫斯基和惠特尼从之前独立于图论发展的拓扑学中吸取大量内容进入图论，而现代代数方法的使用更让图论与拓扑走上共同发展的道路</data>
</edge>
<edge source="结构" target="符号">
  <data key="d2">used_for</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="结构" target="形式">
  <data key="d2">used_for</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="结构" target="物理">
  <data key="d2">used_for</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="结构" target="世界">
  <data key="d2">used_for</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="结构" target="概念">
  <data key="d2">is_a</data>
  <data key="d3">计算机系统结构，或者数字计算机组织，是一个计算机系统的概念设计和根本运作结构</data>
</edge>
<edge source="结构" target="关系">
  <data key="d2">used_for</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="结构" target="问题">
  <data key="d2">is_a</data>
  <data key="d3">由于有机化学中有许多树状结构的分子，这些研究对于理论化学有着重要意义，尤其是其中关于具有某一特定性质的图的计数问题</data>
</edge>
<edge source="结构" target="性质">
  <data key="d2">is_a</data>
  <data key="d3">由于有机化学中有许多树状结构的分子，这些研究对于理论化学有着重要意义，尤其是其中关于具有某一特定性质的图的计数问题</data>
</edge>
<edge source="结构" target="计数问题">
  <data key="d2">is_a</data>
  <data key="d3">由于有机化学中有许多树状结构的分子，这些研究对于理论化学有着重要意义，尤其是其中关于具有某一特定性质的图的计数问题</data>
</edge>
<edge source="结构" target="计数">
  <data key="d2">is_a</data>
  <data key="d3">由于有机化学中有许多树状结构的分子，这些研究对于理论化学有着重要意义，尤其是其中关于具有某一特定性质的图的计数问题</data>
</edge>
<edge source="结构" target="节点">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="结构" target="代表">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="结构" target="作者">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="结构" target="学术">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="结构" target="机构">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="结构" target="文献">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="结构" target="关键词">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="结构" target="设计">
  <data key="d2">is_a</data>
  <data key="d3">计算机系统结构，或者数字计算机组织，是一个计算机系统的概念设计和根本运作结构</data>
</edge>
<edge source="结构" target="概念设计">
  <data key="d2">is_a</data>
  <data key="d3">计算机系统结构，或者数字计算机组织，是一个计算机系统的概念设计和根本运作结构</data>
</edge>
<edge source="结构" target="运作">
  <data key="d2">is_a</data>
  <data key="d3">计算机系统结构，或者数字计算机组织，是一个计算机系统的概念设计和根本运作结构</data>
</edge>
<edge source="联系" target="数学">
  <data key="d2">is_a</data>
  <data key="d3">凯莱将他关于树的研究成果与当时有关化合物的研究联系起来，而图论中有一部分术语正是来源于这种将数学与化学相联系的做法</data>
</edge>
<edge source="联系" target="化学">
  <data key="d2">is_a</data>
  <data key="d3">凯莱将他关于树的研究成果与当时有关化合物的研究联系起来，而图论中有一部分术语正是来源于这种将数学与化学相联系的做法</data>
</edge>
<edge source="联系" target="结构">
  <data key="d2">used_for</data>
  <data key="d3">科学知识图谱也称为知识域可视化（Mapping Knowledge Domains），是用于绘制分析和显示学科或学术研究主体之间的相互联系，用于揭示显示科学知识发展进程与结构关系的可视化工具1</data>
</edge>
<edge source="联系" target="计算机领域">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="联系" target="结构化">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="联系" target="数据">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="联系" target="形式">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="联系" target="发展">
  <data key="d2">used_for</data>
  <data key="d3">科学知识图谱也称为知识域可视化（Mapping Knowledge Domains），是用于绘制分析和显示学科或学术研究主体之间的相互联系，用于揭示显示科学知识发展进程与结构关系的可视化工具1</data>
</edge>
<edge source="联系" target="进程">
  <data key="d2">used_for</data>
  <data key="d3">科学知识图谱也称为知识域可视化（Mapping Knowledge Domains），是用于绘制分析和显示学科或学术研究主体之间的相互联系，用于揭示显示科学知识发展进程与结构关系的可视化工具1</data>
</edge>
<edge source="联系" target="关系">
  <data key="d2">used_for</data>
  <data key="d3">科学知识图谱也称为知识域可视化（Mapping Knowledge Domains），是用于绘制分析和显示学科或学术研究主体之间的相互联系，用于揭示显示科学知识发展进程与结构关系的可视化工具1</data>
</edge>
<edge source="大学" target="教授">
  <data key="d2">is_a</data>
  <data key="d3">第一个使用这个术语的科学机构是哥本哈根大学计算科学系（英语：UCPH Department of Computer Science），该学院成立于1969年，彼得諾爾便是第一任教授</data>
</edge>
<edge source="定义" target="知识库">
  <data key="d2">used_for</data>
  <data key="d3">知识图谱的概念最早由谷歌2012年5月17日提出，其将知识图谱定义为用于增强搜索引擎功能的辅助知识库</data>
</edge>
<edge source="定义" target="搜索引擎">
  <data key="d2">used_for</data>
  <data key="d3">知识图谱的概念最早由谷歌2012年5月17日提出，其将知识图谱定义为用于增强搜索引擎功能的辅助知识库</data>
</edge>
<edge source="定义" target="功能">
  <data key="d2">used_for</data>
  <data key="d3">知识图谱的概念最早由谷歌2012年5月17日提出，其将知识图谱定义为用于增强搜索引擎功能的辅助知识库</data>
</edge>
<edge source="定义" target="辅助">
  <data key="d2">used_for</data>
  <data key="d3">知识图谱的概念最早由谷歌2012年5月17日提出，其将知识图谱定义为用于增强搜索引擎功能的辅助知识库</data>
</edge>
<edge source="定义" target="空串">
  <data key="d2">is_a</data>
  <data key="d3">是其子串关系定义了在Σ上的偏序，其最小元是空串</data>
</edge>
<edge source="辅助" target="数据">
  <data key="d2">based_on</data>
  <data key="d3">早期实体抽取的准召率不够理想，但在2004年，Lin等采用字典辅助下的最大熵算法，基于Medline论文摘要的GENIA数据集使得实体抽取的准召率均超过70</data>
</edge>
<edge source="辅助" target="论文">
  <data key="d2">based_on</data>
  <data key="d3">早期实体抽取的准召率不够理想，但在2004年，Lin等采用字典辅助下的最大熵算法，基于Medline论文摘要的GENIA数据集使得实体抽取的准召率均超过70</data>
</edge>
<edge source="网络" target="方法">
  <data key="d2">is_a</data>
  <data key="d3">更早之前，语义链网络（Semantic Link Network）已经开始了系统性的研究，目标是创立一个自组织的语义互联方法来表达知识支持智能应用, 系统性的理论和方法作为专著发表于2004年</data>
</edge>
<edge source="网络" target="570亿">
  <data key="d2">contains</data>
  <data key="d3">)update，其语义网络包含超过570亿个对象，超过18亿个介绍，这些不同的对象之间有链接关系，用来理解搜索关键词的含义</data>
</edge>
<edge source="网络" target="18亿">
  <data key="d2">contains</data>
  <data key="d3">)update，其语义网络包含超过570亿个对象，超过18亿个介绍，这些不同的对象之间有链接关系，用来理解搜索关键词的含义</data>
</edge>
<edge source="网络" target="对象">
  <data key="d2">contains</data>
  <data key="d3">)update，其语义网络包含超过570亿个对象，超过18亿个介绍，这些不同的对象之间有链接关系，用来理解搜索关键词的含义</data>
</edge>
<edge source="网络" target="智能">
  <data key="d2">supports</data>
  <data key="d3">更早之前，语义链网络（Semantic Link Network）已经开始了系统性的研究，目标是创立一个自组织的语义互联方法来表达知识支持智能应用, 系统性的理论和方法作为专著发表于2004年</data>
</edge>
<edge source="网络" target="理论">
  <data key="d2">supports</data>
  <data key="d3">更早之前，语义链网络（Semantic Link Network）已经开始了系统性的研究，目标是创立一个自组织的语义互联方法来表达知识支持智能应用, 系统性的理论和方法作为专著发表于2004年</data>
</edge>
<edge source="网络" target="专著">
  <data key="d2">supports</data>
  <data key="d3">更早之前，语义链网络（Semantic Link Network）已经开始了系统性的研究，目标是创立一个自组织的语义互联方法来表达知识支持智能应用, 系统性的理论和方法作为专著发表于2004年</data>
</edge>
<edge source="网络" target="15">
  <data key="d2">supports</data>
  <data key="d3">13 近年来，语义链网络已经发展为支持信息物理社会智能14 15，已经有了许多应用16</data>
</edge>
<edge source="网络" target="信息">
  <data key="d2">supports</data>
  <data key="d3">13 近年来，语义链网络已经发展为支持信息物理社会智能14 15，已经有了许多应用16</data>
</edge>
<edge source="网络" target="物理">
  <data key="d2">supports</data>
  <data key="d3">13 近年来，语义链网络已经发展为支持信息物理社会智能14 15，已经有了许多应用16</data>
</edge>
<edge source="网络" target="社会">
  <data key="d2">supports</data>
  <data key="d3">13 近年来，语义链网络已经发展为支持信息物理社会智能14 15，已经有了许多应用16</data>
</edge>
<edge source="网络" target="计算机科学">
  <data key="d2">is_a</data>
  <data key="d3">计算机网络是管理遍及全球的计算机连接成的网络的计算机科学分支</data>
</edge>
<edge source="网络" target="科学">
  <data key="d2">is_a</data>
  <data key="d3">计算机网络是管理遍及全球的计算机连接成的网络的计算机科学分支</data>
</edge>
<edge source="网络" target="管理">
  <data key="d2">is_a</data>
  <data key="d3">计算机网络是管理遍及全球的计算机连接成的网络的计算机科学分支</data>
</edge>
<edge source="网络" target="全球">
  <data key="d2">is_a</data>
  <data key="d3">计算机网络是管理遍及全球的计算机连接成的网络的计算机科学分支</data>
</edge>
<edge source="网络" target="连接成">
  <data key="d2">is_a</data>
  <data key="d3">计算机网络是管理遍及全球的计算机连接成的网络的计算机科学分支</data>
</edge>
<edge source="技术" target="加工">
  <data key="d2">is_a</data>
  <data key="d3">本体构建中的聚类问题质量评估的标准和指标的建立和知识推理的技术思维限制，都是知识加工的重要难点</data>
</edge>
<edge source="技术" target="热点">
  <data key="d2">is_a</data>
  <data key="d3">图书馆学侧重于图书馆业务流程和相关学科的研究，包括图书馆哲学图书馆学理论图书馆管理和图书馆业务技术等；情报学侧重于情报的分析和利用，包括情报学理论情报采集情报分析情报检索以及二次三次文献编辑利用，目前情报技术也是研究热点之一</data>
</edge>
<edge source="技术" target="情报检索">
  <data key="d2">includes</data>
  <data key="d3">图书馆学侧重于图书馆业务流程和相关学科的研究，包括图书馆哲学图书馆学理论图书馆管理和图书馆业务技术等；情报学侧重于情报的分析和利用，包括情报学理论情报采集情报分析情报检索以及二次三次文献编辑利用，目前情报技术也是研究热点之一</data>
</edge>
<edge source="技术" target="阿密特">
  <data key="d2">contains</data>
  <data key="d3">对话搜索（英語：Conversational search）技术包含阿密特推出的一种热关键词的搜索技术，不需要一个接口，即用户只需将Google搜索引擎说OK Google</data>
</edge>
<edge source="技术" target="关键词">
  <data key="d2">contains</data>
  <data key="d3">对话搜索（英語：Conversational search）技术包含阿密特推出的一种热关键词的搜索技术，不需要一个接口，即用户只需将Google搜索引擎说OK Google</data>
</edge>
<edge source="技术" target="经验">
  <data key="d2">uses</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="技术" target="有关">
  <data key="d2">uses</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="技术" target="玩游戏">
  <data key="d2">uses</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="技术" target="游戏">
  <data key="d2">uses</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="技术" target="文字">
  <data key="d2">uses</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="技术" target="计算机">
  <data key="d2">is_a</data>
  <data key="d3">多媒体技术是指通过计算机对文字数据图形图像动画声音等多种媒体信息进行综合处理和管理，使用户可以通过多种感官与计算机进行实时信息交互的技术，又称为计算机多媒体技术</data>
</edge>
<edge source="技术" target="数据">
  <data key="d2">is_a</data>
  <data key="d3">多媒体技术是指通过计算机对文字数据图形图像动画声音等多种媒体信息进行综合处理和管理，使用户可以通过多种感官与计算机进行实时信息交互的技术，又称为计算机多媒体技术</data>
</edge>
<edge source="技术" target="图像">
  <data key="d2">is_a</data>
  <data key="d3">多媒体技术是指通过计算机对文字数据图形图像动画声音等多种媒体信息进行综合处理和管理，使用户可以通过多种感官与计算机进行实时信息交互的技术，又称为计算机多媒体技术</data>
</edge>
<edge source="技术" target="图形图像">
  <data key="d2">is_a</data>
  <data key="d3">多媒体技术是指通过计算机对文字数据图形图像动画声音等多种媒体信息进行综合处理和管理，使用户可以通过多种感官与计算机进行实时信息交互的技术，又称为计算机多媒体技术</data>
</edge>
<edge source="技术" target="动画">
  <data key="d2">is_a</data>
  <data key="d3">多媒体技术是指通过计算机对文字数据图形图像动画声音等多种媒体信息进行综合处理和管理，使用户可以通过多种感官与计算机进行实时信息交互的技术，又称为计算机多媒体技术</data>
</edge>
<edge source="技术" target="声音">
  <data key="d2">is_a</data>
  <data key="d3">多媒体技术是指通过计算机对文字数据图形图像动画声音等多种媒体信息进行综合处理和管理，使用户可以通过多种感官与计算机进行实时信息交互的技术，又称为计算机多媒体技术</data>
</edge>
<edge source="技术" target="专业">
  <data key="d2">is_a</data>
  <data key="d3">在中国，计算机科学或计算机科学与技术是工科（一级门类）下的二级专业</data>
</edge>
<edge source="技术" target="工科">
  <data key="d2">is_a</data>
  <data key="d3">在中国，计算机科学或计算机科学与技术是工科（一级门类）下的二级专业</data>
</edge>
<edge source="技术" target="门类">
  <data key="d2">is_a</data>
  <data key="d3">在中国，计算机科学或计算机科学与技术是工科（一级门类）下的二级专业</data>
</edge>
<edge source="技术" target="一级门类">
  <data key="d2">is_a</data>
  <data key="d3">在中国，计算机科学或计算机科学与技术是工科（一级门类）下的二级专业</data>
</edge>
<edge source="技术" target="信息">
  <data key="d2">includes</data>
  <data key="d3">计算机安全是计算机技术的一个分支，其目标包括保护信息免受未经授权的访问中断和修改，同时为系统的预期用户保持系统的可访问性和可用性</data>
</edge>
<edge source="技术" target="中断">
  <data key="d2">includes</data>
  <data key="d3">计算机安全是计算机技术的一个分支，其目标包括保护信息免受未经授权的访问中断和修改，同时为系统的预期用户保持系统的可访问性和可用性</data>
</edge>
<edge source="技术" target="系统">
  <data key="d2">used_for</data>
  <data key="d3">形式化方法是一种特别的基于数学的技术，用于软件和硬件系统的形式规范开发以及驗證</data>
</edge>
<edge source="技术" target="软件">
  <data key="d2">used_for</data>
  <data key="d3">形式化方法是一种特别的基于数学的技术，用于软件和硬件系统的形式规范开发以及驗證</data>
</edge>
<edge source="技术" target="硬件">
  <data key="d2">used_for</data>
  <data key="d3">形式化方法是一种特别的基于数学的技术，用于软件和硬件系统的形式规范开发以及驗證</data>
</edge>
<edge source="技术" target="规范">
  <data key="d2">used_for</data>
  <data key="d3">形式化方法是一种特别的基于数学的技术，用于软件和硬件系统的形式规范开发以及驗證</data>
</edge>
<edge source="技术" target="用户">
  <data key="d2">uses</data>
  <data key="d3">多媒体技术是指通过计算机对文字数据图形图像动画声音等多种媒体信息进行综合处理和管理，使用户可以通过多种感官与计算机进行实时信息交互的技术，又称为计算机多媒体技术</data>
</edge>
<edge source="技术" target="感官">
  <data key="d2">uses</data>
  <data key="d3">多媒体技术是指通过计算机对文字数据图形图像动画声音等多种媒体信息进行综合处理和管理，使用户可以通过多种感官与计算机进行实时信息交互的技术，又称为计算机多媒体技术</data>
</edge>
<edge source="研究" target="问题">
  <data key="d2">produces</data>
  <data key="d3">文献学侧重于研究文献的产生流传鉴别和利用问题</data>
</edge>
<edge source="研究" target="性质">
  <data key="d2">is_a</data>
  <data key="d3">由于有机化学中有许多树状结构的分子，这些研究对于理论化学有着重要意义，尤其是其中关于具有某一特定性质的图的计数问题</data>
</edge>
<edge source="研究" target="计数问题">
  <data key="d2">is_a</data>
  <data key="d3">由于有机化学中有许多树状结构的分子，这些研究对于理论化学有着重要意义，尤其是其中关于具有某一特定性质的图的计数问题</data>
</edge>
<edge source="研究" target="计数">
  <data key="d2">is_a</data>
  <data key="d3">由于有机化学中有许多树状结构的分子，这些研究对于理论化学有着重要意义，尤其是其中关于具有某一特定性质的图的计数问题</data>
</edge>
<edge source="研究" target="数学">
  <data key="d2">is_a</data>
  <data key="d3">凯莱将他关于树的研究成果与当时有关化合物的研究联系起来，而图论中有一部分术语正是来源于这种将数学与化学相联系的做法</data>
</edge>
<edge source="研究" target="化学">
  <data key="d2">is_a</data>
  <data key="d3">凯莱将他关于树的研究成果与当时有关化合物的研究联系起来，而图论中有一部分术语正是来源于这种将数学与化学相联系的做法</data>
</edge>
<edge source="研究" target="成果">
  <data key="d2">produces</data>
  <data key="d3">四色问题可谓是图论研究史上最著名也是产生成果最多的问题之一：是否任何一幅画在平面上的地图都可以用四种颜色染色，使得任意两个相邻的区域不同色</data>
</edge>
<edge source="研究" target="产生">
  <data key="d2">produces</data>
  <data key="d3">四色问题可谓是图论研究史上最著名也是产生成果最多的问题之一：是否任何一幅画在平面上的地图都可以用四种颜色染色，使得任意两个相邻的区域不同色</data>
</edge>
<edge source="研究" target="平面">
  <data key="d2">produces</data>
  <data key="d3">四色问题可谓是图论研究史上最著名也是产生成果最多的问题之一：是否任何一幅画在平面上的地图都可以用四种颜色染色，使得任意两个相邻的区域不同色</data>
</edge>
<edge source="研究" target="是否任何一幅画在平面上的地图都可以用四种颜色染色">
  <data key="d2">produces</data>
  <data key="d3">四色问题可谓是图论研究史上最著名也是产生成果最多的问题之一：是否任何一幅画在平面上的地图都可以用四种颜色染色，使得任意两个相邻的区域不同色</data>
</edge>
<edge source="研究" target="分支">
  <data key="d2">produces</data>
  <data key="d3">图论中概率方法的引入，尤其是埃尔德什和Alfréd Rényi（英语：Alfréd Rényi）关于随机图连通的渐进概率的研究使得图论产生了新的分支随机图论</data>
</edge>
<edge source="研究" target="热点">
  <data key="d2">is_a</data>
  <data key="d3">图书馆学侧重于图书馆业务流程和相关学科的研究，包括图书馆哲学图书馆学理论图书馆管理和图书馆业务技术等；情报学侧重于情报的分析和利用，包括情报学理论情报采集情报分析情报检索以及二次三次文献编辑利用，目前情报技术也是研究热点之一</data>
</edge>
<edge source="研究" target="哲学">
  <data key="d2">includes</data>
  <data key="d3">图书馆学侧重于图书馆业务流程和相关学科的研究，包括图书馆哲学图书馆学理论图书馆管理和图书馆业务技术等；情报学侧重于情报的分析和利用，包括情报学理论情报采集情报分析情报检索以及二次三次文献编辑利用，目前情报技术也是研究热点之一</data>
</edge>
<edge source="研究" target="理论">
  <data key="d2">supports</data>
  <data key="d3">更早之前，语义链网络（Semantic Link Network）已经开始了系统性的研究，目标是创立一个自组织的语义互联方法来表达知识支持智能应用, 系统性的理论和方法作为专著发表于2004年</data>
</edge>
<edge source="研究" target="管理">
  <data key="d2">includes</data>
  <data key="d3">图书馆学侧重于图书馆业务流程和相关学科的研究，包括图书馆哲学图书馆学理论图书馆管理和图书馆业务技术等；情报学侧重于情报的分析和利用，包括情报学理论情报采集情报分析情报检索以及二次三次文献编辑利用，目前情报技术也是研究热点之一</data>
</edge>
<edge source="研究" target="利用">
  <data key="d2">produces</data>
  <data key="d3">文献学侧重于研究文献的产生流传鉴别和利用问题</data>
</edge>
<edge source="研究" target="流传">
  <data key="d2">produces</data>
  <data key="d3">文献学侧重于研究文献的产生流传鉴别和利用问题</data>
</edge>
<edge source="研究" target="传播">
  <data key="d2">implements</data>
  <data key="d3">图书馆訊息学就是研究訊息的组织整理，以及通过图书馆等平台实现訊息传递与传播，从而保障訊息有效查询与获取的学问</data>
</edge>
<edge source="研究" target="查询">
  <data key="d2">implements</data>
  <data key="d3">图书馆訊息学就是研究訊息的组织整理，以及通过图书馆等平台实现訊息传递与传播，从而保障訊息有效查询与获取的学问</data>
</edge>
<edge source="研究" target="方法">
  <data key="d2">is_a</data>
  <data key="d3">更早之前，语义链网络（Semantic Link Network）已经开始了系统性的研究，目标是创立一个自组织的语义互联方法来表达知识支持智能应用, 系统性的理论和方法作为专著发表于2004年</data>
</edge>
<edge source="研究" target="智能">
  <data key="d2">used_for</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="研究" target="专著">
  <data key="d2">supports</data>
  <data key="d3">更早之前，语义链网络（Semantic Link Network）已经开始了系统性的研究，目标是创立一个自组织的语义互联方法来表达知识支持智能应用, 系统性的理论和方法作为专著发表于2004年</data>
</edge>
<edge source="研究" target="计算机系统">
  <data key="d2">is_a</data>
  <data key="d3">例如，研究计算机硬件被看作是计算机工程的一部分，而对于商业计算机系统的研究和部署被称为信息技术或者信息系统</data>
</edge>
<edge source="研究" target="系统">
  <data key="d2">implements</data>
  <data key="d3">Eden提议了三种范式应用于计算机科学的各个领域：31 作为一个学科，计算机科学涵盖了从算法的理论研究和计算的极限，到如何通过硬件和软件实现计算系统</data>
</edge>
<edge source="研究" target="工程">
  <data key="d2">is_a</data>
  <data key="d3">例如，研究计算机硬件被看作是计算机工程的一部分，而对于商业计算机系统的研究和部署被称为信息技术或者信息系统</data>
</edge>
<edge source="研究" target="商业">
  <data key="d2">is_a</data>
  <data key="d3">例如，研究计算机硬件被看作是计算机工程的一部分，而对于商业计算机系统的研究和部署被称为信息技术或者信息系统</data>
</edge>
<edge source="研究" target="部分">
  <data key="d2">is_a</data>
  <data key="d3">例如，研究计算机硬件被看作是计算机工程的一部分，而对于商业计算机系统的研究和部署被称为信息技术或者信息系统</data>
</edge>
<edge source="研究" target="50年">
  <data key="d2">is_a</data>
  <data key="d3">虽然最初很多人并不相信计算机可能成为科学研究的领域，但是随后的50年里也逐渐被学术界认可</data>
</edge>
<edge source="研究" target="学术">
  <data key="d2">is_a</data>
  <data key="d3">虽然最初很多人并不相信计算机可能成为科学研究的领域，但是随后的50年里也逐渐被学术界认可</data>
</edge>
<edge source="研究" target="学术界">
  <data key="d2">is_a</data>
  <data key="d3">虽然最初很多人并不相信计算机可能成为科学研究的领域，但是随后的50年里也逐渐被学术界认可</data>
</edge>
<edge source="研究" target="基础">
  <data key="d2">is_a</data>
  <data key="d3">35算法是计算机科学研究的一个重要领域，也是许多其他计算机科学技术的基础</data>
</edge>
<edge source="研究" target="科学技术">
  <data key="d2">is_a</data>
  <data key="d3">35算法是计算机科学研究的一个重要领域，也是许多其他计算机科学技术的基础</data>
</edge>
<edge source="研究" target="技术">
  <data key="d2">implements</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="研究" target="專注于">
  <data key="d2">is_a</data>
  <data key="d3">12计算理论的研究就是專注于回答这个根本问题，关于什么能够被计算，去实施这些计算又需要用到多少资源</data>
</edge>
<edge source="研究" target="科学">
  <data key="d2">is_a</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="研究" target="物理">
  <data key="d2">is_a</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="研究" target="设计">
  <data key="d2">is_a</data>
  <data key="d3">David Parnas从其它工程和科学学科之间的关系得到启示，宣称计算机科学的主要重点总的来说是研究计算的性质，而软件工程的主要重点是具体的计算设计，以达到实用的目的，这样便构成了两个独立但又互补的学科</data>
</edge>
<edge source="研究" target="目的">
  <data key="d2">is_a</data>
  <data key="d3">David Parnas从其它工程和科学学科之间的关系得到启示，宣称计算机科学的主要重点总的来说是研究计算的性质，而软件工程的主要重点是具体的计算设计，以达到实用的目的，这样便构成了两个独立但又互补的学科</data>
</edge>
<edge source="研究" target="英语">
  <data key="d2">affects</data>
  <data key="d3">12 早期计算机科学受数学研究成果的影响很大，如库尔特哥德尔艾伦图灵路莎彼得（英语：Rózsa Péter），阿隆佐邱奇等数学家的研究，这两个领域在某些学科，例如数理逻辑范畴论域理论和代数，也不断有有益的思想交流</data>
</edge>
<edge source="研究" target="艾伦">
  <data key="d2">affects</data>
  <data key="d3">12 早期计算机科学受数学研究成果的影响很大，如库尔特哥德尔艾伦图灵路莎彼得（英语：Rózsa Péter），阿隆佐邱奇等数学家的研究，这两个领域在某些学科，例如数理逻辑范畴论域理论和代数，也不断有有益的思想交流</data>
</edge>
<edge source="研究" target="影响">
  <data key="d2">affects</data>
  <data key="d3">12 早期计算机科学受数学研究成果的影响很大，如库尔特哥德尔艾伦图灵路莎彼得（英语：Rózsa Péter），阿隆佐邱奇等数学家的研究，这两个领域在某些学科，例如数理逻辑范畴论域理论和代数，也不断有有益的思想交流</data>
</edge>
<edge source="研究" target="哥德尔">
  <data key="d2">affects</data>
  <data key="d3">12 早期计算机科学受数学研究成果的影响很大，如库尔特哥德尔艾伦图灵路莎彼得（英语：Rózsa Péter），阿隆佐邱奇等数学家的研究，这两个领域在某些学科，例如数理逻辑范畴论域理论和代数，也不断有有益的思想交流</data>
</edge>
<edge source="研究" target="图灵">
  <data key="d2">affects</data>
  <data key="d3">12 早期计算机科学受数学研究成果的影响很大，如库尔特哥德尔艾伦图灵路莎彼得（英语：Rózsa Péter），阿隆佐邱奇等数学家的研究，这两个领域在某些学科，例如数理逻辑范畴论域理论和代数，也不断有有益的思想交流</data>
</edge>
<edge source="研究" target="英语：Rózsa Péter">
  <data key="d2">affects</data>
  <data key="d3">12 早期计算机科学受数学研究成果的影响很大，如库尔特哥德尔艾伦图灵路莎彼得（英语：Rózsa Péter），阿隆佐邱奇等数学家的研究，这两个领域在某些学科，例如数理逻辑范畴论域理论和代数，也不断有有益的思想交流</data>
</edge>
<edge source="研究" target="实用技术">
  <data key="d2">implements</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="研究" target="学科">
  <data key="d2">implements</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="领域" target="问题">
  <data key="d2">is_a</data>
  <data key="d3">知识库中的知识源于领域专家，它是求解问题所需领域知识的集合，包括基本事实规则和其它有关信息</data>
</edge>
<edge source="领域" target="基本">
  <data key="d2">includes</data>
  <data key="d3">知识库中的知识源于领域专家，它是求解问题所需领域知识的集合，包括基本事实规则和其它有关信息</data>
</edge>
<edge source="领域" target="事实">
  <data key="d2">includes</data>
  <data key="d3">知识库中的知识源于领域专家，它是求解问题所需领域知识的集合，包括基本事实规则和其它有关信息</data>
</edge>
<edge source="领域" target="规则">
  <data key="d2">includes</data>
  <data key="d3">知识库中的知识源于领域专家，它是求解问题所需领域知识的集合，包括基本事实规则和其它有关信息</data>
</edge>
<edge source="领域" target="有关">
  <data key="d2">includes</data>
  <data key="d3">知识库中的知识源于领域专家，它是求解问题所需领域知识的集合，包括基本事实规则和其它有关信息</data>
</edge>
<edge source="领域" target="信息">
  <data key="d2">includes</data>
  <data key="d3">知识库中的知识源于领域专家，它是求解问题所需领域知识的集合，包括基本事实规则和其它有关信息</data>
</edge>
<edge source="领域" target="结构">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="领域" target="计算机领域">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="领域" target="结构化">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="领域" target="数据">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="领域" target="形式">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="领域" target="理论">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="领域" target="性质">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="领域" target="复杂性">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="领域" target="50年">
  <data key="d2">is_a</data>
  <data key="d3">虽然最初很多人并不相信计算机可能成为科学研究的领域，但是随后的50年里也逐渐被学术界认可</data>
</edge>
<edge source="领域" target="学术">
  <data key="d2">is_a</data>
  <data key="d3">虽然最初很多人并不相信计算机可能成为科学研究的领域，但是随后的50年里也逐渐被学术界认可</data>
</edge>
<edge source="领域" target="学术界">
  <data key="d2">is_a</data>
  <data key="d3">虽然最初很多人并不相信计算机可能成为科学研究的领域，但是随后的50年里也逐渐被学术界认可</data>
</edge>
<edge source="领域" target="基础">
  <data key="d2">is_a</data>
  <data key="d3">35算法是计算机科学研究的一个重要领域，也是许多其他计算机科学技术的基础</data>
</edge>
<edge source="领域" target="科学技术">
  <data key="d2">is_a</data>
  <data key="d3">35算法是计算机科学研究的一个重要领域，也是许多其他计算机科学技术的基础</data>
</edge>
<edge source="领域" target="技术">
  <data key="d2">is_a</data>
  <data key="d3">35算法是计算机科学研究的一个重要领域，也是许多其他计算机科学技术的基础</data>
</edge>
<edge source="领域" target="科学">
  <data key="d2">is_a</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="领域" target="物理">
  <data key="d2">is_a</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="领域" target="研究">
  <data key="d2">extends</data>
  <data key="d3">17计算机的概念变得更加清晰，它不仅仅用于数学运算，总的来说计算机科学的领域也扩展到了对于计算的研究</data>
</edge>
<edge source="领域" target="视觉">
  <data key="d2">includes</data>
  <data key="d3">它跟计算机科学的许多其它领域密切相关，包括计算机视觉图像处理计算几何与可视化，同时也被大量运用在特效和电子游戏</data>
</edge>
<edge source="领域" target="图像">
  <data key="d2">includes</data>
  <data key="d3">它跟计算机科学的许多其它领域密切相关，包括计算机视觉图像处理计算几何与可视化，同时也被大量运用在特效和电子游戏</data>
</edge>
<edge source="领域" target="图像处理">
  <data key="d2">includes</data>
  <data key="d3">它跟计算机科学的许多其它领域密切相关，包括计算机视觉图像处理计算几何与可视化，同时也被大量运用在特效和电子游戏</data>
</edge>
<edge source="领域" target="可视化">
  <data key="d2">includes</data>
  <data key="d3">它跟计算机科学的许多其它领域密切相关，包括计算机视觉图像处理计算几何与可视化，同时也被大量运用在特效和电子游戏</data>
</edge>
<edge source="领域" target="智能">
  <data key="d2">used_for</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="领域" target="程式">
  <data key="d2">implements</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="领域" target="語言">
  <data key="d2">implements</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="领域" target="理論">
  <data key="d2">implements</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="领域" target="方法">
  <data key="d2">implements</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="领域" target="系统">
  <data key="d2">implements</data>
  <data key="d3">Eden提议了三种范式应用于计算机科学的各个领域：31 作为一个学科，计算机科学涵盖了从算法的理论研究和计算的极限，到如何通过硬件和软件实现计算系统</data>
</edge>
<edge source="数据" target="单位">
  <data key="d2">is_a</data>
  <data key="d3">数据层是以事实（fact）为存储单位的图数据库，其事实的基础表达方式就是实体关系实体或者实体属性属性值</data>
</edge>
<edge source="数据" target="事实">
  <data key="d2">is_a</data>
  <data key="d3">数据层是以事实（fact）为存储单位的图数据库，其事实的基础表达方式就是实体关系实体或者实体属性属性值</data>
</edge>
<edge source="数据" target="数据库">
  <data key="d2">includes</data>
  <data key="d3">10知识合并指从第三方知识库产品或已有数据化数据中获取知识输入，包括合并外部知识库和合并关系数据库</data>
</edge>
<edge source="数据" target="fact">
  <data key="d2">is_a</data>
  <data key="d3">数据层是以事实（fact）为存储单位的图数据库，其事实的基础表达方式就是实体关系实体或者实体属性属性值</data>
</edge>
<edge source="数据" target="图数据库">
  <data key="d2">is_a</data>
  <data key="d3">数据层是以事实（fact）为存储单位的图数据库，其事实的基础表达方式就是实体关系实体或者实体属性属性值</data>
</edge>
<edge source="数据" target="方式">
  <data key="d2">is_a</data>
  <data key="d3">现阶段知识图谱大多为公开采集数据并自动抽取资源，经过人工审核后加入到知识库中，这种则是自底向上的构建方式</data>
</edge>
<edge source="数据" target="基础">
  <data key="d2">is_a</data>
  <data key="d3">6 实体抽取 实体抽取，也称为命名实体识别（named entity recognition，NER），指从源数据中自动识别命名实体，这一步是信息抽取中最基础和关键的部分，因为实体抽取的准确率和召回率对后续知识获取效率和质量影响很大</data>
</edge>
<edge source="数据" target="部分">
  <data key="d2">is_a</data>
  <data key="d3">6 实体抽取 实体抽取，也称为命名实体识别（named entity recognition，NER），指从源数据中自动识别命名实体，这一步是信息抽取中最基础和关键的部分，因为实体抽取的准确率和召回率对后续知识获取效率和质量影响很大</data>
</edge>
<edge source="数据" target="信息">
  <data key="d2">is_a</data>
  <data key="d3">6 实体抽取 实体抽取，也称为命名实体识别（named entity recognition，NER），指从源数据中自动识别命名实体，这一步是信息抽取中最基础和关键的部分，因为实体抽取的准确率和召回率对后续知识获取效率和质量影响很大</data>
</edge>
<edge source="数据" target="关键">
  <data key="d2">is_a</data>
  <data key="d3">6 实体抽取 实体抽取，也称为命名实体识别（named entity recognition，NER），指从源数据中自动识别命名实体，这一步是信息抽取中最基础和关键的部分，因为实体抽取的准确率和召回率对后续知识获取效率和质量影响很大</data>
</edge>
<edge source="数据" target="关系">
  <data key="d2">includes</data>
  <data key="d3">10知识合并指从第三方知识库产品或已有数据化数据中获取知识输入，包括合并外部知识库和合并关系数据库</data>
</edge>
<edge source="数据" target="关系数据库">
  <data key="d2">includes</data>
  <data key="d3">10知识合并指从第三方知识库产品或已有数据化数据中获取知识输入，包括合并外部知识库和合并关系数据库</data>
</edge>
<edge source="数据" target="关系数据">
  <data key="d2">includes</data>
  <data key="d3">10知识合并指从第三方知识库产品或已有数据化数据中获取知识输入，包括合并外部知识库和合并关系数据库</data>
</edge>
<edge source="数据" target="影响">
  <data key="d2">affects</data>
  <data key="d3">6 实体抽取 实体抽取，也称为命名实体识别（named entity recognition，NER），指从源数据中自动识别命名实体，这一步是信息抽取中最基础和关键的部分，因为实体抽取的准确率和召回率对后续知识获取效率和质量影响很大</data>
</edge>
<edge source="数据" target="列表">
  <data key="d2">is_a</data>
  <data key="d3">Google的约翰娜怀特解释说，搜索引擎使用知识图谱的数据产生的结果：知识图谱知道，圣克鲁斯是一个地方，且此列表与圣克鲁斯有关</data>
</edge>
<edge source="数据" target="地方">
  <data key="d2">produces</data>
  <data key="d3">Google的约翰娜怀特解释说，搜索引擎使用知识图谱的数据产生的结果：知识图谱知道，圣克鲁斯是一个地方，且此列表与圣克鲁斯有关</data>
</edge>
<edge source="数据" target="有关">
  <data key="d2">is_a</data>
  <data key="d3">Google的约翰娜怀特解释说，搜索引擎使用知识图谱的数据产生的结果：知识图谱知道，圣克鲁斯是一个地方，且此列表与圣克鲁斯有关</data>
</edge>
<edge source="数据" target="圣克鲁斯">
  <data key="d2">produces</data>
  <data key="d3">Google的约翰娜怀特解释说，搜索引擎使用知识图谱的数据产生的结果：知识图谱知道，圣克鲁斯是一个地方，且此列表与圣克鲁斯有关</data>
</edge>
<edge source="数据" target="结果">
  <data key="d2">produces</data>
  <data key="d3">Google的约翰娜怀特解释说，搜索引擎使用知识图谱的数据产生的结果：知识图谱知道，圣克鲁斯是一个地方，且此列表与圣克鲁斯有关</data>
</edge>
<edge source="数据" target="产生">
  <data key="d2">produces</data>
  <data key="d3">Google的约翰娜怀特解释说，搜索引擎使用知识图谱的数据产生的结果：知识图谱知道，圣克鲁斯是一个地方，且此列表与圣克鲁斯有关</data>
</edge>
<edge source="数据" target="知识图谱知道">
  <data key="d2">produces</data>
  <data key="d3">Google的约翰娜怀特解释说，搜索引擎使用知识图谱的数据产生的结果：知识图谱知道，圣克鲁斯是一个地方，且此列表与圣克鲁斯有关</data>
</edge>
<edge source="数据" target="检索">
  <data key="d2">is_a</data>
  <data key="d3">数据库是为了更容易地组织存储和检索大量数据</data>
</edge>
<edge source="数据" target="大量">
  <data key="d2">is_a</data>
  <data key="d3">数据库是为了更容易地组织存储和检索大量数据</data>
</edge>
<edge source="数据" target="系统">
  <data key="d2">composed_of</data>
  <data key="d3">数据库由数据库管理系统管理，通过数据模型和查询语言来存储创建维护和搜索数据</data>
</edge>
<edge source="数据" target="模型">
  <data key="d2">composed_of</data>
  <data key="d3">数据库由数据库管理系统管理，通过数据模型和查询语言来存储创建维护和搜索数据</data>
</edge>
<edge source="数据" target="管理">
  <data key="d2">composed_of</data>
  <data key="d3">数据库由数据库管理系统管理，通过数据模型和查询语言来存储创建维护和搜索数据</data>
</edge>
<edge source="数据" target="管理系统">
  <data key="d2">composed_of</data>
  <data key="d3">数据库由数据库管理系统管理，通过数据模型和查询语言来存储创建维护和搜索数据</data>
</edge>
<edge source="数据" target="数据模型">
  <data key="d2">composed_of</data>
  <data key="d3">数据库由数据库管理系统管理，通过数据模型和查询语言来存储创建维护和搜索数据</data>
</edge>
<edge source="数据" target="查询语言">
  <data key="d2">composed_of</data>
  <data key="d3">数据库由数据库管理系统管理，通过数据模型和查询语言来存储创建维护和搜索数据</data>
</edge>
<edge source="数据" target="查询">
  <data key="d2">composed_of</data>
  <data key="d3">数据库由数据库管理系统管理，通过数据模型和查询语言来存储创建维护和搜索数据</data>
</edge>
<edge source="数据" target="网络">
  <data key="d2">used_for</data>
  <data key="d3">编码（code）被用于数据压缩，密码学，前向纠错，近期也被用于网络编码</data>
</edge>
<edge source="数据" target="用户">
  <data key="d2">uses</data>
  <data key="d3">多媒体技术是指通过计算机对文字数据图形图像动画声音等多种媒体信息进行综合处理和管理，使用户可以通过多种感官与计算机进行实时信息交互的技术，又称为计算机多媒体技术</data>
</edge>
<edge source="数据" target="感官">
  <data key="d2">uses</data>
  <data key="d3">多媒体技术是指通过计算机对文字数据图形图像动画声音等多种媒体信息进行综合处理和管理，使用户可以通过多种感官与计算机进行实时信息交互的技术，又称为计算机多媒体技术</data>
</edge>
<edge source="思想" target="计算机">
  <data key="d2">extends</data>
  <data key="d3">分布式系统将并发性的思想扩展到了多台由网络连接的计算机</data>
</edge>
<edge source="思想" target="网络">
  <data key="d2">extends</data>
  <data key="d3">分布式系统将并发性的思想扩展到了多台由网络连接的计算机</data>
</edge>
<edge source="思想" target="网络连接">
  <data key="d2">extends</data>
  <data key="d3">分布式系统将并发性的思想扩展到了多台由网络连接的计算机</data>
</edge>
<edge source="基础" target="关系">
  <data key="d2">is_a</data>
  <data key="d3">数据层是以事实（fact）为存储单位的图数据库，其事实的基础表达方式就是实体关系实体或者实体属性属性值</data>
</edge>
<edge source="基础" target="实体">
  <data key="d2">is_a</data>
  <data key="d3">数据层是以事实（fact）为存储单位的图数据库，其事实的基础表达方式就是实体关系实体或者实体属性属性值</data>
</edge>
<edge source="基础" target="属性">
  <data key="d2">is_a</data>
  <data key="d3">数据层是以事实（fact）为存储单位的图数据库，其事实的基础表达方式就是实体关系实体或者实体属性属性值</data>
</edge>
<edge source="基础" target="影响">
  <data key="d2">affects</data>
  <data key="d3">6 实体抽取 实体抽取，也称为命名实体识别（named entity recognition，NER），指从源数据中自动识别命名实体，这一步是信息抽取中最基础和关键的部分，因为实体抽取的准确率和召回率对后续知识获取效率和质量影响很大</data>
</edge>
<edge source="基础" target="自动">
  <data key="d2">is_a</data>
  <data key="d3">对于形式化方法的最佳形容是各种理论计算机科学基础种类的应用，特别是计算机逻辑演算，形式语言，自动机理论和形式语义学，此外还有类型系统代数数据类型，以及软件和硬件规范和验证中的一些问题</data>
</edge>
<edge source="基础" target="逻辑">
  <data key="d2">is_a</data>
  <data key="d3">对于形式化方法的最佳形容是各种理论计算机科学基础种类的应用，特别是计算机逻辑演算，形式语言，自动机理论和形式语义学，此外还有类型系统代数数据类型，以及软件和硬件规范和验证中的一些问题</data>
</edge>
<edge source="基础" target="动机">
  <data key="d2">is_a</data>
  <data key="d3">对于形式化方法的最佳形容是各种理论计算机科学基础种类的应用，特别是计算机逻辑演算，形式语言，自动机理论和形式语义学，此外还有类型系统代数数据类型，以及软件和硬件规范和验证中的一些问题</data>
</edge>
<edge source="基础" target="自动机">
  <data key="d2">is_a</data>
  <data key="d3">对于形式化方法的最佳形容是各种理论计算机科学基础种类的应用，特别是计算机逻辑演算，形式语言，自动机理论和形式语义学，此外还有类型系统代数数据类型，以及软件和硬件规范和验证中的一些问题</data>
</edge>
<edge source="基础" target="实用技术">
  <data key="d2">implements</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="基础" target="学科">
  <data key="d2">implements</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="基础" target="技术">
  <data key="d2">implements</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="条件" target="信息">
  <data key="d2">extends</data>
  <data key="d3">13 Google Now Web Open Data Microsoft Cortana Web Open Data The World Book Encyclopedia YAGO KB NELL KB YAGO KB NELL KB Wikipedia Web Open Data Wikipedia 受到算法准召率低限制条件多扩展性不好等问题，针对开放域的信息抽取仍面对很大挑战</data>
</edge>
<edge source="条件" target="问题">
  <data key="d2">extends</data>
  <data key="d3">13 Google Now Web Open Data Microsoft Cortana Web Open Data The World Book Encyclopedia YAGO KB NELL KB YAGO KB NELL KB Wikipedia Web Open Data Wikipedia 受到算法准召率低限制条件多扩展性不好等问题，针对开放域的信息抽取仍面对很大挑战</data>
</edge>
<edge source="条件" target="扩展性">
  <data key="d2">extends</data>
  <data key="d3">13 Google Now Web Open Data Microsoft Cortana Web Open Data The World Book Encyclopedia YAGO KB NELL KB YAGO KB NELL KB Wikipedia Web Open Data Wikipedia 受到算法准召率低限制条件多扩展性不好等问题，针对开放域的信息抽取仍面对很大挑战</data>
</edge>
<edge source="条件" target="类似地">
  <data key="d2">is_a</data>
  <data key="d3">一类相关的常见问题要求在给定图中寻找符合某些条件的最大子图，其中有很多是NP完全的，如： 类似地，有些问题要求寻找符合某些条件的最大导出子图，如： 平面图判定：判定给定的图是否是平面图（此问题与子图的关系，参见库拉托夫斯基定理） 一个尚未解决的与子图相关的猜想，重构猜想（Reconstruction conjecture）：一个n阶图是否能够由其所有n1阶导出子图唯一确定</data>
</edge>
<edge source="代表" target="关系">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="代表" target="连线">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="代表" target="合作">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="对象" target="概念">
  <data key="d2">includes</data>
  <data key="d3">知识推理的对象除了实体关系，还包括实体的属性值本体概念层次关系等</data>
</edge>
<edge source="对象" target="属性">
  <data key="d2">includes</data>
  <data key="d3">知识推理的对象除了实体关系，还包括实体的属性值本体概念层次关系等</data>
</edge>
<edge source="对象" target="本体">
  <data key="d2">includes</data>
  <data key="d3">知识推理的对象除了实体关系，还包括实体的属性值本体概念层次关系等</data>
</edge>
<edge source="类型" target="形式">
  <data key="d2">is_a</data>
  <data key="d3">字符串数据类型是建模在形式字符串的想法上的数据类型（Data type）</data>
</edge>
<edge source="类型" target="建模">
  <data key="d2">is_a</data>
  <data key="d3">字符串数据类型是建模在形式字符串的想法上的数据类型（Data type）</data>
</edge>
<edge source="类型" target="Data type">
  <data key="d2">is_a</data>
  <data key="d3">字符串数据类型是建模在形式字符串的想法上的数据类型（Data type）</data>
</edge>
<edge source="类型" target="极大值">
  <data key="d2">is_a</data>
  <data key="d3">一般的说，有两种类型的字符串数据类型：定长字符串，它有固定的极大长度并且不管是否达到了这个极大值都使用同样数量的内存；和变长字符串，它的长度不是专断固定的并且依赖于实际的大小使用可变数量的内存</data>
</edge>
<edge source="类型" target="数量">
  <data key="d2">uses</data>
  <data key="d3">一般的说，有两种类型的字符串数据类型：定长字符串，它有固定的极大长度并且不管是否达到了这个极大值都使用同样数量的内存；和变长字符串，它的长度不是专断固定的并且依赖于实际的大小使用可变数量的内存</data>
</edge>
<edge source="类型" target="内存">
  <data key="d2">uses</data>
  <data key="d3">一般的说，有两种类型的字符串数据类型：定长字符串，它有固定的极大长度并且不管是否达到了这个极大值都使用同样数量的内存；和变长字符串，它的长度不是专断固定的并且依赖于实际的大小使用可变数量的内存</data>
</edge>
<edge source="类型" target="位面">
  <data key="d2">is_a</data>
  <data key="d3">多数语言有Unicode字符串数据类型（通常是UTF16，因为它在Unicode补充位面介入之前就被增加了）</data>
</edge>
<edge source="类型" target="规则">
  <data key="d2">is_a</data>
  <data key="d3">某些语言如C把字符串实现为可以用于任何基本类型的模版，但这是个例外而不是规则</data>
</edge>
<edge source="类型" target="实际">
  <data key="d2">depends_on</data>
  <data key="d3">一般的说，有两种类型的字符串数据类型：定长字符串，它有固定的极大长度并且不管是否达到了这个极大值都使用同样数量的内存；和变长字符串，它的长度不是专断固定的并且依赖于实际的大小使用可变数量的内存</data>
</edge>
<edge source="事物" target="关系">
  <data key="d2">used_for</data>
  <data key="d3">顶点用于代表事物，连接两顶点的边则用于表示两个事物间具有这种关系</data>
</edge>
<edge source="种类" target="自动">
  <data key="d2">is_a</data>
  <data key="d3">对于形式化方法的最佳形容是各种理论计算机科学基础种类的应用，特别是计算机逻辑演算，形式语言，自动机理论和形式语义学，此外还有类型系统代数数据类型，以及软件和硬件规范和验证中的一些问题</data>
</edge>
<edge source="种类" target="逻辑">
  <data key="d2">is_a</data>
  <data key="d3">对于形式化方法的最佳形容是各种理论计算机科学基础种类的应用，特别是计算机逻辑演算，形式语言，自动机理论和形式语义学，此外还有类型系统代数数据类型，以及软件和硬件规范和验证中的一些问题</data>
</edge>
<edge source="种类" target="动机">
  <data key="d2">is_a</data>
  <data key="d3">对于形式化方法的最佳形容是各种理论计算机科学基础种类的应用，特别是计算机逻辑演算，形式语言，自动机理论和形式语义学，此外还有类型系统代数数据类型，以及软件和硬件规范和验证中的一些问题</data>
</edge>
<edge source="种类" target="自动机">
  <data key="d2">is_a</data>
  <data key="d3">对于形式化方法的最佳形容是各种理论计算机科学基础种类的应用，特别是计算机逻辑演算，形式语言，自动机理论和形式语义学，此外还有类型系统代数数据类型，以及软件和硬件规范和验证中的一些问题</data>
</edge>
<edge source="逻辑" target="信息">
  <data key="d2">used_for</data>
  <data key="d3">2011年，Fader采用人工标注方式对1000个句子中的实体关系三元组进行标注，并作为训练集得到逻辑斯蒂回归模型，用于对REVERB系统的信息抽取结果计算置信度</data>
</edge>
<edge source="逻辑" target="结果">
  <data key="d2">used_for</data>
  <data key="d3">2011年，Fader采用人工标注方式对1000个句子中的实体关系三元组进行标注，并作为训练集得到逻辑斯蒂回归模型，用于对REVERB系统的信息抽取结果计算置信度</data>
</edge>
<edge source="逻辑" target="系统">
  <data key="d2">used_for</data>
  <data key="d3">2011年，Fader采用人工标注方式对1000个句子中的实体关系三元组进行标注，并作为训练集得到逻辑斯蒂回归模型，用于对REVERB系统的信息抽取结果计算置信度</data>
</edge>
<edge source="逻辑" target="置信度">
  <data key="d2">used_for</data>
  <data key="d3">2011年，Fader采用人工标注方式对1000个句子中的实体关系三元组进行标注，并作为训练集得到逻辑斯蒂回归模型，用于对REVERB系统的信息抽取结果计算置信度</data>
</edge>
<edge source="逻辑" target="科学">
  <data key="d2">is_a</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="逻辑" target="物理">
  <data key="d2">is_a</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="逻辑" target="智能">
  <data key="d2">used_for</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="模式" target="关系">
  <data key="d2">is_a</data>
  <data key="d3">模式层存储的是经过提炼的知识，借助本体库来规范实体关系以及实体类型和属性等之间的关系</data>
</edge>
<edge source="模式" target="实体">
  <data key="d2">is_a</data>
  <data key="d3">模式层存储的是经过提炼的知识，借助本体库来规范实体关系以及实体类型和属性等之间的关系</data>
</edge>
<edge source="模式" target="本体">
  <data key="d2">is_a</data>
  <data key="d3">模式层存储的是经过提炼的知识，借助本体库来规范实体关系以及实体类型和属性等之间的关系</data>
</edge>
<edge source="模式" target="规范">
  <data key="d2">is_a</data>
  <data key="d3">模式层存储的是经过提炼的知识，借助本体库来规范实体关系以及实体类型和属性等之间的关系</data>
</edge>
<edge source="模式" target="概念">
  <data key="d2">used_for</data>
  <data key="d3">在知识图谱中，本体位于模式层，用于描述概念层次体系的知识概念模版</data>
</edge>
<edge source="模式" target="体系">
  <data key="d2">used_for</data>
  <data key="d3">在知识图谱中，本体位于模式层，用于描述概念层次体系的知识概念模版</data>
</edge>
<edge source="事实" target="关系">
  <data key="d2">is_a</data>
  <data key="d3">数据层是以事实（fact）为存储单位的图数据库，其事实的基础表达方式就是实体关系实体或者实体属性属性值</data>
</edge>
<edge source="事实" target="实体">
  <data key="d2">is_a</data>
  <data key="d3">数据层是以事实（fact）为存储单位的图数据库，其事实的基础表达方式就是实体关系实体或者实体属性属性值</data>
</edge>
<edge source="事实" target="属性">
  <data key="d2">is_a</data>
  <data key="d3">数据层是以事实（fact）为存储单位的图数据库，其事实的基础表达方式就是实体关系实体或者实体属性属性值</data>
</edge>
<edge source="事实" target="本体">
  <data key="d2">includes</data>
  <data key="d3">因此还需要针对这些事实表达进行知识加工，包括本体构建知识推理和质量评估</data>
</edge>
<edge source="事实" target="质量">
  <data key="d2">includes</data>
  <data key="d3">因此还需要针对这些事实表达进行知识加工，包括本体构建知识推理和质量评估</data>
</edge>
<edge source="事实" target="评估">
  <data key="d2">includes</data>
  <data key="d3">因此还需要针对这些事实表达进行知识加工，包括本体构建知识推理和质量评估</data>
</edge>
<edge source="事实" target="推理">
  <data key="d2">includes</data>
  <data key="d3">因此还需要针对这些事实表达进行知识加工，包括本体构建知识推理和质量评估</data>
</edge>
<edge source="事实" target="知识推理">
  <data key="d2">includes</data>
  <data key="d3">因此还需要针对这些事实表达进行知识加工，包括本体构建知识推理和质量评估</data>
</edge>
<edge source="事实" target="计算机">
  <data key="d2">is_a</data>
  <data key="d3">丹麦科学家彼得諾爾建议使用术语"datalogy"，以反映这一事实，即科学学科是围绕着数据和数据处理，而不一定要涉及计算机</data>
</edge>
<edge source="事实" target="数据">
  <data key="d2">is_a</data>
  <data key="d3">丹麦科学家彼得諾爾建议使用术语"datalogy"，以反映这一事实，即科学学科是围绕着数据和数据处理，而不一定要涉及计算机</data>
</edge>
<edge source="事实" target="数据处理">
  <data key="d2">is_a</data>
  <data key="d3">丹麦科学家彼得諾爾建议使用术语"datalogy"，以反映这一事实，即科学学科是围绕着数据和数据处理，而不一定要涉及计算机</data>
</edge>
<edge source="事实" target="資訊革命">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="事实" target="信息">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="事实" target="时代">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="事实" target="革命">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="事实" target="信息时代">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="事实" target="奠基">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="事实" target="資訊">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="事实" target="驱动力">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="数据库" target="关系">
  <data key="d2">is_a</data>
  <data key="d3">数据层是以事实（fact）为存储单位的图数据库，其事实的基础表达方式就是实体关系实体或者实体属性属性值</data>
</edge>
<edge source="数据库" target="实体">
  <data key="d2">is_a</data>
  <data key="d3">数据层是以事实（fact）为存储单位的图数据库，其事实的基础表达方式就是实体关系实体或者实体属性属性值</data>
</edge>
<edge source="数据库" target="属性">
  <data key="d2">is_a</data>
  <data key="d3">数据层是以事实（fact）为存储单位的图数据库，其事实的基础表达方式就是实体关系实体或者实体属性属性值</data>
</edge>
<edge source="数据库" target="检索">
  <data key="d2">is_a</data>
  <data key="d3">数据库是为了更容易地组织存储和检索大量数据</data>
</edge>
<edge source="数据库" target="大量">
  <data key="d2">is_a</data>
  <data key="d3">数据库是为了更容易地组织存储和检索大量数据</data>
</edge>
<edge source="数据库" target="系统">
  <data key="d2">composed_of</data>
  <data key="d3">数据库由数据库管理系统管理，通过数据模型和查询语言来存储创建维护和搜索数据</data>
</edge>
<edge source="数据库" target="模型">
  <data key="d2">composed_of</data>
  <data key="d3">数据库由数据库管理系统管理，通过数据模型和查询语言来存储创建维护和搜索数据</data>
</edge>
<edge source="数据库" target="管理">
  <data key="d2">composed_of</data>
  <data key="d3">数据库由数据库管理系统管理，通过数据模型和查询语言来存储创建维护和搜索数据</data>
</edge>
<edge source="数据库" target="管理系统">
  <data key="d2">composed_of</data>
  <data key="d3">数据库由数据库管理系统管理，通过数据模型和查询语言来存储创建维护和搜索数据</data>
</edge>
<edge source="数据库" target="数据模型">
  <data key="d2">composed_of</data>
  <data key="d3">数据库由数据库管理系统管理，通过数据模型和查询语言来存储创建维护和搜索数据</data>
</edge>
<edge source="数据库" target="查询语言">
  <data key="d2">composed_of</data>
  <data key="d3">数据库由数据库管理系统管理，通过数据模型和查询语言来存储创建维护和搜索数据</data>
</edge>
<edge source="数据库" target="查询">
  <data key="d2">composed_of</data>
  <data key="d3">数据库由数据库管理系统管理，通过数据模型和查询语言来存储创建维护和搜索数据</data>
</edge>
<edge source="本体" target="加工">
  <data key="d2">is_a</data>
  <data key="d3">本体构建中的聚类问题质量评估的标准和指标的建立和知识推理的技术思维限制，都是知识加工的重要难点</data>
</edge>
<edge source="本体" target="概念">
  <data key="d2">used_for</data>
  <data key="d3">在知识图谱中，本体位于模式层，用于描述概念层次体系的知识概念模版</data>
</edge>
<edge source="本体" target="体系">
  <data key="d2">used_for</data>
  <data key="d3">在知识图谱中，本体位于模式层，用于描述概念层次体系的知识概念模版</data>
</edge>
<edge source="部分" target="影响">
  <data key="d2">affects</data>
  <data key="d3">6 实体抽取 实体抽取，也称为命名实体识别（named entity recognition，NER），指从源数据中自动识别命名实体，这一步是信息抽取中最基础和关键的部分，因为实体抽取的准确率和召回率对后续知识获取效率和质量影响很大</data>
</edge>
<edge source="发展" target="道路">
  <data key="d2">uses</data>
  <data key="d3">1860年之1930年间，若当库拉托夫斯基和惠特尼从之前独立于图论发展的拓扑学中吸取大量内容进入图论，而现代代数方法的使用更让图论与拓扑走上共同发展的道路</data>
</edge>
<edge source="发展" target="15">
  <data key="d2">supports</data>
  <data key="d3">13 近年来，语义链网络已经发展为支持信息物理社会智能14 15，已经有了许多应用16</data>
</edge>
<edge source="发展" target="信息">
  <data key="d2">supports</data>
  <data key="d3">13 近年来，语义链网络已经发展为支持信息物理社会智能14 15，已经有了许多应用16</data>
</edge>
<edge source="发展" target="智能">
  <data key="d2">supports</data>
  <data key="d3">13 近年来，语义链网络已经发展为支持信息物理社会智能14 15，已经有了许多应用16</data>
</edge>
<edge source="发展" target="物理">
  <data key="d2">supports</data>
  <data key="d3">13 近年来，语义链网络已经发展为支持信息物理社会智能14 15，已经有了许多应用16</data>
</edge>
<edge source="发展" target="社会">
  <data key="d2">supports</data>
  <data key="d3">13 近年来，语义链网络已经发展为支持信息物理社会智能14 15，已经有了许多应用16</data>
</edge>
<edge source="发展" target="事情">
  <data key="d2">is_a</data>
  <data key="d3">2020世纪50年代后期，计算机科学学科還在发展階段，这種問題在当时是一件很常見的事情</data>
</edge>
<edge source="信息" target="影响">
  <data key="d2">affects</data>
  <data key="d3">6 实体抽取 实体抽取，也称为命名实体识别（named entity recognition，NER），指从源数据中自动识别命名实体，这一步是信息抽取中最基础和关键的部分，因为实体抽取的准确率和召回率对后续知识获取效率和质量影响很大</data>
</edge>
<edge source="信息" target="Freebase">
  <data key="d2">includes</data>
  <data key="d3">2 据Google称，知识图谱的信息来自许多来源，包括CIA的世界概况，Freebase和维基百科1</data>
</edge>
<edge source="信息" target="百科1">
  <data key="d2">includes</data>
  <data key="d3">2 据Google称，知识图谱的信息来自许多来源，包括CIA的世界概况，Freebase和维基百科1</data>
</edge>
<edge source="信息" target="世界">
  <data key="d2">includes</data>
  <data key="d3">2 据Google称，知识图谱的信息来自许多来源，包括CIA的世界概况，Freebase和维基百科1</data>
</edge>
<edge source="信息" target="概况">
  <data key="d2">includes</data>
  <data key="d3">2 据Google称，知识图谱的信息来自许多来源，包括CIA的世界概况，Freebase和维基百科1</data>
</edge>
<edge source="信息" target="维基百科">
  <data key="d2">includes</data>
  <data key="d3">2 据Google称，知识图谱的信息来自许多来源，包括CIA的世界概况，Freebase和维基百科1</data>
</edge>
<edge source="信息" target="经验">
  <data key="d2">uses</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="信息" target="有关">
  <data key="d2">uses</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="信息" target="玩游戏">
  <data key="d2">uses</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="信息" target="游戏">
  <data key="d2">uses</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="信息" target="文字">
  <data key="d2">uses</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="信息" target="資訊革命">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="信息" target="公元17501850年">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="信息" target="革命">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="信息" target="資訊">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="信息" target="驱动力">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="信息" target="工业革命">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="信息" target="工业">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="信息" target="克劳德香农">
  <data key="d2">composed_of</data>
  <data key="d3">信息论与信息量化相关，由克劳德香农创建，用于寻找信号处理操作的根本极限，比如压缩数据和可靠的数据存储与通讯</data>
</edge>
<edge source="信息" target="香农">
  <data key="d2">composed_of</data>
  <data key="d3">信息论与信息量化相关，由克劳德香农创建，用于寻找信号处理操作的根本极限，比如压缩数据和可靠的数据存储与通讯</data>
</edge>
<edge source="信息" target="信号处理">
  <data key="d2">used_for</data>
  <data key="d3">信息论与信息量化相关，由克劳德香农创建，用于寻找信号处理操作的根本极限，比如压缩数据和可靠的数据存储与通讯</data>
</edge>
<edge source="信息" target="数据">
  <data key="d2">used_for</data>
  <data key="d3">信息论与信息量化相关，由克劳德香农创建，用于寻找信号处理操作的根本极限，比如压缩数据和可靠的数据存储与通讯</data>
</edge>
<edge source="信息" target="实用技术">
  <data key="d2">implements</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="信息" target="学科">
  <data key="d2">implements</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="信息" target="技术">
  <data key="d2">implements</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="信息" target="用户">
  <data key="d2">uses</data>
  <data key="d3">多媒体技术是指通过计算机对文字数据图形图像动画声音等多种媒体信息进行综合处理和管理，使用户可以通过多种感官与计算机进行实时信息交互的技术，又称为计算机多媒体技术</data>
</edge>
<edge source="信息" target="感官">
  <data key="d2">uses</data>
  <data key="d3">多媒体技术是指通过计算机对文字数据图形图像动画声音等多种媒体信息进行综合处理和管理，使用户可以通过多种感官与计算机进行实时信息交互的技术，又称为计算机多媒体技术</data>
</edge>
<edge source="自动" target="方式">
  <data key="d2">is_a</data>
  <data key="d3">现阶段知识图谱大多为公开采集数据并自动抽取资源，经过人工审核后加入到知识库中，这种则是自底向上的构建方式</data>
</edge>
<edge source="自动" target="基础">
  <data key="d2">is_a</data>
  <data key="d3">6 实体抽取 实体抽取，也称为命名实体识别（named entity recognition，NER），指从源数据中自动识别命名实体，这一步是信息抽取中最基础和关键的部分，因为实体抽取的准确率和召回率对后续知识获取效率和质量影响很大</data>
</edge>
<edge source="自动" target="部分">
  <data key="d2">is_a</data>
  <data key="d3">6 实体抽取 实体抽取，也称为命名实体识别（named entity recognition，NER），指从源数据中自动识别命名实体，这一步是信息抽取中最基础和关键的部分，因为实体抽取的准确率和召回率对后续知识获取效率和质量影响很大</data>
</edge>
<edge source="自动" target="信息">
  <data key="d2">is_a</data>
  <data key="d3">6 实体抽取 实体抽取，也称为命名实体识别（named entity recognition，NER），指从源数据中自动识别命名实体，这一步是信息抽取中最基础和关键的部分，因为实体抽取的准确率和召回率对后续知识获取效率和质量影响很大</data>
</edge>
<edge source="自动" target="关键">
  <data key="d2">is_a</data>
  <data key="d3">6 实体抽取 实体抽取，也称为命名实体识别（named entity recognition，NER），指从源数据中自动识别命名实体，这一步是信息抽取中最基础和关键的部分，因为实体抽取的准确率和召回率对后续知识获取效率和质量影响很大</data>
</edge>
<edge source="自动" target="影响">
  <data key="d2">affects</data>
  <data key="d3">6 实体抽取 实体抽取，也称为命名实体识别（named entity recognition，NER），指从源数据中自动识别命名实体，这一步是信息抽取中最基础和关键的部分，因为实体抽取的准确率和召回率对后续知识获取效率和质量影响很大</data>
</edge>
<edge source="资源" target="方式">
  <data key="d2">is_a</data>
  <data key="d3">现阶段知识图谱大多为公开采集数据并自动抽取资源，经过人工审核后加入到知识库中，这种则是自底向上的构建方式</data>
</edge>
<edge source="资源" target="核心">
  <data key="d2">is_a</data>
  <data key="d3">操作系统是管理电脑硬件与软件资源的电脑程式，同时也是电脑系统的核心与基石</data>
</edge>
<edge source="资源" target="基石">
  <data key="d2">is_a</data>
  <data key="d3">操作系统是管理电脑硬件与软件资源的电脑程式，同时也是电脑系统的核心与基石</data>
</edge>
<edge source="人工" target="方式">
  <data key="d2">is_a</data>
  <data key="d3">现阶段知识图谱大多为公开采集数据并自动抽取资源，经过人工审核后加入到知识库中，这种则是自底向上的构建方式</data>
</edge>
<edge source="人工" target="信息">
  <data key="d2">used_for</data>
  <data key="d3">2011年，Fader采用人工标注方式对1000个句子中的实体关系三元组进行标注，并作为训练集得到逻辑斯蒂回归模型，用于对REVERB系统的信息抽取结果计算置信度</data>
</edge>
<edge source="人工" target="结果">
  <data key="d2">used_for</data>
  <data key="d3">2011年，Fader采用人工标注方式对1000个句子中的实体关系三元组进行标注，并作为训练集得到逻辑斯蒂回归模型，用于对REVERB系统的信息抽取结果计算置信度</data>
</edge>
<edge source="人工" target="系统">
  <data key="d2">used_for</data>
  <data key="d3">2011年，Fader采用人工标注方式对1000个句子中的实体关系三元组进行标注，并作为训练集得到逻辑斯蒂回归模型，用于对REVERB系统的信息抽取结果计算置信度</data>
</edge>
<edge source="人工" target="置信度">
  <data key="d2">used_for</data>
  <data key="d3">2011年，Fader采用人工标注方式对1000个句子中的实体关系三元组进行标注，并作为训练集得到逻辑斯蒂回归模型，用于对REVERB系统的信息抽取结果计算置信度</data>
</edge>
<edge source="单元" target="结构">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="单元" target="计算机领域">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="单元" target="结构化">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="单元" target="数据">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="单元" target="形式">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="命名" target="基础">
  <data key="d2">is_a</data>
  <data key="d3">6 实体抽取 实体抽取，也称为命名实体识别（named entity recognition，NER），指从源数据中自动识别命名实体，这一步是信息抽取中最基础和关键的部分，因为实体抽取的准确率和召回率对后续知识获取效率和质量影响很大</data>
</edge>
<edge source="命名" target="部分">
  <data key="d2">is_a</data>
  <data key="d3">6 实体抽取 实体抽取，也称为命名实体识别（named entity recognition，NER），指从源数据中自动识别命名实体，这一步是信息抽取中最基础和关键的部分，因为实体抽取的准确率和召回率对后续知识获取效率和质量影响很大</data>
</edge>
<edge source="命名" target="信息">
  <data key="d2">is_a</data>
  <data key="d3">6 实体抽取 实体抽取，也称为命名实体识别（named entity recognition，NER），指从源数据中自动识别命名实体，这一步是信息抽取中最基础和关键的部分，因为实体抽取的准确率和召回率对后续知识获取效率和质量影响很大</data>
</edge>
<edge source="命名" target="关键">
  <data key="d2">is_a</data>
  <data key="d3">6 实体抽取 实体抽取，也称为命名实体识别（named entity recognition，NER），指从源数据中自动识别命名实体，这一步是信息抽取中最基础和关键的部分，因为实体抽取的准确率和召回率对后续知识获取效率和质量影响很大</data>
</edge>
<edge source="命名" target="影响">
  <data key="d2">affects</data>
  <data key="d3">6 实体抽取 实体抽取，也称为命名实体识别（named entity recognition，NER），指从源数据中自动识别命名实体，这一步是信息抽取中最基础和关键的部分，因为实体抽取的准确率和召回率对后续知识获取效率和质量影响很大</data>
</edge>
<edge source="自动识别" target="基础">
  <data key="d2">is_a</data>
  <data key="d3">6 实体抽取 实体抽取，也称为命名实体识别（named entity recognition，NER），指从源数据中自动识别命名实体，这一步是信息抽取中最基础和关键的部分，因为实体抽取的准确率和召回率对后续知识获取效率和质量影响很大</data>
</edge>
<edge source="自动识别" target="部分">
  <data key="d2">is_a</data>
  <data key="d3">6 实体抽取 实体抽取，也称为命名实体识别（named entity recognition，NER），指从源数据中自动识别命名实体，这一步是信息抽取中最基础和关键的部分，因为实体抽取的准确率和召回率对后续知识获取效率和质量影响很大</data>
</edge>
<edge source="自动识别" target="信息">
  <data key="d2">is_a</data>
  <data key="d3">6 实体抽取 实体抽取，也称为命名实体识别（named entity recognition，NER），指从源数据中自动识别命名实体，这一步是信息抽取中最基础和关键的部分，因为实体抽取的准确率和召回率对后续知识获取效率和质量影响很大</data>
</edge>
<edge source="自动识别" target="关键">
  <data key="d2">is_a</data>
  <data key="d3">6 实体抽取 实体抽取，也称为命名实体识别（named entity recognition，NER），指从源数据中自动识别命名实体，这一步是信息抽取中最基础和关键的部分，因为实体抽取的准确率和召回率对后续知识获取效率和质量影响很大</data>
</edge>
<edge source="自动识别" target="影响">
  <data key="d2">affects</data>
  <data key="d3">6 实体抽取 实体抽取，也称为命名实体识别（named entity recognition，NER），指从源数据中自动识别命名实体，这一步是信息抽取中最基础和关键的部分，因为实体抽取的准确率和召回率对后续知识获取效率和质量影响很大</data>
</edge>
<edge source="关键" target="影响">
  <data key="d2">affects</data>
  <data key="d3">6 实体抽取 实体抽取，也称为命名实体识别（named entity recognition，NER），指从源数据中自动识别命名实体，这一步是信息抽取中最基础和关键的部分，因为实体抽取的准确率和召回率对后续知识获取效率和质量影响很大</data>
</edge>
<edge source="准确率" target="影响">
  <data key="d2">affects</data>
  <data key="d3">6 实体抽取 实体抽取，也称为命名实体识别（named entity recognition，NER），指从源数据中自动识别命名实体，这一步是信息抽取中最基础和关键的部分，因为实体抽取的准确率和召回率对后续知识获取效率和质量影响很大</data>
</edge>
<edge source="效率" target="影响">
  <data key="d2">affects</data>
  <data key="d3">6 实体抽取 实体抽取，也称为命名实体识别（named entity recognition，NER），指从源数据中自动识别命名实体，这一步是信息抽取中最基础和关键的部分，因为实体抽取的准确率和召回率对后续知识获取效率和质量影响很大</data>
</edge>
<edge source="质量" target="加工">
  <data key="d2">is_a</data>
  <data key="d3">本体构建中的聚类问题质量评估的标准和指标的建立和知识推理的技术思维限制，都是知识加工的重要难点</data>
</edge>
<edge source="质量" target="影响">
  <data key="d2">affects</data>
  <data key="d3">6 实体抽取 实体抽取，也称为命名实体识别（named entity recognition，NER），指从源数据中自动识别命名实体，这一步是信息抽取中最基础和关键的部分，因为实体抽取的准确率和召回率对后续知识获取效率和质量影响很大</data>
</edge>
<edge source="影响" target="软件">
  <data key="d2">affects</data>
  <data key="d3">它属于计算机科学学科，既受影响于也影响着数学软件工程和语言学</data>
</edge>
<edge source="影响" target="工程">
  <data key="d2">affects</data>
  <data key="d3">它属于计算机科学学科，既受影响于也影响着数学软件工程和语言学</data>
</edge>
<edge source="影响" target="数学">
  <data key="d2">affects</data>
  <data key="d3">它属于计算机科学学科，既受影响于也影响着数学软件工程和语言学</data>
</edge>
<edge source="影响" target="语言学">
  <data key="d2">affects</data>
  <data key="d3">它属于计算机科学学科，既受影响于也影响着数学软件工程和语言学</data>
</edge>
<edge source="影响" target="教师">
  <data key="d2">supports</data>
  <data key="d3">配合Running on Empty这篇文章，一个新的无党派宣传联盟：Computing in the Core（CinC）被建立，以影响联邦和政府政策，比如Computer Science Education Act（页面存档备份，存于互联网档案馆）要求政府拨款以制定计划完善计算机科学教育及支持计算机科学教师</data>
</edge>
<edge source="准召率" target="数据">
  <data key="d2">based_on</data>
  <data key="d3">早期实体抽取的准召率不够理想，但在2004年，Lin等采用字典辅助下的最大熵算法，基于Medline论文摘要的GENIA数据集使得实体抽取的准召率均超过70</data>
</edge>
<edge source="准召率" target="论文">
  <data key="d2">based_on</data>
  <data key="d3">早期实体抽取的准召率不够理想，但在2004年，Lin等采用字典辅助下的最大熵算法，基于Medline论文摘要的GENIA数据集使得实体抽取的准召率均超过70</data>
</edge>
<edge source="准召率" target="信息">
  <data key="d2">extends</data>
  <data key="d3">13 Google Now Web Open Data Microsoft Cortana Web Open Data The World Book Encyclopedia YAGO KB NELL KB YAGO KB NELL KB Wikipedia Web Open Data Wikipedia 受到算法准召率低限制条件多扩展性不好等问题，针对开放域的信息抽取仍面对很大挑战</data>
</edge>
<edge source="准召率" target="问题">
  <data key="d2">extends</data>
  <data key="d3">13 Google Now Web Open Data Microsoft Cortana Web Open Data The World Book Encyclopedia YAGO KB NELL KB YAGO KB NELL KB Wikipedia Web Open Data Wikipedia 受到算法准召率低限制条件多扩展性不好等问题，针对开放域的信息抽取仍面对很大挑战</data>
</edge>
<edge source="准召率" target="扩展性">
  <data key="d2">extends</data>
  <data key="d3">13 Google Now Web Open Data Microsoft Cortana Web Open Data The World Book Encyclopedia YAGO KB NELL KB YAGO KB NELL KB Wikipedia Web Open Data Wikipedia 受到算法准召率低限制条件多扩展性不好等问题，针对开放域的信息抽取仍面对很大挑战</data>
</edge>
<edge source="理想" target="数据">
  <data key="d2">based_on</data>
  <data key="d3">早期实体抽取的准召率不够理想，但在2004年，Lin等采用字典辅助下的最大熵算法，基于Medline论文摘要的GENIA数据集使得实体抽取的准召率均超过70</data>
</edge>
<edge source="理想" target="论文">
  <data key="d2">based_on</data>
  <data key="d3">早期实体抽取的准召率不够理想，但在2004年，Lin等采用字典辅助下的最大熵算法，基于Medline论文摘要的GENIA数据集使得实体抽取的准召率均超过70</data>
</edge>
<edge source="字典" target="数据">
  <data key="d2">based_on</data>
  <data key="d3">早期实体抽取的准召率不够理想，但在2004年，Lin等采用字典辅助下的最大熵算法，基于Medline论文摘要的GENIA数据集使得实体抽取的准召率均超过70</data>
</edge>
<edge source="字典" target="论文">
  <data key="d2">based_on</data>
  <data key="d3">早期实体抽取的准召率不够理想，但在2004年，Lin等采用字典辅助下的最大熵算法，基于Medline论文摘要的GENIA数据集使得实体抽取的准召率均超过70</data>
</edge>
<edge source="算法" target="语义">
  <data key="d2">based_on</data>
  <data key="d3">82010年，Jain等提出一种面向开放域的无监督学习算法，事先不给实体分类，而是基于实体的语义特征从搜索日志中识别命名实体，然后采用聚类算法对识别出的实体对象进行聚类</data>
</edge>
<edge source="算法" target="特征">
  <data key="d2">based_on</data>
  <data key="d3">82010年，Jain等提出一种面向开放域的无监督学习算法，事先不给实体分类，而是基于实体的语义特征从搜索日志中识别命名实体，然后采用聚类算法对识别出的实体对象进行聚类</data>
</edge>
<edge source="算法" target="命名">
  <data key="d2">based_on</data>
  <data key="d3">82010年，Jain等提出一种面向开放域的无监督学习算法，事先不给实体分类，而是基于实体的语义特征从搜索日志中识别命名实体，然后采用聚类算法对识别出的实体对象进行聚类</data>
</edge>
<edge source="算法" target="日志">
  <data key="d2">based_on</data>
  <data key="d3">82010年，Jain等提出一种面向开放域的无监督学习算法，事先不给实体分类，而是基于实体的语义特征从搜索日志中识别命名实体，然后采用聚类算法对识别出的实体对象进行聚类</data>
</edge>
<edge source="算法" target="命名实体">
  <data key="d2">based_on</data>
  <data key="d3">82010年，Jain等提出一种面向开放域的无监督学习算法，事先不给实体分类，而是基于实体的语义特征从搜索日志中识别命名实体，然后采用聚类算法对识别出的实体对象进行聚类</data>
</edge>
<edge source="算法" target="数据">
  <data key="d2">includes</data>
  <data key="d3">算法主要包括数据结构计算几何图论等</data>
</edge>
<edge source="算法" target="论文">
  <data key="d2">based_on</data>
  <data key="d3">早期实体抽取的准召率不够理想，但在2004年，Lin等采用字典辅助下的最大熵算法，基于Medline论文摘要的GENIA数据集使得实体抽取的准召率均超过70</data>
</edge>
<edge source="算法" target="信息">
  <data key="d2">extends</data>
  <data key="d3">13 Google Now Web Open Data Microsoft Cortana Web Open Data The World Book Encyclopedia YAGO KB NELL KB YAGO KB NELL KB Wikipedia Web Open Data Wikipedia 受到算法准召率低限制条件多扩展性不好等问题，针对开放域的信息抽取仍面对很大挑战</data>
</edge>
<edge source="算法" target="问题">
  <data key="d2">extends</data>
  <data key="d3">13 Google Now Web Open Data Microsoft Cortana Web Open Data The World Book Encyclopedia YAGO KB NELL KB YAGO KB NELL KB Wikipedia Web Open Data Wikipedia 受到算法准召率低限制条件多扩展性不好等问题，针对开放域的信息抽取仍面对很大挑战</data>
</edge>
<edge source="算法" target="扩展性">
  <data key="d2">extends</data>
  <data key="d3">13 Google Now Web Open Data Microsoft Cortana Web Open Data The World Book Encyclopedia YAGO KB NELL KB YAGO KB NELL KB Wikipedia Web Open Data Wikipedia 受到算法准召率低限制条件多扩展性不好等问题，针对开放域的信息抽取仍面对很大挑战</data>
</edge>
<edge source="算法" target="古老">
  <data key="d2">is_a</data>
  <data key="d3">那些计算固定数值任务的机器，比如算盘，自古希腊时期即已存在，而用于加快计算的算法更是在算盘等古老的计算仪器发明之前就已被广泛使用</data>
</edge>
<edge source="算法" target="仪器">
  <data key="d2">is_a</data>
  <data key="d3">那些计算固定数值任务的机器，比如算盘，自古希腊时期即已存在，而用于加快计算的算法更是在算盘等古老的计算仪器发明之前就已被广泛使用</data>
</edge>
<edge source="算法" target="计算机科学">
  <data key="d2">is_a</data>
  <data key="d3">35算法是计算机科学研究的一个重要领域，也是许多其他计算机科学技术的基础</data>
</edge>
<edge source="算法" target="研究">
  <data key="d2">is_a</data>
  <data key="d3">35算法是计算机科学研究的一个重要领域，也是许多其他计算机科学技术的基础</data>
</edge>
<edge source="算法" target="领域">
  <data key="d2">is_a</data>
  <data key="d3">35算法是计算机科学研究的一个重要领域，也是许多其他计算机科学技术的基础</data>
</edge>
<edge source="算法" target="计算机">
  <data key="d2">is_a</data>
  <data key="d3">35算法是计算机科学研究的一个重要领域，也是许多其他计算机科学技术的基础</data>
</edge>
<edge source="算法" target="科学">
  <data key="d2">is_a</data>
  <data key="d3">35算法是计算机科学研究的一个重要领域，也是许多其他计算机科学技术的基础</data>
</edge>
<edge source="算法" target="科学研究">
  <data key="d2">is_a</data>
  <data key="d3">35算法是计算机科学研究的一个重要领域，也是许多其他计算机科学技术的基础</data>
</edge>
<edge source="算法" target="复杂性">
  <data key="d2">based_on</data>
  <data key="d3">现代密码学主要跟计算机科学相关，很多加密和解密算法都是基于它们的计算复杂性</data>
</edge>
<edge source="算法" target="数据结构">
  <data key="d2">includes</data>
  <data key="d3">算法主要包括数据结构计算几何图论等</data>
</edge>
<edge source="算法" target="图论">
  <data key="d2">includes</data>
  <data key="d3">算法主要包括数据结构计算几何图论等</data>
</edge>
<edge source="算法" target="结构">
  <data key="d2">includes</data>
  <data key="d3">算法主要包括数据结构计算几何图论等</data>
</edge>
<edge source="算法" target="杂项">
  <data key="d2">includes</data>
  <data key="d3">除此之外，算法还包括许多杂项，如模式匹配部分数论等</data>
</edge>
<edge source="算法" target="模式匹配">
  <data key="d2">includes</data>
  <data key="d3">除此之外，算法还包括许多杂项，如模式匹配部分数论等</data>
</edge>
<edge source="算法" target="部分">
  <data key="d2">includes</data>
  <data key="d3">除此之外，算法还包括许多杂项，如模式匹配部分数论等</data>
</edge>
<edge source="算法" target="数论">
  <data key="d2">includes</data>
  <data key="d3">除此之外，算法还包括许多杂项，如模式匹配部分数论等</data>
</edge>
<edge source="算法" target="系统">
  <data key="d2">implements</data>
  <data key="d3">Eden提议了三种范式应用于计算机科学的各个领域：31 作为一个学科，计算机科学涵盖了从算法的理论研究和计算的极限，到如何通过硬件和软件实现计算系统</data>
</edge>
<edge source="论文" target="第一">
  <data key="d2">is_a</data>
  <data key="d3">一般认为，欧拉于1736年出版的关于柯尼斯堡七桥问题的论文是图论领域的第一篇文章3</data>
</edge>
<edge source="论文" target="图论">
  <data key="d2">is_a</data>
  <data key="d3">一般认为，欧拉于1736年出版的关于柯尼斯堡七桥问题的论文是图论领域的第一篇文章3</data>
</edge>
<edge source="论文" target="领域">
  <data key="d2">is_a</data>
  <data key="d3">一般认为，欧拉于1736年出版的关于柯尼斯堡七桥问题的论文是图论领域的第一篇文章3</data>
</edge>
<edge source="论文" target="文章">
  <data key="d2">is_a</data>
  <data key="d3">一般认为，欧拉于1736年出版的关于柯尼斯堡七桥问题的论文是图论领域的第一篇文章3</data>
</edge>
<edge source="论文" target="莱布尼茨">
  <data key="d2">is_a</data>
  <data key="d3">而此论文与范德蒙的一篇关于骑士周游问题的文章，则是继承了莱布尼茨提出的位置分析的方法</data>
</edge>
<edge source="论文" target="分析">
  <data key="d2">is_a</data>
  <data key="d3">而此论文与范德蒙的一篇关于骑士周游问题的文章，则是继承了莱布尼茨提出的位置分析的方法</data>
</edge>
<edge source="论文" target="方法">
  <data key="d2">is_a</data>
  <data key="d3">而此论文与范德蒙的一篇关于骑士周游问题的文章，则是继承了莱布尼茨提出的位置分析的方法</data>
</edge>
<edge source="建模" target="科学">
  <data key="d2">is_a</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="建模" target="物理">
  <data key="d2">is_a</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="利用" target="热点">
  <data key="d2">is_a</data>
  <data key="d3">图书馆学侧重于图书馆业务流程和相关学科的研究，包括图书馆哲学图书馆学理论图书馆管理和图书馆业务技术等；情报学侧重于情报的分析和利用，包括情报学理论情报采集情报分析情报检索以及二次三次文献编辑利用，目前情报技术也是研究热点之一</data>
</edge>
<edge source="利用" target="情报检索">
  <data key="d2">includes</data>
  <data key="d3">图书馆学侧重于图书馆业务流程和相关学科的研究，包括图书馆哲学图书馆学理论图书馆管理和图书馆业务技术等；情报学侧重于情报的分析和利用，包括情报学理论情报采集情报分析情报检索以及二次三次文献编辑利用，目前情报技术也是研究热点之一</data>
</edge>
<edge source="利用" target="专业">
  <data key="d2">composed_of</data>
  <data key="d3">最初，计算机非常昂贵，要有效利用它们，某种程度上必须得由专业的计算机操作员来完成</data>
</edge>
<edge source="利用" target="操作员">
  <data key="d2">composed_of</data>
  <data key="d3">最初，计算机非常昂贵，要有效利用它们，某种程度上必须得由专业的计算机操作员来完成</data>
</edge>
<edge source="模型" target="信息">
  <data key="d2">used_for</data>
  <data key="d3">2011年，Fader采用人工标注方式对1000个句子中的实体关系三元组进行标注，并作为训练集得到逻辑斯蒂回归模型，用于对REVERB系统的信息抽取结果计算置信度</data>
</edge>
<edge source="模型" target="结果">
  <data key="d2">used_for</data>
  <data key="d3">2011年，Fader采用人工标注方式对1000个句子中的实体关系三元组进行标注，并作为训练集得到逻辑斯蒂回归模型，用于对REVERB系统的信息抽取结果计算置信度</data>
</edge>
<edge source="模型" target="系统">
  <data key="d2">used_for</data>
  <data key="d3">2011年，Fader采用人工标注方式对1000个句子中的实体关系三元组进行标注，并作为训练集得到逻辑斯蒂回归模型，用于对REVERB系统的信息抽取结果计算置信度</data>
</edge>
<edge source="模型" target="置信度">
  <data key="d2">used_for</data>
  <data key="d3">2011年，Fader采用人工标注方式对1000个句子中的实体关系三元组进行标注，并作为训练集得到逻辑斯蒂回归模型，用于对REVERB系统的信息抽取结果计算置信度</data>
</edge>
<edge source="模型" target="通用">
  <data key="d2">used_for</data>
  <data key="d3">一些数学模型，如Petri网进程演算和PRAM模型，被建立以用于通用并发计算</data>
</edge>
<edge source="面向" target="语义">
  <data key="d2">based_on</data>
  <data key="d3">82010年，Jain等提出一种面向开放域的无监督学习算法，事先不给实体分类，而是基于实体的语义特征从搜索日志中识别命名实体，然后采用聚类算法对识别出的实体对象进行聚类</data>
</edge>
<edge source="面向" target="特征">
  <data key="d2">based_on</data>
  <data key="d3">82010年，Jain等提出一种面向开放域的无监督学习算法，事先不给实体分类，而是基于实体的语义特征从搜索日志中识别命名实体，然后采用聚类算法对识别出的实体对象进行聚类</data>
</edge>
<edge source="面向" target="命名">
  <data key="d2">based_on</data>
  <data key="d3">82010年，Jain等提出一种面向开放域的无监督学习算法，事先不给实体分类，而是基于实体的语义特征从搜索日志中识别命名实体，然后采用聚类算法对识别出的实体对象进行聚类</data>
</edge>
<edge source="面向" target="日志">
  <data key="d2">based_on</data>
  <data key="d3">82010年，Jain等提出一种面向开放域的无监督学习算法，事先不给实体分类，而是基于实体的语义特征从搜索日志中识别命名实体，然后采用聚类算法对识别出的实体对象进行聚类</data>
</edge>
<edge source="面向" target="命名实体">
  <data key="d2">based_on</data>
  <data key="d3">82010年，Jain等提出一种面向开放域的无监督学习算法，事先不给实体分类，而是基于实体的语义特征从搜索日志中识别命名实体，然后采用聚类算法对识别出的实体对象进行聚类</data>
</edge>
<edge source="监督" target="语义">
  <data key="d2">based_on</data>
  <data key="d3">82010年，Jain等提出一种面向开放域的无监督学习算法，事先不给实体分类，而是基于实体的语义特征从搜索日志中识别命名实体，然后采用聚类算法对识别出的实体对象进行聚类</data>
</edge>
<edge source="监督" target="特征">
  <data key="d2">based_on</data>
  <data key="d3">82010年，Jain等提出一种面向开放域的无监督学习算法，事先不给实体分类，而是基于实体的语义特征从搜索日志中识别命名实体，然后采用聚类算法对识别出的实体对象进行聚类</data>
</edge>
<edge source="监督" target="命名">
  <data key="d2">based_on</data>
  <data key="d3">82010年，Jain等提出一种面向开放域的无监督学习算法，事先不给实体分类，而是基于实体的语义特征从搜索日志中识别命名实体，然后采用聚类算法对识别出的实体对象进行聚类</data>
</edge>
<edge source="监督" target="日志">
  <data key="d2">based_on</data>
  <data key="d3">82010年，Jain等提出一种面向开放域的无监督学习算法，事先不给实体分类，而是基于实体的语义特征从搜索日志中识别命名实体，然后采用聚类算法对识别出的实体对象进行聚类</data>
</edge>
<edge source="监督" target="命名实体">
  <data key="d2">based_on</data>
  <data key="d3">82010年，Jain等提出一种面向开放域的无监督学习算法，事先不给实体分类，而是基于实体的语义特征从搜索日志中识别命名实体，然后采用聚类算法对识别出的实体对象进行聚类</data>
</edge>
<edge source="分类" target="语义">
  <data key="d2">based_on</data>
  <data key="d3">82010年，Jain等提出一种面向开放域的无监督学习算法，事先不给实体分类，而是基于实体的语义特征从搜索日志中识别命名实体，然后采用聚类算法对识别出的实体对象进行聚类</data>
</edge>
<edge source="分类" target="特征">
  <data key="d2">based_on</data>
  <data key="d3">82010年，Jain等提出一种面向开放域的无监督学习算法，事先不给实体分类，而是基于实体的语义特征从搜索日志中识别命名实体，然后采用聚类算法对识别出的实体对象进行聚类</data>
</edge>
<edge source="分类" target="命名">
  <data key="d2">based_on</data>
  <data key="d3">82010年，Jain等提出一种面向开放域的无监督学习算法，事先不给实体分类，而是基于实体的语义特征从搜索日志中识别命名实体，然后采用聚类算法对识别出的实体对象进行聚类</data>
</edge>
<edge source="分类" target="日志">
  <data key="d2">based_on</data>
  <data key="d3">82010年，Jain等提出一种面向开放域的无监督学习算法，事先不给实体分类，而是基于实体的语义特征从搜索日志中识别命名实体，然后采用聚类算法对识别出的实体对象进行聚类</data>
</edge>
<edge source="分类" target="命名实体">
  <data key="d2">based_on</data>
  <data key="d3">82010年，Jain等提出一种面向开放域的无监督学习算法，事先不给实体分类，而是基于实体的语义特征从搜索日志中识别命名实体，然后采用聚类算法对识别出的实体对象进行聚类</data>
</edge>
<edge source="聚类" target="加工">
  <data key="d2">is_a</data>
  <data key="d3">本体构建中的聚类问题质量评估的标准和指标的建立和知识推理的技术思维限制，都是知识加工的重要难点</data>
</edge>
<edge source="公众" target="信息">
  <data key="d2">is_a</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="公众" target="问题">
  <data key="d2">is_a</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="公众" target="事业">
  <data key="d2">is_a</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="公众" target="信息技术">
  <data key="d2">is_a</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="公众" target="技术">
  <data key="d2">is_a</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="公众" target="比如信息技术">
  <data key="d2">is_a</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="公众" target="经验">
  <data key="d2">uses</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="公众" target="有关">
  <data key="d2">uses</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="公众" target="玩游戏">
  <data key="d2">uses</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="公众" target="游戏">
  <data key="d2">uses</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="公众" target="文字">
  <data key="d2">uses</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="教育" target="教师">
  <data key="d2">supports</data>
  <data key="d3">配合Running on Empty这篇文章，一个新的无党派宣传联盟：Computing in the Core（CinC）被建立，以影响联邦和政府政策，比如Computer Science Education Act（页面存档备份，存于互联网档案馆）要求政府拨款以制定计划完善计算机科学教育及支持计算机科学教师</data>
</edge>
<edge source="结果" target="列表">
  <data key="d2">is_a</data>
  <data key="d3">Google的约翰娜怀特解释说，搜索引擎使用知识图谱的数据产生的结果：知识图谱知道，圣克鲁斯是一个地方，且此列表与圣克鲁斯有关</data>
</edge>
<edge source="结果" target="地方">
  <data key="d2">is_a</data>
  <data key="d3">Google的约翰娜怀特解释说，搜索引擎使用知识图谱的数据产生的结果：知识图谱知道，圣克鲁斯是一个地方，且此列表与圣克鲁斯有关</data>
</edge>
<edge source="结果" target="有关">
  <data key="d2">is_a</data>
  <data key="d3">Google的约翰娜怀特解释说，搜索引擎使用知识图谱的数据产生的结果：知识图谱知道，圣克鲁斯是一个地方，且此列表与圣克鲁斯有关</data>
</edge>
<edge source="结果" target="理论">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="结果" target="问题">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="结果" target="性质">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="结果" target="复杂性">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="结果" target="研究">
  <data key="d2">implements</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="结果" target="程式">
  <data key="d2">implements</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="结果" target="語言">
  <data key="d2">implements</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="结果" target="理論">
  <data key="d2">implements</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="结果" target="方法">
  <data key="d2">implements</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="产品" target="关系">
  <data key="d2">includes</data>
  <data key="d3">10知识合并指从第三方知识库产品或已有数据化数据中获取知识输入，包括合并外部知识库和合并关系数据库</data>
</edge>
<edge source="产品" target="数据库">
  <data key="d2">includes</data>
  <data key="d3">10知识合并指从第三方知识库产品或已有数据化数据中获取知识输入，包括合并外部知识库和合并关系数据库</data>
</edge>
<edge source="产品" target="关系数据库">
  <data key="d2">includes</data>
  <data key="d3">10知识合并指从第三方知识库产品或已有数据化数据中获取知识输入，包括合并外部知识库和合并关系数据库</data>
</edge>
<edge source="产品" target="关系数据">
  <data key="d2">includes</data>
  <data key="d3">10知识合并指从第三方知识库产品或已有数据化数据中获取知识输入，包括合并外部知识库和合并关系数据库</data>
</edge>
<edge source="加工" target="本体">
  <data key="d2">includes</data>
  <data key="d3">因此还需要针对这些事实表达进行知识加工，包括本体构建知识推理和质量评估</data>
</edge>
<edge source="加工" target="质量">
  <data key="d2">includes</data>
  <data key="d3">因此还需要针对这些事实表达进行知识加工，包括本体构建知识推理和质量评估</data>
</edge>
<edge source="加工" target="评估">
  <data key="d2">includes</data>
  <data key="d3">因此还需要针对这些事实表达进行知识加工，包括本体构建知识推理和质量评估</data>
</edge>
<edge source="加工" target="推理">
  <data key="d2">includes</data>
  <data key="d3">因此还需要针对这些事实表达进行知识加工，包括本体构建知识推理和质量评估</data>
</edge>
<edge source="加工" target="知识推理">
  <data key="d2">includes</data>
  <data key="d3">因此还需要针对这些事实表达进行知识加工，包括本体构建知识推理和质量评估</data>
</edge>
<edge source="评估" target="加工">
  <data key="d2">is_a</data>
  <data key="d3">本体构建中的聚类问题质量评估的标准和指标的建立和知识推理的技术思维限制，都是知识加工的重要难点</data>
</edge>
<edge source="问题" target="加工">
  <data key="d2">is_a</data>
  <data key="d3">本体构建中的聚类问题质量评估的标准和指标的建立和知识推理的技术思维限制，都是知识加工的重要难点</data>
</edge>
<edge source="问题" target="设计">
  <data key="d2">depends_on</data>
  <data key="d3">现存代码在用到它们会导致一些字符串匹配和切断上的问题，严重程度依赖于字符编码是如何设计的</data>
</edge>
<edge source="问题" target="编码">
  <data key="d2">depends_on</data>
  <data key="d3">现存代码在用到它们会导致一些字符串匹配和切断上的问题，严重程度依赖于字符编码是如何设计的</data>
</edge>
<edge source="问题" target="有关">
  <data key="d2">uses</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="问题" target="基本">
  <data key="d2">includes</data>
  <data key="d3">知识库中的知识源于领域专家，它是求解问题所需领域知识的集合，包括基本事实规则和其它有关信息</data>
</edge>
<edge source="问题" target="事实">
  <data key="d2">includes</data>
  <data key="d3">知识库中的知识源于领域专家，它是求解问题所需领域知识的集合，包括基本事实规则和其它有关信息</data>
</edge>
<edge source="问题" target="规则">
  <data key="d2">includes</data>
  <data key="d3">知识库中的知识源于领域专家，它是求解问题所需领域知识的集合，包括基本事实规则和其它有关信息</data>
</edge>
<edge source="问题" target="信息">
  <data key="d2">includes</data>
  <data key="d3">知识库中的知识源于领域专家，它是求解问题所需领域知识的集合，包括基本事实规则和其它有关信息</data>
</edge>
<edge source="问题" target="图论">
  <data key="d2">is_a</data>
  <data key="d3">该问题于1736年被欧拉解决，因此普遍认为欧拉是图论的创始人</data>
</edge>
<edge source="问题" target="创始人">
  <data key="d2">is_a</data>
  <data key="d3">该问题于1736年被欧拉解决，因此普遍认为欧拉是图论的创始人</data>
</edge>
<edge source="问题" target="第一">
  <data key="d2">is_a</data>
  <data key="d3">一般认为，欧拉于1736年出版的关于柯尼斯堡七桥问题的论文是图论领域的第一篇文章3</data>
</edge>
<edge source="问题" target="领域">
  <data key="d2">is_a</data>
  <data key="d3">一般认为，欧拉于1736年出版的关于柯尼斯堡七桥问题的论文是图论领域的第一篇文章3</data>
</edge>
<edge source="问题" target="文章">
  <data key="d2">is_a</data>
  <data key="d3">一般认为，欧拉于1736年出版的关于柯尼斯堡七桥问题的论文是图论领域的第一篇文章3</data>
</edge>
<edge source="问题" target="莱布尼茨">
  <data key="d2">is_a</data>
  <data key="d3">而此论文与范德蒙的一篇关于骑士周游问题的文章，则是继承了莱布尼茨提出的位置分析的方法</data>
</edge>
<edge source="问题" target="分析">
  <data key="d2">is_a</data>
  <data key="d3">而此论文与范德蒙的一篇关于骑士周游问题的文章，则是继承了莱布尼茨提出的位置分析的方法</data>
</edge>
<edge source="问题" target="方法">
  <data key="d2">implements</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="问题" target="研究">
  <data key="d2">implements</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="问题" target="成果">
  <data key="d2">produces</data>
  <data key="d3">四色问题可谓是图论研究史上最著名也是产生成果最多的问题之一：是否任何一幅画在平面上的地图都可以用四种颜色染色，使得任意两个相邻的区域不同色</data>
</edge>
<edge source="问题" target="产生">
  <data key="d2">produces</data>
  <data key="d3">四色问题可谓是图论研究史上最著名也是产生成果最多的问题之一：是否任何一幅画在平面上的地图都可以用四种颜色染色，使得任意两个相邻的区域不同色</data>
</edge>
<edge source="问题" target="类似地">
  <data key="d2">is_a</data>
  <data key="d3">一类相关的常见问题要求在给定图中寻找符合某些条件的最大子图，其中有很多是NP完全的，如： 类似地，有些问题要求寻找符合某些条件的最大导出子图，如： 平面图判定：判定给定的图是否是平面图（此问题与子图的关系，参见库拉托夫斯基定理） 一个尚未解决的与子图相关的猜想，重构猜想（Reconstruction conjecture）：一个n阶图是否能够由其所有n1阶导出子图唯一确定</data>
</edge>
<edge source="问题" target="法兰西斯古德里">
  <data key="d2">composed_of</data>
  <data key="d3">这一问题由法兰西斯古德里于1852年提出，而最早的文字记载则出现在德摩根于1852年写给哈密顿的一封信上</data>
</edge>
<edge source="问题" target="1852年">
  <data key="d2">composed_of</data>
  <data key="d3">这一问题由法兰西斯古德里于1852年提出，而最早的文字记载则出现在德摩根于1852年写给哈密顿的一封信上</data>
</edge>
<edge source="问题" target="法兰西斯">
  <data key="d2">composed_of</data>
  <data key="d3">这一问题由法兰西斯古德里于1852年提出，而最早的文字记载则出现在德摩根于1852年写给哈密顿的一封信上</data>
</edge>
<edge source="问题" target="古德里">
  <data key="d2">composed_of</data>
  <data key="d3">这一问题由法兰西斯古德里于1852年提出，而最早的文字记载则出现在德摩根于1852年写给哈密顿的一封信上</data>
</edge>
<edge source="问题" target="文字">
  <data key="d2">uses</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="问题" target="平面">
  <data key="d2">produces</data>
  <data key="d3">四色问题可谓是图论研究史上最著名也是产生成果最多的问题之一：是否任何一幅画在平面上的地图都可以用四种颜色染色，使得任意两个相邻的区域不同色</data>
</edge>
<edge source="问题" target="是否任何一幅画在平面上的地图都可以用四种颜色染色">
  <data key="d2">produces</data>
  <data key="d3">四色问题可谓是图论研究史上最著名也是产生成果最多的问题之一：是否任何一幅画在平面上的地图都可以用四种颜色染色，使得任意两个相邻的区域不同色</data>
</edge>
<edge source="问题" target="程式设计">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="问题" target="经验">
  <data key="d2">uses</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="问题" target="玩游戏">
  <data key="d2">uses</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="问题" target="游戏">
  <data key="d2">uses</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="问题" target="自动">
  <data key="d2">is_a</data>
  <data key="d3">Denning的说法，计算机科学的最根本问题是什么能够被有效地自动化</data>
</edge>
<edge source="问题" target="理论">
  <data key="d2">is_a</data>
  <data key="d3">问题，千禧年大奖难题之一，36是计算理论的一个开放问题</data>
</edge>
<edge source="问题" target="计算理论">
  <data key="d2">is_a</data>
  <data key="d3">问题，千禧年大奖难题之一，36是计算理论的一个开放问题</data>
</edge>
<edge source="问题" target="程式">
  <data key="d2">implements</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="问题" target="語言">
  <data key="d2">implements</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="问题" target="理論">
  <data key="d2">implements</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="句子" target="信息">
  <data key="d2">used_for</data>
  <data key="d3">2011年，Fader采用人工标注方式对1000个句子中的实体关系三元组进行标注，并作为训练集得到逻辑斯蒂回归模型，用于对REVERB系统的信息抽取结果计算置信度</data>
</edge>
<edge source="句子" target="结果">
  <data key="d2">used_for</data>
  <data key="d3">2011年，Fader采用人工标注方式对1000个句子中的实体关系三元组进行标注，并作为训练集得到逻辑斯蒂回归模型，用于对REVERB系统的信息抽取结果计算置信度</data>
</edge>
<edge source="句子" target="系统">
  <data key="d2">used_for</data>
  <data key="d3">2011年，Fader采用人工标注方式对1000个句子中的实体关系三元组进行标注，并作为训练集得到逻辑斯蒂回归模型，用于对REVERB系统的信息抽取结果计算置信度</data>
</edge>
<edge source="句子" target="置信度">
  <data key="d2">used_for</data>
  <data key="d3">2011年，Fader采用人工标注方式对1000个句子中的实体关系三元组进行标注，并作为训练集得到逻辑斯蒂回归模型，用于对REVERB系统的信息抽取结果计算置信度</data>
</edge>
<edge source="训练" target="信息">
  <data key="d2">used_for</data>
  <data key="d3">2011年，Fader采用人工标注方式对1000个句子中的实体关系三元组进行标注，并作为训练集得到逻辑斯蒂回归模型，用于对REVERB系统的信息抽取结果计算置信度</data>
</edge>
<edge source="训练" target="结果">
  <data key="d2">used_for</data>
  <data key="d3">2011年，Fader采用人工标注方式对1000个句子中的实体关系三元组进行标注，并作为训练集得到逻辑斯蒂回归模型，用于对REVERB系统的信息抽取结果计算置信度</data>
</edge>
<edge source="训练" target="系统">
  <data key="d2">used_for</data>
  <data key="d3">2011年，Fader采用人工标注方式对1000个句子中的实体关系三元组进行标注，并作为训练集得到逻辑斯蒂回归模型，用于对REVERB系统的信息抽取结果计算置信度</data>
</edge>
<edge source="训练" target="置信度">
  <data key="d2">used_for</data>
  <data key="d3">2011年，Fader采用人工标注方式对1000个句子中的实体关系三元组进行标注，并作为训练集得到逻辑斯蒂回归模型，用于对REVERB系统的信息抽取结果计算置信度</data>
</edge>
<edge source="训练" target="理论">
  <data key="d2">is_a</data>
  <data key="d3">的计算机科学课程则主要侧重于训练高级编程，而不是算法和计算理论</data>
</edge>
<edge source="训练" target="算法">
  <data key="d2">is_a</data>
  <data key="d3">的计算机科学课程则主要侧重于训练高级编程，而不是算法和计算理论</data>
</edge>
<edge source="训练" target="计算理论">
  <data key="d2">is_a</data>
  <data key="d3">的计算机科学课程则主要侧重于训练高级编程，而不是算法和计算理论</data>
</edge>
<edge source="斯蒂" target="信息">
  <data key="d2">used_for</data>
  <data key="d3">2011年，Fader采用人工标注方式对1000个句子中的实体关系三元组进行标注，并作为训练集得到逻辑斯蒂回归模型，用于对REVERB系统的信息抽取结果计算置信度</data>
</edge>
<edge source="斯蒂" target="结果">
  <data key="d2">used_for</data>
  <data key="d3">2011年，Fader采用人工标注方式对1000个句子中的实体关系三元组进行标注，并作为训练集得到逻辑斯蒂回归模型，用于对REVERB系统的信息抽取结果计算置信度</data>
</edge>
<edge source="斯蒂" target="系统">
  <data key="d2">used_for</data>
  <data key="d3">2011年，Fader采用人工标注方式对1000个句子中的实体关系三元组进行标注，并作为训练集得到逻辑斯蒂回归模型，用于对REVERB系统的信息抽取结果计算置信度</data>
</edge>
<edge source="斯蒂" target="置信度">
  <data key="d2">used_for</data>
  <data key="d3">2011年，Fader采用人工标注方式对1000个句子中的实体关系三元组进行标注，并作为训练集得到逻辑斯蒂回归模型，用于对REVERB系统的信息抽取结果计算置信度</data>
</edge>
<edge source="系统" target="问题">
  <data key="d2">is_a</data>
  <data key="d3">在Unicode和本地编码之间转换要求理解本地编码，这对于现存系统要一起传输各种编码的字符串而又没有实际标记出它们用了什么编码就是个问题</data>
</edge>
<edge source="系统" target="计算机科学">
  <data key="d2">is_a</data>
  <data key="d3">"）设计部署计算机和计算机系统通常被认为是非计算机科学学科的领域</data>
</edge>
<edge source="系统" target="学科">
  <data key="d2">implements</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="系统" target="领域">
  <data key="d2">is_a</data>
  <data key="d3">"）设计部署计算机和计算机系统通常被认为是非计算机科学学科的领域</data>
</edge>
<edge source="系统" target="科学">
  <data key="d2">is_a</data>
  <data key="d3">"）设计部署计算机和计算机系统通常被认为是非计算机科学学科的领域</data>
</edge>
<edge source="系统" target="第一">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="系统" target="信息">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="系统" target="理论">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="系统" target="计算机">
  <data key="d2">extends</data>
  <data key="d3">分布式系统将并发性的思想扩展到了多台由网络连接的计算机</data>
</edge>
<edge source="系统" target="科学家">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="系统" target="理论家">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="系统" target="设计">
  <data key="d2">is_a</data>
  <data key="d3">计算机系统结构，或者数字计算机组织，是一个计算机系统的概念设计和根本运作结构</data>
</edge>
<edge source="系统" target="概念">
  <data key="d2">is_a</data>
  <data key="d3">计算机系统结构，或者数字计算机组织，是一个计算机系统的概念设计和根本运作结构</data>
</edge>
<edge source="系统" target="概念设计">
  <data key="d2">is_a</data>
  <data key="d3">计算机系统结构，或者数字计算机组织，是一个计算机系统的概念设计和根本运作结构</data>
</edge>
<edge source="系统" target="运作">
  <data key="d2">is_a</data>
  <data key="d3">计算机系统结构，或者数字计算机组织，是一个计算机系统的概念设计和根本运作结构</data>
</edge>
<edge source="系统" target="程式">
  <data key="d2">is_a</data>
  <data key="d3">操作系统是管理电脑硬件与软件资源的电脑程式，同时也是电脑系统的核心与基石</data>
</edge>
<edge source="系统" target="软件">
  <data key="d2">is_a</data>
  <data key="d3">操作系统是管理电脑硬件与软件资源的电脑程式，同时也是电脑系统的核心与基石</data>
</edge>
<edge source="系统" target="电脑">
  <data key="d2">uses</data>
  <data key="d3">作业系统也提供一个让使用者与各电脑设备互动的操作介面</data>
</edge>
<edge source="系统" target="硬件">
  <data key="d2">is_a</data>
  <data key="d3">操作系统是管理电脑硬件与软件资源的电脑程式，同时也是电脑系统的核心与基石</data>
</edge>
<edge source="系统" target="资源">
  <data key="d2">is_a</data>
  <data key="d3">操作系统是管理电脑硬件与软件资源的电脑程式，同时也是电脑系统的核心与基石</data>
</edge>
<edge source="系统" target="管理">
  <data key="d2">is_a</data>
  <data key="d3">操作系统是管理电脑硬件与软件资源的电脑程式，同时也是电脑系统的核心与基石</data>
</edge>
<edge source="系统" target="电脑程式">
  <data key="d2">is_a</data>
  <data key="d3">操作系统是管理电脑硬件与软件资源的电脑程式，同时也是电脑系统的核心与基石</data>
</edge>
<edge source="系统" target="网络">
  <data key="d2">extends</data>
  <data key="d3">分布式系统将并发性的思想扩展到了多台由网络连接的计算机</data>
</edge>
<edge source="系统" target="网络连接">
  <data key="d2">extends</data>
  <data key="d3">分布式系统将并发性的思想扩展到了多台由网络连接的计算机</data>
</edge>
<edge source="系统" target="实用技术">
  <data key="d2">implements</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="系统" target="技术">
  <data key="d2">implements</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="系统" target="使用者">
  <data key="d2">uses</data>
  <data key="d3">作业系统也提供一个让使用者与各电脑设备互动的操作介面</data>
</edge>
<edge source="系统" target="电脑设备">
  <data key="d2">uses</data>
  <data key="d3">作业系统也提供一个让使用者与各电脑设备互动的操作介面</data>
</edge>
<edge source="系统" target="介面">
  <data key="d2">uses</data>
  <data key="d3">作业系统也提供一个让使用者与各电脑设备互动的操作介面</data>
</edge>
<edge source="方法" target="英语">
  <data key="d2">is_a</data>
  <data key="d3">图论中概率方法的引入，尤其是埃尔德什和Alfréd Rényi（英语：Alfréd Rényi）关于随机图连通的渐进概率的研究使得图论产生了新的分支随机图论</data>
</edge>
<edge source="方法" target="埃尔德什">
  <data key="d2">is_a</data>
  <data key="d3">图论中概率方法的引入，尤其是埃尔德什和Alfréd Rényi（英语：Alfréd Rényi）关于随机图连通的渐进概率的研究使得图论产生了新的分支随机图论</data>
</edge>
<edge source="方法" target="Alfréd Rényi">
  <data key="d2">is_a</data>
  <data key="d3">图论中概率方法的引入，尤其是埃尔德什和Alfréd Rényi（英语：Alfréd Rényi）关于随机图连通的渐进概率的研究使得图论产生了新的分支随机图论</data>
</edge>
<edge source="方法" target="埃尔德">
  <data key="d2">is_a</data>
  <data key="d3">图论中概率方法的引入，尤其是埃尔德什和Alfréd Rényi（英语：Alfréd Rényi）关于随机图连通的渐进概率的研究使得图论产生了新的分支随机图论</data>
</edge>
<edge source="方法" target="什和">
  <data key="d2">is_a</data>
  <data key="d3">图论中概率方法的引入，尤其是埃尔德什和Alfréd Rényi（英语：Alfréd Rényi）关于随机图连通的渐进概率的研究使得图论产生了新的分支随机图论</data>
</edge>
<edge source="方法" target="英语：Alfréd Rényi">
  <data key="d2">is_a</data>
  <data key="d3">图论中概率方法的引入，尤其是埃尔德什和Alfréd Rényi（英语：Alfréd Rényi）关于随机图连通的渐进概率的研究使得图论产生了新的分支随机图论</data>
</edge>
<edge source="方法" target="分支">
  <data key="d2">produces</data>
  <data key="d3">图论中概率方法的引入，尤其是埃尔德什和Alfréd Rényi（英语：Alfréd Rényi）关于随机图连通的渐进概率的研究使得图论产生了新的分支随机图论</data>
</edge>
<edge source="方法" target="产生">
  <data key="d2">produces</data>
  <data key="d3">图论中概率方法的引入，尤其是埃尔德什和Alfréd Rényi（英语：Alfréd Rényi）关于随机图连通的渐进概率的研究使得图论产生了新的分支随机图论</data>
</edge>
<edge source="方法" target="道路">
  <data key="d2">uses</data>
  <data key="d3">1860年之1930年间，若当库拉托夫斯基和惠特尼从之前独立于图论发展的拓扑学中吸取大量内容进入图论，而现代代数方法的使用更让图论与拓扑走上共同发展的道路</data>
</edge>
<edge source="方法" target="智能">
  <data key="d2">supports</data>
  <data key="d3">更早之前，语义链网络（Semantic Link Network）已经开始了系统性的研究，目标是创立一个自组织的语义互联方法来表达知识支持智能应用, 系统性的理论和方法作为专著发表于2004年</data>
</edge>
<edge source="方法" target="理论">
  <data key="d2">is_a</data>
  <data key="d3">对于形式化方法的最佳形容是各种理论计算机科学基础种类的应用，特别是计算机逻辑演算，形式语言，自动机理论和形式语义学，此外还有类型系统代数数据类型，以及软件和硬件规范和验证中的一些问题</data>
</edge>
<edge source="方法" target="专著">
  <data key="d2">supports</data>
  <data key="d3">更早之前，语义链网络（Semantic Link Network）已经开始了系统性的研究，目标是创立一个自组织的语义互联方法来表达知识支持智能应用, 系统性的理论和方法作为专著发表于2004年</data>
</edge>
<edge source="方法" target="系统">
  <data key="d2">based_on</data>
  <data key="d3">形式化方法是一种特别的基于数学的技术，用于软件和硬件系统的形式规范开发以及驗證</data>
</edge>
<edge source="方法" target="软件">
  <data key="d2">based_on</data>
  <data key="d3">形式化方法是一种特别的基于数学的技术，用于软件和硬件系统的形式规范开发以及驗證</data>
</edge>
<edge source="方法" target="数学">
  <data key="d2">uses</data>
  <data key="d3">在软件和硬件设计方面，形式化方法的使用动机，如同其它工程学科，是通过适当的数学分析便有助于设计的可靠性和健壮性的期望</data>
</edge>
<edge source="方法" target="技术">
  <data key="d2">based_on</data>
  <data key="d3">形式化方法是一种特别的基于数学的技术，用于软件和硬件系统的形式规范开发以及驗證</data>
</edge>
<edge source="方法" target="硬件">
  <data key="d2">based_on</data>
  <data key="d3">形式化方法是一种特别的基于数学的技术，用于软件和硬件系统的形式规范开发以及驗證</data>
</edge>
<edge source="方法" target="分析">
  <data key="d2">uses</data>
  <data key="d3">在软件和硬件设计方面，形式化方法的使用动机，如同其它工程学科，是通过适当的数学分析便有助于设计的可靠性和健壮性的期望</data>
</edge>
<edge source="方法" target="可靠性">
  <data key="d2">used_for</data>
  <data key="d3">但是，使用形式化方法会带来很高的成本，意味着它们通常只用于高可靠性系统，这种系统中安全或保安（security）是最重要的</data>
</edge>
<edge source="方法" target="健壮性">
  <data key="d2">is_a</data>
  <data key="d3">在软件和硬件设计方面，形式化方法的使用动机，如同其它工程学科，是通过适当的数学分析便有助于设计的可靠性和健壮性的期望</data>
</edge>
<edge source="方法" target="计算机科学">
  <data key="d2">is_a</data>
  <data key="d3">对于形式化方法的最佳形容是各种理论计算机科学基础种类的应用，特别是计算机逻辑演算，形式语言，自动机理论和形式语义学，此外还有类型系统代数数据类型，以及软件和硬件规范和验证中的一些问题</data>
</edge>
<edge source="方法" target="基础">
  <data key="d2">is_a</data>
  <data key="d3">对于形式化方法的最佳形容是各种理论计算机科学基础种类的应用，特别是计算机逻辑演算，形式语言，自动机理论和形式语义学，此外还有类型系统代数数据类型，以及软件和硬件规范和验证中的一些问题</data>
</edge>
<edge source="方法" target="计算机">
  <data key="d2">is_a</data>
  <data key="d3">对于形式化方法的最佳形容是各种理论计算机科学基础种类的应用，特别是计算机逻辑演算，形式语言，自动机理论和形式语义学，此外还有类型系统代数数据类型，以及软件和硬件规范和验证中的一些问题</data>
</edge>
<edge source="方法" target="科学">
  <data key="d2">is_a</data>
  <data key="d3">对于形式化方法的最佳形容是各种理论计算机科学基础种类的应用，特别是计算机逻辑演算，形式语言，自动机理论和形式语义学，此外还有类型系统代数数据类型，以及软件和硬件规范和验证中的一些问题</data>
</edge>
<edge source="方法" target="种类">
  <data key="d2">is_a</data>
  <data key="d3">对于形式化方法的最佳形容是各种理论计算机科学基础种类的应用，特别是计算机逻辑演算，形式语言，自动机理论和形式语义学，此外还有类型系统代数数据类型，以及软件和硬件规范和验证中的一些问题</data>
</edge>
<edge source="方法" target="规范">
  <data key="d2">based_on</data>
  <data key="d3">形式化方法是一种特别的基于数学的技术，用于软件和硬件系统的形式规范开发以及驗證</data>
</edge>
<edge source="方法" target="高可靠性">
  <data key="d2">used_for</data>
  <data key="d3">但是，使用形式化方法会带来很高的成本，意味着它们通常只用于高可靠性系统，这种系统中安全或保安（security）是最重要的</data>
</edge>
<edge source="方法" target="保安">
  <data key="d2">used_for</data>
  <data key="d3">但是，使用形式化方法会带来很高的成本，意味着它们通常只用于高可靠性系统，这种系统中安全或保安（security）是最重要的</data>
</edge>
<edge source="方法" target="security">
  <data key="d2">used_for</data>
  <data key="d3">但是，使用形式化方法会带来很高的成本，意味着它们通常只用于高可靠性系统，这种系统中安全或保安（security）是最重要的</data>
</edge>
<edge source="方法" target="学科">
  <data key="d2">uses</data>
  <data key="d3">在软件和硬件设计方面，形式化方法的使用动机，如同其它工程学科，是通过适当的数学分析便有助于设计的可靠性和健壮性的期望</data>
</edge>
<edge source="方法" target="工程">
  <data key="d2">uses</data>
  <data key="d3">在软件和硬件设计方面，形式化方法的使用动机，如同其它工程学科，是通过适当的数学分析便有助于设计的可靠性和健壮性的期望</data>
</edge>
<edge source="方法" target="工程学">
  <data key="d2">uses</data>
  <data key="d3">在软件和硬件设计方面，形式化方法的使用动机，如同其它工程学科，是通过适当的数学分析便有助于设计的可靠性和健壮性的期望</data>
</edge>
<edge source="方法" target="动机">
  <data key="d2">uses</data>
  <data key="d3">在软件和硬件设计方面，形式化方法的使用动机，如同其它工程学科，是通过适当的数学分析便有助于设计的可靠性和健壮性的期望</data>
</edge>
<edge source="标准" target="加工">
  <data key="d2">is_a</data>
  <data key="d3">本体构建中的聚类问题质量评估的标准和指标的建立和知识推理的技术思维限制，都是知识加工的重要难点</data>
</edge>
<edge source="指标" target="加工">
  <data key="d2">is_a</data>
  <data key="d3">本体构建中的聚类问题质量评估的标准和指标的建立和知识推理的技术思维限制，都是知识加工的重要难点</data>
</edge>
<edge source="思维" target="加工">
  <data key="d2">is_a</data>
  <data key="d3">本体构建中的聚类问题质量评估的标准和指标的建立和知识推理的技术思维限制，都是知识加工的重要难点</data>
</edge>
<edge source="Knowledge Graph）" target="结构化">
  <data key="d2">is_a</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="Knowledge Graph）" target="语义">
  <data key="d2">is_a</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="Knowledge Graph）" target="知识库">
  <data key="d2">is_a</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="Knowledge Graph）" target="符号">
  <data key="d2">used_for</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="Knowledge Graph）" target="形式">
  <data key="d2">used_for</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="Knowledge Graph）" target="物理">
  <data key="d2">used_for</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="Knowledge Graph）" target="结构">
  <data key="d2">is_a</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="Knowledge Graph）" target="世界">
  <data key="d2">used_for</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="Knowledge Graph）" target="概念">
  <data key="d2">used_for</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="Knowledge Graph）" target="关系">
  <data key="d2">used_for</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="英語：Knowledge Graph" target="结构化">
  <data key="d2">is_a</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="英語：Knowledge Graph" target="语义">
  <data key="d2">is_a</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="英語：Knowledge Graph" target="知识库">
  <data key="d2">is_a</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="英語：Knowledge Graph" target="符号">
  <data key="d2">used_for</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="英語：Knowledge Graph" target="形式">
  <data key="d2">used_for</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="英語：Knowledge Graph" target="物理">
  <data key="d2">used_for</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="英語：Knowledge Graph" target="结构">
  <data key="d2">is_a</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="英語：Knowledge Graph" target="世界">
  <data key="d2">used_for</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="英語：Knowledge Graph" target="概念">
  <data key="d2">used_for</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="英語：Knowledge Graph" target="关系">
  <data key="d2">used_for</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="E, R, S" target="知识库">
  <data key="d2">is_a</data>
  <data key="d3">3 三元组是知识图谱的一种通用表示方式，即 G （E, R, S)，其中 E 是知识库中的实体，R 是知识库中的关系，S 代表知识库中的三元组</data>
</edge>
<edge source="E, R, S" target="关系">
  <data key="d2">is_a</data>
  <data key="d3">3 三元组是知识图谱的一种通用表示方式，即 G （E, R, S)，其中 E 是知识库中的实体，R 是知识库中的关系，S 代表知识库中的三元组</data>
</edge>
<edge source="E, R, S" target="实体">
  <data key="d2">is_a</data>
  <data key="d3">3 三元组是知识图谱的一种通用表示方式，即 G （E, R, S)，其中 E 是知识库中的实体，R 是知识库中的关系，S 代表知识库中的三元组</data>
</edge>
<edge source="fact" target="关系">
  <data key="d2">is_a</data>
  <data key="d3">数据层是以事实（fact）为存储单位的图数据库，其事实的基础表达方式就是实体关系实体或者实体属性属性值</data>
</edge>
<edge source="fact" target="实体">
  <data key="d2">is_a</data>
  <data key="d3">数据层是以事实（fact）为存储单位的图数据库，其事实的基础表达方式就是实体关系实体或者实体属性属性值</data>
</edge>
<edge source="fact" target="属性">
  <data key="d2">is_a</data>
  <data key="d3">数据层是以事实（fact）为存储单位的图数据库，其事实的基础表达方式就是实体关系实体或者实体属性属性值</data>
</edge>
<edge source="information extraction" target="第一">
  <data key="d2">is_a</data>
  <data key="d3">知识抽取（information extraction）是构建知识图谱的第一步，为了从异构数据源中获取候选知识单元，知识抽取技术将自动从半结构化和无结构数据中抽取实体关系以及实体属性等结构化信息</data>
</edge>
<edge source="information extraction" target="图谱">
  <data key="d2">is_a</data>
  <data key="d3">知识抽取（information extraction）是构建知识图谱的第一步，为了从异构数据源中获取候选知识单元，知识抽取技术将自动从半结构化和无结构数据中抽取实体关系以及实体属性等结构化信息</data>
</edge>
<edge source="information extraction" target="数据">
  <data key="d2">is_a</data>
  <data key="d3">知识抽取（information extraction）是构建知识图谱的第一步，为了从异构数据源中获取候选知识单元，知识抽取技术将自动从半结构化和无结构数据中抽取实体关系以及实体属性等结构化信息</data>
</edge>
<edge source="information extraction" target="数据源">
  <data key="d2">is_a</data>
  <data key="d3">知识抽取（information extraction）是构建知识图谱的第一步，为了从异构数据源中获取候选知识单元，知识抽取技术将自动从半结构化和无结构数据中抽取实体关系以及实体属性等结构化信息</data>
</edge>
<edge source="information extraction" target="异构">
  <data key="d2">is_a</data>
  <data key="d3">知识抽取（information extraction）是构建知识图谱的第一步，为了从异构数据源中获取候选知识单元，知识抽取技术将自动从半结构化和无结构数据中抽取实体关系以及实体属性等结构化信息</data>
</edge>
<edge source="information extraction" target="知识图谱">
  <data key="d2">is_a</data>
  <data key="d3">知识抽取（information extraction）是构建知识图谱的第一步，为了从异构数据源中获取候选知识单元，知识抽取技术将自动从半结构化和无结构数据中抽取实体关系以及实体属性等结构化信息</data>
</edge>
<edge source="named entity recognition，NER" target="基础">
  <data key="d2">is_a</data>
  <data key="d3">6 实体抽取 实体抽取，也称为命名实体识别（named entity recognition，NER），指从源数据中自动识别命名实体，这一步是信息抽取中最基础和关键的部分，因为实体抽取的准确率和召回率对后续知识获取效率和质量影响很大</data>
</edge>
<edge source="named entity recognition，NER" target="部分">
  <data key="d2">is_a</data>
  <data key="d3">6 实体抽取 实体抽取，也称为命名实体识别（named entity recognition，NER），指从源数据中自动识别命名实体，这一步是信息抽取中最基础和关键的部分，因为实体抽取的准确率和召回率对后续知识获取效率和质量影响很大</data>
</edge>
<edge source="named entity recognition，NER" target="信息">
  <data key="d2">is_a</data>
  <data key="d3">6 实体抽取 实体抽取，也称为命名实体识别（named entity recognition，NER），指从源数据中自动识别命名实体，这一步是信息抽取中最基础和关键的部分，因为实体抽取的准确率和召回率对后续知识获取效率和质量影响很大</data>
</edge>
<edge source="named entity recognition，NER" target="关键">
  <data key="d2">is_a</data>
  <data key="d3">6 实体抽取 实体抽取，也称为命名实体识别（named entity recognition，NER），指从源数据中自动识别命名实体，这一步是信息抽取中最基础和关键的部分，因为实体抽取的准确率和召回率对后续知识获取效率和质量影响很大</data>
</edge>
<edge source="named entity recognition，NER" target="影响">
  <data key="d2">affects</data>
  <data key="d3">6 实体抽取 实体抽取，也称为命名实体识别（named entity recognition，NER），指从源数据中自动识别命名实体，这一步是信息抽取中最基础和关键的部分，因为实体抽取的准确率和召回率对后续知识获取效率和质量影响很大</data>
</edge>
<edge source="知识图谱" target="结构化">
  <data key="d2">is_a</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="知识图谱" target="语义">
  <data key="d2">uses</data>
  <data key="d3">Google知识图谱（英語：Google Knowledge Graph，也称Google知识图）是Google的一个知识库，其使用语义检索从多种来源收集信息，以提高Google搜索的质量</data>
</edge>
<edge source="知识图谱" target="知识库">
  <data key="d2">defined_as</data>
  <data key="d3">知识图谱的概念最早由谷歌2012年5月17日提出，其将知识图谱定义为用于增强搜索引擎功能的辅助知识库</data>
</edge>
<edge source="知识图谱" target="符号">
  <data key="d2">used_for</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="知识图谱" target="形式">
  <data key="d2">used_for</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="知识图谱" target="物理">
  <data key="d2">used_for</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="知识图谱" target="结构">
  <data key="d2">is_a</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="知识图谱" target="字符串">
  <data key="d2">supports</data>
  <data key="d3">知识图谱可以实现Web从网页链接向概念链接转变，支持用户按主题而不是字符串检索，真正实现语义检索</data>
</edge>
<edge source="知识图谱" target="检索">
  <data key="d2">uses</data>
  <data key="d3">Google知识图谱（英語：Google Knowledge Graph，也称Google知识图）是Google的一个知识库，其使用语义检索从多种来源收集信息，以提高Google搜索的质量</data>
</edge>
<edge source="知识图谱" target="數據">
  <data key="d2">is_a</data>
  <data key="d3">1 在知识表示中，知识图谱是一種知识库，其中的數據通過图结构的数据模型或拓扑整合而成</data>
</edge>
<edge source="知识图谱" target="数据模型">
  <data key="d2">is_a</data>
  <data key="d3">1 在知识表示中，知识图谱是一種知识库，其中的數據通過图结构的数据模型或拓扑整合而成</data>
</edge>
<edge source="知识图谱" target="数据">
  <data key="d2">is_a</data>
  <data key="d3">1 在知识表示中，知识图谱是一種知识库，其中的數據通過图结构的数据模型或拓扑整合而成</data>
</edge>
<edge source="知识图谱" target="模型">
  <data key="d2">is_a</data>
  <data key="d3">1 在知识表示中，知识图谱是一種知识库，其中的數據通過图结构的数据模型或拓扑整合而成</data>
</edge>
<edge source="知识图谱" target="关系">
  <data key="d2">used_for</data>
  <data key="d3">知识图谱（英語：Knowledge Graph），是结构化的语义知识库，用于以符号形式描述物理世界中的概念及其相互关系</data>
</edge>
<edge source="知识图谱" target="实体">
  <data key="d2">is_a</data>
  <data key="d3">3 三元组是知识图谱的一种通用表示方式，即 G （E, R, S)，其中 E 是知识库中的实体，R 是知识库中的关系，S 代表知识库中的三元组</data>
</edge>
<edge source="知识图谱" target="方式">
  <data key="d2">is_a</data>
  <data key="d3">现阶段知识图谱大多为公开采集数据并自动抽取资源，经过人工审核后加入到知识库中，这种则是自底向上的构建方式</data>
</edge>
<edge source="知识图谱" target="谷歌">
  <data key="d2">composed_of</data>
  <data key="d3">知识图谱的概念最早由谷歌2012年5月17日提出，其将知识图谱定义为用于增强搜索引擎功能的辅助知识库</data>
</edge>
<edge source="知识图谱" target="2012年5月17日">
  <data key="d2">composed_of</data>
  <data key="d3">知识图谱的概念最早由谷歌2012年5月17日提出，其将知识图谱定义为用于增强搜索引擎功能的辅助知识库</data>
</edge>
<edge source="知识图谱" target="12">
  <data key="d2">composed_of</data>
  <data key="d3">知识图谱的概念最早由谷歌2012年5月17日提出，其将知识图谱定义为用于增强搜索引擎功能的辅助知识库</data>
</edge>
<edge source="知识图谱" target="世界">
  <data key="d2">includes</data>
  <data key="d3">2 据Google称，知识图谱的信息来自许多来源，包括CIA的世界概况，Freebase和维基百科1</data>
</edge>
<edge source="知识图谱" target="概念">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="知识图谱" target="搜索引擎">
  <data key="d2">defined_as</data>
  <data key="d3">知识图谱的概念最早由谷歌2012年5月17日提出，其将知识图谱定义为用于增强搜索引擎功能的辅助知识库</data>
</edge>
<edge source="知识图谱" target="功能">
  <data key="d2">defined_as</data>
  <data key="d3">知识图谱的概念最早由谷歌2012年5月17日提出，其将知识图谱定义为用于增强搜索引擎功能的辅助知识库</data>
</edge>
<edge source="知识图谱" target="辅助">
  <data key="d2">defined_as</data>
  <data key="d3">知识图谱的概念最早由谷歌2012年5月17日提出，其将知识图谱定义为用于增强搜索引擎功能的辅助知识库</data>
</edge>
<edge source="知识图谱" target="体系">
  <data key="d2">used_for</data>
  <data key="d3">在知识图谱中，本体位于模式层，用于描述概念层次体系的知识概念模版</data>
</edge>
<edge source="知识图谱" target="定义">
  <data key="d2">defined_as</data>
  <data key="d3">知识图谱的概念最早由谷歌2012年5月17日提出，其将知识图谱定义为用于增强搜索引擎功能的辅助知识库</data>
</edge>
<edge source="知识图谱" target="用户">
  <data key="d2">implements</data>
  <data key="d3">知识图谱可以实现Web从网页链接向概念链接转变，支持用户按主题而不是字符串检索，真正实现语义检索</data>
</edge>
<edge source="知识图谱" target="主题">
  <data key="d2">supports</data>
  <data key="d3">知识图谱可以实现Web从网页链接向概念链接转变，支持用户按主题而不是字符串检索，真正实现语义检索</data>
</edge>
<edge source="知识图谱" target="网页">
  <data key="d2">implements</data>
  <data key="d3">知识图谱可以实现Web从网页链接向概念链接转变，支持用户按主题而不是字符串检索，真正实现语义检索</data>
</edge>
<edge source="知识图谱" target="链接">
  <data key="d2">implements</data>
  <data key="d3">知识图谱可以实现Web从网页链接向概念链接转变，支持用户按主题而不是字符串检索，真正实现语义检索</data>
</edge>
<edge source="知识图谱" target="绘制">
  <data key="d2">used_for</data>
  <data key="d3">科学知识图谱也称为知识域可视化（Mapping Knowledge Domains），是用于绘制分析和显示学科或学术研究主体之间的相互联系，用于揭示显示科学知识发展进程与结构关系的可视化工具1</data>
</edge>
<edge source="知识图谱" target="分析">
  <data key="d2">used_for</data>
  <data key="d3">科学知识图谱也称为知识域可视化（Mapping Knowledge Domains），是用于绘制分析和显示学科或学术研究主体之间的相互联系，用于揭示显示科学知识发展进程与结构关系的可视化工具1</data>
</edge>
<edge source="知识图谱" target="学科">
  <data key="d2">used_for</data>
  <data key="d3">科学知识图谱也称为知识域可视化（Mapping Knowledge Domains），是用于绘制分析和显示学科或学术研究主体之间的相互联系，用于揭示显示科学知识发展进程与结构关系的可视化工具1</data>
</edge>
<edge source="知识图谱" target="学术研究">
  <data key="d2">used_for</data>
  <data key="d3">科学知识图谱也称为知识域可视化（Mapping Knowledge Domains），是用于绘制分析和显示学科或学术研究主体之间的相互联系，用于揭示显示科学知识发展进程与结构关系的可视化工具1</data>
</edge>
<edge source="知识图谱" target="主体">
  <data key="d2">used_for</data>
  <data key="d3">科学知识图谱也称为知识域可视化（Mapping Knowledge Domains），是用于绘制分析和显示学科或学术研究主体之间的相互联系，用于揭示显示科学知识发展进程与结构关系的可视化工具1</data>
</edge>
<edge source="知识图谱" target="学术">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="知识图谱" target="可视化">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="知识图谱" target="图书">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="知识图谱" target="情报学">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="知识图谱" target="领域">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="知识图谱" target="侧重于">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="知识图谱" target="节点">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="知识图谱" target="代表">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="知识图谱" target="作者">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="知识图谱" target="机构">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="知识图谱" target="文献">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="知识图谱" target="关键词">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="知识图谱" target="万维网">
  <data key="d2">is_a</data>
  <data key="d3">56 在谷歌于2012年发布知识图谱之前，Tim BernersLee于2006年就提出了Linked Data，是一种万维网数据上创建语义关联的方法</data>
</edge>
<edge source="知识图谱" target="关联">
  <data key="d2">is_a</data>
  <data key="d3">56 在谷歌于2012年发布知识图谱之前，Tim BernersLee于2006年就提出了Linked Data，是一种万维网数据上创建语义关联的方法</data>
</edge>
<edge source="知识图谱" target="方法">
  <data key="d2">is_a</data>
  <data key="d3">56 在谷歌于2012年发布知识图谱之前，Tim BernersLee于2006年就提出了Linked Data，是一种万维网数据上创建语义关联的方法</data>
</edge>
<edge source="知识图谱" target="列表">
  <data key="d2">is_a</data>
  <data key="d3">Google的约翰娜怀特解释说，搜索引擎使用知识图谱的数据产生的结果：知识图谱知道，圣克鲁斯是一个地方，且此列表与圣克鲁斯有关</data>
</edge>
<edge source="知识图谱" target="地方">
  <data key="d2">produces</data>
  <data key="d3">Google的约翰娜怀特解释说，搜索引擎使用知识图谱的数据产生的结果：知识图谱知道，圣克鲁斯是一个地方，且此列表与圣克鲁斯有关</data>
</edge>
<edge source="知识图谱" target="有关">
  <data key="d2">is_a</data>
  <data key="d3">Google的约翰娜怀特解释说，搜索引擎使用知识图谱的数据产生的结果：知识图谱知道，圣克鲁斯是一个地方，且此列表与圣克鲁斯有关</data>
</edge>
<edge source="知识图谱" target="Freebase">
  <data key="d2">includes</data>
  <data key="d3">2 据Google称，知识图谱的信息来自许多来源，包括CIA的世界概况，Freebase和维基百科1</data>
</edge>
<edge source="知识图谱" target="百科1">
  <data key="d2">includes</data>
  <data key="d3">2 据Google称，知识图谱的信息来自许多来源，包括CIA的世界概况，Freebase和维基百科1</data>
</edge>
<edge source="知识图谱" target="概况">
  <data key="d2">includes</data>
  <data key="d3">2 据Google称，知识图谱的信息来自许多来源，包括CIA的世界概况，Freebase和维基百科1</data>
</edge>
<edge source="知识图谱" target="维基百科">
  <data key="d2">includes</data>
  <data key="d3">2 据Google称，知识图谱的信息来自许多来源，包括CIA的世界概况，Freebase和维基百科1</data>
</edge>
<edge source="知识图谱" target="圣克鲁斯">
  <data key="d2">produces</data>
  <data key="d3">Google的约翰娜怀特解释说，搜索引擎使用知识图谱的数据产生的结果：知识图谱知道，圣克鲁斯是一个地方，且此列表与圣克鲁斯有关</data>
</edge>
<edge source="知识图谱" target="结果">
  <data key="d2">produces</data>
  <data key="d3">Google的约翰娜怀特解释说，搜索引擎使用知识图谱的数据产生的结果：知识图谱知道，圣克鲁斯是一个地方，且此列表与圣克鲁斯有关</data>
</edge>
<edge source="知识图谱" target="产生">
  <data key="d2">produces</data>
  <data key="d3">Google的约翰娜怀特解释说，搜索引擎使用知识图谱的数据产生的结果：知识图谱知道，圣克鲁斯是一个地方，且此列表与圣克鲁斯有关</data>
</edge>
<edge source="知识图谱" target="知识图谱知道">
  <data key="d2">produces</data>
  <data key="d3">Google的约翰娜怀特解释说，搜索引擎使用知识图谱的数据产生的结果：知识图谱知道，圣克鲁斯是一个地方，且此列表与圣克鲁斯有关</data>
</edge>
<edge source="知识图谱" target="来源">
  <data key="d2">uses</data>
  <data key="d3">Google知识图谱（英語：Google Knowledge Graph，也称Google知识图）是Google的一个知识库，其使用语义检索从多种来源收集信息，以提高Google搜索的质量</data>
</edge>
<edge source="知识图谱" target="信息">
  <data key="d2">uses</data>
  <data key="d3">Google知识图谱（英語：Google Knowledge Graph，也称Google知识图）是Google的一个知识库，其使用语义检索从多种来源收集信息，以提高Google搜索的质量</data>
</edge>
<edge source="语义网" target="570亿">
  <data key="d2">contains</data>
  <data key="d3">)update，其语义网络包含超过570亿个对象，超过18亿个介绍，这些不同的对象之间有链接关系，用来理解搜索关键词的含义</data>
</edge>
<edge source="语义网" target="18亿">
  <data key="d2">contains</data>
  <data key="d3">)update，其语义网络包含超过570亿个对象，超过18亿个介绍，这些不同的对象之间有链接关系，用来理解搜索关键词的含义</data>
</edge>
<edge source="语义网" target="对象">
  <data key="d2">contains</data>
  <data key="d3">)update，其语义网络包含超过570亿个对象，超过18亿个介绍，这些不同的对象之间有链接关系，用来理解搜索关键词的含义</data>
</edge>
<edge source="图数据库" target="关系">
  <data key="d2">is_a</data>
  <data key="d3">数据层是以事实（fact）为存储单位的图数据库，其事实的基础表达方式就是实体关系实体或者实体属性属性值</data>
</edge>
<edge source="图数据库" target="实体">
  <data key="d2">is_a</data>
  <data key="d3">数据层是以事实（fact）为存储单位的图数据库，其事实的基础表达方式就是实体关系实体或者实体属性属性值</data>
</edge>
<edge source="图数据库" target="属性">
  <data key="d2">is_a</data>
  <data key="d3">数据层是以事实（fact）为存储单位的图数据库，其事实的基础表达方式就是实体关系实体或者实体属性属性值</data>
</edge>
<edge source="推理" target="加工">
  <data key="d2">is_a</data>
  <data key="d3">本体构建中的聚类问题质量评估的标准和指标的建立和知识推理的技术思维限制，都是知识加工的重要难点</data>
</edge>
<edge source="推理" target="概念">
  <data key="d2">includes</data>
  <data key="d3">知识推理的对象除了实体关系，还包括实体的属性值本体概念层次关系等</data>
</edge>
<edge source="推理" target="属性">
  <data key="d2">includes</data>
  <data key="d3">知识推理的对象除了实体关系，还包括实体的属性值本体概念层次关系等</data>
</edge>
<edge source="推理" target="本体">
  <data key="d2">includes</data>
  <data key="d3">知识推理的对象除了实体关系，还包括实体的属性值本体概念层次关系等</data>
</edge>
<edge source="知识抽取" target="第一">
  <data key="d2">is_a</data>
  <data key="d3">知识抽取（information extraction）是构建知识图谱的第一步，为了从异构数据源中获取候选知识单元，知识抽取技术将自动从半结构化和无结构数据中抽取实体关系以及实体属性等结构化信息</data>
</edge>
<edge source="知识抽取" target="图谱">
  <data key="d2">is_a</data>
  <data key="d3">知识抽取（information extraction）是构建知识图谱的第一步，为了从异构数据源中获取候选知识单元，知识抽取技术将自动从半结构化和无结构数据中抽取实体关系以及实体属性等结构化信息</data>
</edge>
<edge source="知识抽取" target="数据">
  <data key="d2">is_a</data>
  <data key="d3">知识抽取（information extraction）是构建知识图谱的第一步，为了从异构数据源中获取候选知识单元，知识抽取技术将自动从半结构化和无结构数据中抽取实体关系以及实体属性等结构化信息</data>
</edge>
<edge source="知识抽取" target="数据源">
  <data key="d2">is_a</data>
  <data key="d3">知识抽取（information extraction）是构建知识图谱的第一步，为了从异构数据源中获取候选知识单元，知识抽取技术将自动从半结构化和无结构数据中抽取实体关系以及实体属性等结构化信息</data>
</edge>
<edge source="知识抽取" target="异构">
  <data key="d2">is_a</data>
  <data key="d3">知识抽取（information extraction）是构建知识图谱的第一步，为了从异构数据源中获取候选知识单元，知识抽取技术将自动从半结构化和无结构数据中抽取实体关系以及实体属性等结构化信息</data>
</edge>
<edge source="知识抽取" target="知识图谱">
  <data key="d2">is_a</data>
  <data key="d3">知识抽取（information extraction）是构建知识图谱的第一步，为了从异构数据源中获取候选知识单元，知识抽取技术将自动从半结构化和无结构数据中抽取实体关系以及实体属性等结构化信息</data>
</edge>
<edge source="知识表示" target="知识库">
  <data key="d2">is_a</data>
  <data key="d3">1 在知识表示中，知识图谱是一種知识库，其中的數據通過图结构的数据模型或拓扑整合而成</data>
</edge>
<edge source="知识表示" target="數據">
  <data key="d2">is_a</data>
  <data key="d3">1 在知识表示中，知识图谱是一種知识库，其中的數據通過图结构的数据模型或拓扑整合而成</data>
</edge>
<edge source="知识表示" target="结构">
  <data key="d2">is_a</data>
  <data key="d3">1 在知识表示中，知识图谱是一種知识库，其中的數據通過图结构的数据模型或拓扑整合而成</data>
</edge>
<edge source="知识表示" target="数据模型">
  <data key="d2">is_a</data>
  <data key="d3">1 在知识表示中，知识图谱是一種知识库，其中的數據通過图结构的数据模型或拓扑整合而成</data>
</edge>
<edge source="知识表示" target="数据">
  <data key="d2">is_a</data>
  <data key="d3">1 在知识表示中，知识图谱是一種知识库，其中的數據通過图结构的数据模型或拓扑整合而成</data>
</edge>
<edge source="知识表示" target="模型">
  <data key="d2">is_a</data>
  <data key="d3">1 在知识表示中，知识图谱是一種知识库，其中的數據通過图结构的数据模型或拓扑整合而成</data>
</edge>
<edge source="知识推理" target="加工">
  <data key="d2">is_a</data>
  <data key="d3">本体构建中的聚类问题质量评估的标准和指标的建立和知识推理的技术思维限制，都是知识加工的重要难点</data>
</edge>
<edge source="知识推理" target="概念">
  <data key="d2">includes</data>
  <data key="d3">知识推理的对象除了实体关系，还包括实体的属性值本体概念层次关系等</data>
</edge>
<edge source="知识推理" target="属性">
  <data key="d2">includes</data>
  <data key="d3">知识推理的对象除了实体关系，还包括实体的属性值本体概念层次关系等</data>
</edge>
<edge source="知识推理" target="本体">
  <data key="d2">includes</data>
  <data key="d3">知识推理的对象除了实体关系，还包括实体的属性值本体概念层次关系等</data>
</edge>
<edge source="实体识别" target="基础">
  <data key="d2">is_a</data>
  <data key="d3">6 实体抽取 实体抽取，也称为命名实体识别（named entity recognition，NER），指从源数据中自动识别命名实体，这一步是信息抽取中最基础和关键的部分，因为实体抽取的准确率和召回率对后续知识获取效率和质量影响很大</data>
</edge>
<edge source="实体识别" target="部分">
  <data key="d2">is_a</data>
  <data key="d3">6 实体抽取 实体抽取，也称为命名实体识别（named entity recognition，NER），指从源数据中自动识别命名实体，这一步是信息抽取中最基础和关键的部分，因为实体抽取的准确率和召回率对后续知识获取效率和质量影响很大</data>
</edge>
<edge source="实体识别" target="信息">
  <data key="d2">is_a</data>
  <data key="d3">6 实体抽取 实体抽取，也称为命名实体识别（named entity recognition，NER），指从源数据中自动识别命名实体，这一步是信息抽取中最基础和关键的部分，因为实体抽取的准确率和召回率对后续知识获取效率和质量影响很大</data>
</edge>
<edge source="实体识别" target="关键">
  <data key="d2">is_a</data>
  <data key="d3">6 实体抽取 实体抽取，也称为命名实体识别（named entity recognition，NER），指从源数据中自动识别命名实体，这一步是信息抽取中最基础和关键的部分，因为实体抽取的准确率和召回率对后续知识获取效率和质量影响很大</data>
</edge>
<edge source="实体识别" target="影响">
  <data key="d2">affects</data>
  <data key="d3">6 实体抽取 实体抽取，也称为命名实体识别（named entity recognition，NER），指从源数据中自动识别命名实体，这一步是信息抽取中最基础和关键的部分，因为实体抽取的准确率和召回率对后续知识获取效率和质量影响很大</data>
</edge>
<edge source="命名实体" target="基础">
  <data key="d2">is_a</data>
  <data key="d3">6 实体抽取 实体抽取，也称为命名实体识别（named entity recognition，NER），指从源数据中自动识别命名实体，这一步是信息抽取中最基础和关键的部分，因为实体抽取的准确率和召回率对后续知识获取效率和质量影响很大</data>
</edge>
<edge source="命名实体" target="部分">
  <data key="d2">is_a</data>
  <data key="d3">6 实体抽取 实体抽取，也称为命名实体识别（named entity recognition，NER），指从源数据中自动识别命名实体，这一步是信息抽取中最基础和关键的部分，因为实体抽取的准确率和召回率对后续知识获取效率和质量影响很大</data>
</edge>
<edge source="命名实体" target="信息">
  <data key="d2">is_a</data>
  <data key="d3">6 实体抽取 实体抽取，也称为命名实体识别（named entity recognition，NER），指从源数据中自动识别命名实体，这一步是信息抽取中最基础和关键的部分，因为实体抽取的准确率和召回率对后续知识获取效率和质量影响很大</data>
</edge>
<edge source="命名实体" target="关键">
  <data key="d2">is_a</data>
  <data key="d3">6 实体抽取 实体抽取，也称为命名实体识别（named entity recognition，NER），指从源数据中自动识别命名实体，这一步是信息抽取中最基础和关键的部分，因为实体抽取的准确率和召回率对后续知识获取效率和质量影响很大</data>
</edge>
<edge source="命名实体" target="影响">
  <data key="d2">affects</data>
  <data key="d3">6 实体抽取 实体抽取，也称为命名实体识别（named entity recognition，NER），指从源数据中自动识别命名实体，这一步是信息抽取中最基础和关键的部分，因为实体抽取的准确率和召回率对后续知识获取效率和质量影响很大</data>
</edge>
<edge source="关系抽取" target="命名">
  <data key="d2">is_a</data>
  <data key="d3">9 关系抽取 经过实体抽取, 知识库目前得到的仅是一系列离散的命名实体,</data>
</edge>
<edge source="关系抽取" target="命名实体">
  <data key="d2">is_a</data>
  <data key="d3">9 关系抽取 经过实体抽取, 知识库目前得到的仅是一系列离散的命名实体,</data>
</edge>
<edge source="语义网络" target="570亿">
  <data key="d2">contains</data>
  <data key="d3">)update，其语义网络包含超过570亿个对象，超过18亿个介绍，这些不同的对象之间有链接关系，用来理解搜索关键词的含义</data>
</edge>
<edge source="语义网络" target="18亿">
  <data key="d2">contains</data>
  <data key="d3">)update，其语义网络包含超过570亿个对象，超过18亿个介绍，这些不同的对象之间有链接关系，用来理解搜索关键词的含义</data>
</edge>
<edge source="语义网络" target="对象">
  <data key="d2">contains</data>
  <data key="d3">)update，其语义网络包含超过570亿个对象，超过18亿个介绍，这些不同的对象之间有链接关系，用来理解搜索关键词的含义</data>
</edge>
<edge source="知识获取" target="影响">
  <data key="d2">affects</data>
  <data key="d3">6 实体抽取 实体抽取，也称为命名实体识别（named entity recognition，NER），指从源数据中自动识别命名实体，这一步是信息抽取中最基础和关键的部分，因为实体抽取的准确率和召回率对后续知识获取效率和质量影响很大</data>
</edge>
<edge source="001" target="形式">
  <data key="d2">is_a</data>
  <data key="d3">例如，如果Σ  0, 1，则带有偶数个零的字符串的集合（ε, 1, 00, 11, 001, 010, 100, 111, 0000, 0011, 0101, 0110, 1001, 1010, 1100, 1111,）是在Σ上的形式语言</data>
</edge>
<edge source="001" target="语言">
  <data key="d2">is_a</data>
  <data key="d3">例如，如果Σ  0, 1，则带有偶数个零的字符串的集合（ε, 1, 00, 11, 001, 010, 100, 111, 0000, 0011, 0101, 0110, 1001, 1010, 1100, 1111,）是在Σ上的形式语言</data>
</edge>
<edge source="00" target="形式">
  <data key="d2">is_a</data>
  <data key="d3">例如，如果Σ  0, 1，则带有偶数个零的字符串的集合（ε, 1, 00, 11, 001, 010, 100, 111, 0000, 0011, 0101, 0110, 1001, 1010, 1100, 1111,）是在Σ上的形式语言</data>
</edge>
<edge source="00" target="语言">
  <data key="d2">is_a</data>
  <data key="d3">例如，如果Σ  0, 1，则带有偶数个零的字符串的集合（ε, 1, 00, 11, 001, 010, 100, 111, 0000, 0011, 0101, 0110, 1001, 1010, 1100, 1111,）是在Σ上的形式语言</data>
</edge>
<edge source="100" target="形式">
  <data key="d2">is_a</data>
  <data key="d3">例如，如果Σ  0, 1，则带有偶数个零的字符串的集合（ε, 1, 00, 11, 001, 010, 100, 111, 0000, 0011, 0101, 0110, 1001, 1010, 1100, 1111,）是在Σ上的形式语言</data>
</edge>
<edge source="100" target="语言">
  <data key="d2">is_a</data>
  <data key="d3">例如，如果Σ  0, 1，则带有偶数个零的字符串的集合（ε, 1, 00, 11, 001, 010, 100, 111, 0000, 0011, 0101, 0110, 1001, 1010, 1100, 1111,）是在Σ上的形式语言</data>
</edge>
<edge source="111" target="形式">
  <data key="d2">is_a</data>
  <data key="d3">例如，如果Σ  0, 1，则带有偶数个零的字符串的集合（ε, 1, 00, 11, 001, 010, 100, 111, 0000, 0011, 0101, 0110, 1001, 1010, 1100, 1111,）是在Σ上的形式语言</data>
</edge>
<edge source="111" target="语言">
  <data key="d2">is_a</data>
  <data key="d3">例如，如果Σ  0, 1，则带有偶数个零的字符串的集合（ε, 1, 00, 11, 001, 010, 100, 111, 0000, 0011, 0101, 0110, 1001, 1010, 1100, 1111,）是在Σ上的形式语言</data>
</edge>
<edge source="0000" target="形式">
  <data key="d2">is_a</data>
  <data key="d3">例如，如果Σ  0, 1，则带有偶数个零的字符串的集合（ε, 1, 00, 11, 001, 010, 100, 111, 0000, 0011, 0101, 0110, 1001, 1010, 1100, 1111,）是在Σ上的形式语言</data>
</edge>
<edge source="0000" target="语言">
  <data key="d2">is_a</data>
  <data key="d3">例如，如果Σ  0, 1，则带有偶数个零的字符串的集合（ε, 1, 00, 11, 001, 010, 100, 111, 0000, 0011, 0101, 0110, 1001, 1010, 1100, 1111,）是在Σ上的形式语言</data>
</edge>
<edge source="1001" target="形式">
  <data key="d2">is_a</data>
  <data key="d3">例如，如果Σ  0, 1，则带有偶数个零的字符串的集合（ε, 1, 00, 11, 001, 010, 100, 111, 0000, 0011, 0101, 0110, 1001, 1010, 1100, 1111,）是在Σ上的形式语言</data>
</edge>
<edge source="1001" target="语言">
  <data key="d2">is_a</data>
  <data key="d3">例如，如果Σ  0, 1，则带有偶数个零的字符串的集合（ε, 1, 00, 11, 001, 010, 100, 111, 0000, 0011, 0101, 0110, 1001, 1010, 1100, 1111,）是在Σ上的形式语言</data>
</edge>
<edge source="1010" target="形式">
  <data key="d2">is_a</data>
  <data key="d3">例如，如果Σ  0, 1，则带有偶数个零的字符串的集合（ε, 1, 00, 11, 001, 010, 100, 111, 0000, 0011, 0101, 0110, 1001, 1010, 1100, 1111,）是在Σ上的形式语言</data>
</edge>
<edge source="1010" target="语言">
  <data key="d2">is_a</data>
  <data key="d3">例如，如果Σ  0, 1，则带有偶数个零的字符串的集合（ε, 1, 00, 11, 001, 010, 100, 111, 0000, 0011, 0101, 0110, 1001, 1010, 1100, 1111,）是在Σ上的形式语言</data>
</edge>
<edge source="1100" target="形式">
  <data key="d2">is_a</data>
  <data key="d3">例如，如果Σ  0, 1，则带有偶数个零的字符串的集合（ε, 1, 00, 11, 001, 010, 100, 111, 0000, 0011, 0101, 0110, 1001, 1010, 1100, 1111,）是在Σ上的形式语言</data>
</edge>
<edge source="1100" target="语言">
  <data key="d2">is_a</data>
  <data key="d3">例如，如果Σ  0, 1，则带有偶数个零的字符串的集合（ε, 1, 00, 11, 001, 010, 100, 111, 0000, 0011, 0101, 0110, 1001, 1010, 1100, 1111,）是在Σ上的形式语言</data>
</edge>
<edge source="101" target="字符串">
  <data key="d2">is_a</data>
  <data key="d3">1例如，如果Σ  0, 1，则0101是在Σ之上的字符串</data>
</edge>
<edge source="101" target="字符">
  <data key="d2">is_a</data>
  <data key="d3">1例如，如果Σ  0, 1，则0101是在Σ之上的字符串</data>
</edge>
<edge source="101" target="形式">
  <data key="d2">is_a</data>
  <data key="d3">例如，如果Σ  0, 1，则带有偶数个零的字符串的集合（ε, 1, 00, 11, 001, 010, 100, 111, 0000, 0011, 0101, 0110, 1001, 1010, 1100, 1111,）是在Σ上的形式语言</data>
</edge>
<edge source="101" target="语言">
  <data key="d2">is_a</data>
  <data key="d3">例如，如果Σ  0, 1，则带有偶数个零的字符串的集合（ε, 1, 00, 11, 001, 010, 100, 111, 0000, 0011, 0101, 0110, 1001, 1010, 1100, 1111,）是在Σ上的形式语言</data>
</edge>
<edge source="string" target="序列">
  <data key="d2">composed_of</data>
  <data key="d3">字符串（英語：string），是由零个或多个字符组成的有限序列</data>
</edge>
<edge source="string" target="个字符">
  <data key="d2">composed_of</data>
  <data key="d3">字符串（英語：string），是由零个或多个字符组成的有限序列</data>
</edge>
<edge source="UN" target="算法">
  <data key="d2">used_for</data>
  <data key="d3">这是一些例子： 很多UNIX实用程序进行简单的字符串处理，并能用于简单地编写一些强大的字符串处理算法</data>
</edge>
<edge source="字符" target="序列">
  <data key="d2">defined_as</data>
  <data key="d3">对于Σ中的两个字符串s和t，它们的串接被定义为在s中的字符序列之后跟随着t中的字符序列，并被指示为st</data>
</edge>
<edge source="字符" target="个字符">
  <data key="d2">composed_of</data>
  <data key="d3">字符串（英語：string），是由零个或多个字符组成的有限序列</data>
</edge>
<edge source="字符" target="长度">
  <data key="d2">is_a</data>
  <data key="d3">两个字符串相等的充要条件是：长度相等，并且各个对应位置上的字符都相等</data>
</edge>
<edge source="字符" target="对应">
  <data key="d2">is_a</data>
  <data key="d3">两个字符串相等的充要条件是：长度相等，并且各个对应位置上的字符都相等</data>
</edge>
<edge source="字符" target="长度相等">
  <data key="d2">is_a</data>
  <data key="d3">两个字符串相等的充要条件是：长度相等，并且各个对应位置上的字符都相等</data>
</edge>
<edge source="字符" target="数目">
  <data key="d2">is_a</data>
  <data key="d3">字符串的长度是在字符串中字符的数目（序列的长度），它可以是任何非负整数</data>
</edge>
<edge source="字符" target="序列的长度">
  <data key="d2">is_a</data>
  <data key="d3">字符串的长度是在字符串中字符的数目（序列的长度），它可以是任何非负整数</data>
</edge>
<edge source="字符" target="子集">
  <data key="d2">is_a</data>
  <data key="d3">在Σ上一个字符串的集合（就是Σ的任何子集）被称为在Σ上的形式语言</data>
</edge>
<edge source="字符" target="形式">
  <data key="d2">is_a</data>
  <data key="d3">在Σ上一个字符串的集合（就是Σ的任何子集）被称为在Σ上的形式语言</data>
</edge>
<edge source="字符" target="语言">
  <data key="d2">is_a</data>
  <data key="d3">在Σ上一个字符串的集合（就是Σ的任何子集）被称为在Σ上的形式语言</data>
</edge>
<edge source="字符" target="运算">
  <data key="d2">is_a</data>
  <data key="d3">字符串串接是结合性的，但非交换性运算</data>
</edge>
<edge source="字符" target="string">
  <data key="d2">is_a</data>
  <data key="d3">字符串s被称为是字符串t的子串（英語：substring）或因子（英語：factor），如果存在（可能为空）字符串u和v使得t  usv</data>
</edge>
<edge source="字符" target="英語">
  <data key="d2">is_a</data>
  <data key="d3">字符串s被称为是字符串t的子串（英語：substring）或因子（英語：factor），如果存在（可能为空）字符串u和v使得t  usv</data>
</edge>
<edge source="字符" target="子串">
  <data key="d2">is_a</data>
  <data key="d3">字符串s被称为是字符串t的子串（英語：substring）或因子（英語：factor），如果存在（可能为空）字符串u和v使得t  usv</data>
</edge>
<edge source="字符" target="string）">
  <data key="d2">is_a</data>
  <data key="d3">字符串s被称为是字符串t的子串（英語：substring）或因子（英語：factor），如果存在（可能为空）字符串u和v使得t  usv</data>
</edge>
<edge source="字符" target="substring）或因子（英語：factor）">
  <data key="d2">is_a</data>
  <data key="d3">字符串s被称为是字符串t的子串（英語：substring）或因子（英語：factor），如果存在（可能为空）字符串u和v使得t  usv</data>
</edge>
<edge source="字符" target="英語：substring">
  <data key="d2">is_a</data>
  <data key="d3">字符串s被称为是字符串t的子串（英語：substring）或因子（英語：factor），如果存在（可能为空）字符串u和v使得t  usv</data>
</edge>
<edge source="字符" target="建模">
  <data key="d2">is_a</data>
  <data key="d3">字符串数据类型是建模在形式字符串的想法上的数据类型（Data type）</data>
</edge>
<edge source="字符" target="Data type">
  <data key="d2">is_a</data>
  <data key="d3">字符串数据类型是建模在形式字符串的想法上的数据类型（Data type）</data>
</edge>
<edge source="字符" target="编程语言">
  <data key="d2">is_a</data>
  <data key="d3">字符串是几乎在所有编程语言中都可以实现的非常重要和有用的数据类型</data>
</edge>
<edge source="字符" target="极大值">
  <data key="d2">is_a</data>
  <data key="d3">一般的说，有两种类型的字符串数据类型：定长字符串，它有固定的极大长度并且不管是否达到了这个极大值都使用同样数量的内存；和变长字符串，它的长度不是专断固定的并且依赖于实际的大小使用可变数量的内存</data>
</edge>
<edge source="字符" target="数量">
  <data key="d2">uses</data>
  <data key="d3">一般的说，有两种类型的字符串数据类型：定长字符串，它有固定的极大长度并且不管是否达到了这个极大值都使用同样数量的内存；和变长字符串，它的长度不是专断固定的并且依赖于实际的大小使用可变数量的内存</data>
</edge>
<edge source="字符" target="内存">
  <data key="d2">uses</data>
  <data key="d3">一般的说，有两种类型的字符串数据类型：定长字符串，它有固定的极大长度并且不管是否达到了这个极大值都使用同样数量的内存；和变长字符串，它的长度不是专断固定的并且依赖于实际的大小使用可变数量的内存</data>
</edge>
<edge source="字符" target="设计">
  <data key="d2">depends_on</data>
  <data key="d3">现存代码在用到它们会导致一些字符串匹配和切断上的问题，严重程度依赖于字符编码是如何设计的</data>
</edge>
<edge source="字符" target="位面">
  <data key="d2">is_a</data>
  <data key="d3">多数语言有Unicode字符串数据类型（通常是UTF16，因为它在Unicode补充位面介入之前就被增加了）</data>
</edge>
<edge source="字符" target="问题">
  <data key="d2">is_a</data>
  <data key="d3">在Unicode和本地编码之间转换要求理解本地编码，这对于现存系统要一起传输各种编码的字符串而又没有实际标记出它们用了什么编码就是个问题</data>
</edge>
<edge source="字符" target="规则">
  <data key="d2">used_for</data>
  <data key="d3">某些语言如C把字符串实现为可以用于任何基本类型的模版，但这是个例外而不是规则</data>
</edge>
<edge source="字符" target="基本">
  <data key="d2">implements</data>
  <data key="d3">某些语言如C把字符串实现为可以用于任何基本类型的模版，但这是个例外而不是规则</data>
</edge>
<edge source="字符" target="类型">
  <data key="d2">implements</data>
  <data key="d3">字符串是几乎在所有编程语言中都可以实现的非常重要和有用的数据类型</data>
</edge>
<edge source="字符" target="算法">
  <data key="d2">used_for</data>
  <data key="d3">这是一些例子： 很多UNIX实用程序进行简单的字符串处理，并能用于简单地编写一些强大的字符串处理算法</data>
</edge>
<edge source="字符" target="定义">
  <data key="d2">defined_as</data>
  <data key="d3">对于Σ中的两个字符串s和t，它们的串接被定义为在s中的字符序列之后跟随着t中的字符序列，并被指示为st</data>
</edge>
<edge source="字符" target="实际">
  <data key="d2">depends_on</data>
  <data key="d3">一般的说，有两种类型的字符串数据类型：定长字符串，它有固定的极大长度并且不管是否达到了这个极大值都使用同样数量的内存；和变长字符串，它的长度不是专断固定的并且依赖于实际的大小使用可变数量的内存</data>
</edge>
<edge source="字符" target="编码">
  <data key="d2">depends_on</data>
  <data key="d3">现存代码在用到它们会导致一些字符串匹配和切断上的问题，严重程度依赖于字符编码是如何设计的</data>
</edge>
<edge source="字符" target="数据类型">
  <data key="d2">implements</data>
  <data key="d3">字符串是几乎在所有编程语言中都可以实现的非常重要和有用的数据类型</data>
</edge>
<edge source="序列" target="整数">
  <data key="d2">is_a</data>
  <data key="d3">字符串的长度是在字符串中字符的数目（序列的长度），它可以是任何非负整数</data>
</edge>
<edge source="编程语言" target="数据类型">
  <data key="d2">implements</data>
  <data key="d3">字符串是几乎在所有编程语言中都可以实现的非常重要和有用的数据类型</data>
</edge>
<edge source="编程语言" target="类型">
  <data key="d2">implements</data>
  <data key="d3">字符串是几乎在所有编程语言中都可以实现的非常重要和有用的数据类型</data>
</edge>
<edge source="编程语言" target="方法">
  <data key="d2">uses</data>
  <data key="d3">它的长度可以使用一个结束符（一般是NUL，ASCII代码是0，在C编程语言中使用这种方法）</data>
</edge>
<edge source="编程语言" target="计算机科学">
  <data key="d2">is_a</data>
  <data key="d3">编程语言理论是计算机科学的一个分支，主要处理编程语言的设计实现分析描述和分类，以及它们的个体特性</data>
</edge>
<edge source="编程语言" target="分支">
  <data key="d2">is_a</data>
  <data key="d3">编程语言理论是计算机科学的一个分支，主要处理编程语言的设计实现分析描述和分类，以及它们的个体特性</data>
</edge>
<edge source="编程语言" target="计算机">
  <data key="d2">is_a</data>
  <data key="d3">编程语言理论是计算机科学的一个分支，主要处理编程语言的设计实现分析描述和分类，以及它们的个体特性</data>
</edge>
<edge source="编程语言" target="科学">
  <data key="d2">is_a</data>
  <data key="d3">编程语言理论是计算机科学的一个分支，主要处理编程语言的设计实现分析描述和分类，以及它们的个体特性</data>
</edge>
<edge source="编程语言" target="设计">
  <data key="d2">is_a</data>
  <data key="d3">编程语言理论是计算机科学的一个分支，主要处理编程语言的设计实现分析描述和分类，以及它们的个体特性</data>
</edge>
<edge source="编程语言" target="分析">
  <data key="d2">implements</data>
  <data key="d3">编程语言理论是计算机科学的一个分支，主要处理编程语言的设计实现分析描述和分类，以及它们的个体特性</data>
</edge>
<edge source="编程语言" target="分类">
  <data key="d2">implements</data>
  <data key="d3">编程语言理论是计算机科学的一个分支，主要处理编程语言的设计实现分析描述和分类，以及它们的个体特性</data>
</edge>
<edge source="编程语言" target="个体">
  <data key="d2">implements</data>
  <data key="d3">编程语言理论是计算机科学的一个分支，主要处理编程语言的设计实现分析描述和分类，以及它们的个体特性</data>
</edge>
<edge source="编程语言" target="特性">
  <data key="d2">implements</data>
  <data key="d3">编程语言理论是计算机科学的一个分支，主要处理编程语言的设计实现分析描述和分类，以及它们的个体特性</data>
</edge>
<edge source="数据类型" target="形式">
  <data key="d2">is_a</data>
  <data key="d3">字符串数据类型是建模在形式字符串的想法上的数据类型（Data type）</data>
</edge>
<edge source="数据类型" target="建模">
  <data key="d2">is_a</data>
  <data key="d3">字符串数据类型是建模在形式字符串的想法上的数据类型（Data type）</data>
</edge>
<edge source="数据类型" target="Data type">
  <data key="d2">is_a</data>
  <data key="d3">字符串数据类型是建模在形式字符串的想法上的数据类型（Data type）</data>
</edge>
<edge source="数据类型" target="极大值">
  <data key="d2">is_a</data>
  <data key="d3">一般的说，有两种类型的字符串数据类型：定长字符串，它有固定的极大长度并且不管是否达到了这个极大值都使用同样数量的内存；和变长字符串，它的长度不是专断固定的并且依赖于实际的大小使用可变数量的内存</data>
</edge>
<edge source="数据类型" target="数量">
  <data key="d2">uses</data>
  <data key="d3">一般的说，有两种类型的字符串数据类型：定长字符串，它有固定的极大长度并且不管是否达到了这个极大值都使用同样数量的内存；和变长字符串，它的长度不是专断固定的并且依赖于实际的大小使用可变数量的内存</data>
</edge>
<edge source="数据类型" target="内存">
  <data key="d2">uses</data>
  <data key="d3">一般的说，有两种类型的字符串数据类型：定长字符串，它有固定的极大长度并且不管是否达到了这个极大值都使用同样数量的内存；和变长字符串，它的长度不是专断固定的并且依赖于实际的大小使用可变数量的内存</data>
</edge>
<edge source="数据类型" target="位面">
  <data key="d2">is_a</data>
  <data key="d3">多数语言有Unicode字符串数据类型（通常是UTF16，因为它在Unicode补充位面介入之前就被增加了）</data>
</edge>
<edge source="数据类型" target="实际">
  <data key="d2">depends_on</data>
  <data key="d3">一般的说，有两种类型的字符串数据类型：定长字符串，它有固定的极大长度并且不管是否达到了这个极大值都使用同样数量的内存；和变长字符串，它的长度不是专断固定的并且依赖于实际的大小使用可变数量的内存</data>
</edge>
<edge source="子串" target="空串">
  <data key="d2">is_a</data>
  <data key="d3">是其子串关系定义了在Σ上的偏序，其最小元是空串</data>
</edge>
<edge source="长度" target="序列">
  <data key="d2">is_a</data>
  <data key="d3">字符串的长度是在字符串中字符的数目（序列的长度），它可以是任何非负整数</data>
</edge>
<edge source="长度" target="数目">
  <data key="d2">is_a</data>
  <data key="d3">字符串的长度是在字符串中字符的数目（序列的长度），它可以是任何非负整数</data>
</edge>
<edge source="长度" target="序列的长度">
  <data key="d2">is_a</data>
  <data key="d3">字符串的长度是在字符串中字符的数目（序列的长度），它可以是任何非负整数</data>
</edge>
<edge source="长度" target="极大值">
  <data key="d2">is_a</data>
  <data key="d3">一般的说，有两种类型的字符串数据类型：定长字符串，它有固定的极大长度并且不管是否达到了这个极大值都使用同样数量的内存；和变长字符串，它的长度不是专断固定的并且依赖于实际的大小使用可变数量的内存</data>
</edge>
<edge source="长度" target="数量">
  <data key="d2">uses</data>
  <data key="d3">一般的说，有两种类型的字符串数据类型：定长字符串，它有固定的极大长度并且不管是否达到了这个极大值都使用同样数量的内存；和变长字符串，它的长度不是专断固定的并且依赖于实际的大小使用可变数量的内存</data>
</edge>
<edge source="长度" target="内存">
  <data key="d2">uses</data>
  <data key="d3">一般的说，有两种类型的字符串数据类型：定长字符串，它有固定的极大长度并且不管是否达到了这个极大值都使用同样数量的内存；和变长字符串，它的长度不是专断固定的并且依赖于实际的大小使用可变数量的内存</data>
</edge>
<edge source="长度" target="编程语言">
  <data key="d2">is_a</data>
  <data key="d3">它的长度可以使用一个结束符（一般是NUL，ASCII代码是0，在C编程语言中使用这种方法）</data>
</edge>
<edge source="长度" target="语言">
  <data key="d2">is_a</data>
  <data key="d3">它的长度可以使用一个结束符（一般是NUL，ASCII代码是0，在C编程语言中使用这种方法）</data>
</edge>
<edge source="长度" target="代码">
  <data key="d2">uses</data>
  <data key="d3">它的长度可以使用一个结束符（一般是NUL，ASCII代码是0，在C编程语言中使用这种方法）</data>
</edge>
<edge source="长度" target="实际">
  <data key="d2">depends_on</data>
  <data key="d3">一般的说，有两种类型的字符串数据类型：定长字符串，它有固定的极大长度并且不管是否达到了这个极大值都使用同样数量的内存；和变长字符串，它的长度不是专断固定的并且依赖于实际的大小使用可变数量的内存</data>
</edge>
<edge source="长度" target="结束符">
  <data key="d2">uses</data>
  <data key="d3">它的长度可以使用一个结束符（一般是NUL，ASCII代码是0，在C编程语言中使用这种方法）</data>
</edge>
<edge source="长度" target="一般是NUL，ASCII代码是0，在C编程语言中使用这种方法">
  <data key="d2">uses</data>
  <data key="d3">它的长度可以使用一个结束符（一般是NUL，ASCII代码是0，在C编程语言中使用这种方法）</data>
</edge>
<edge source="长度" target="方法">
  <data key="d2">uses</data>
  <data key="d3">3或者在前面加入一个整数值来表示它的长度（在Pascal语言中使用这种方法）</data>
</edge>
<edge source="运算" target="研究">
  <data key="d2">extends</data>
  <data key="d3">17计算机的概念变得更加清晰，它不仅仅用于数学运算，总的来说计算机科学的领域也扩展到了对于计算的研究</data>
</edge>
<edge source="数目" target="整数">
  <data key="d2">is_a</data>
  <data key="d3">字符串的长度是在字符串中字符的数目（序列的长度），它可以是任何非负整数</data>
</edge>
<edge source="整数" target="方法">
  <data key="d2">uses</data>
  <data key="d3">3或者在前面加入一个整数值来表示它的长度（在Pascal语言中使用这种方法）</data>
</edge>
<edge source="空串" target="字符串">
  <data key="d2">is_a</data>
  <data key="d3">空串是在Σ上的唯一的长度为0的字符串，并被指示为ε或λ</data>
</edge>
<edge source="空串" target="字符">
  <data key="d2">is_a</data>
  <data key="d3">空串是在Σ上的唯一的长度为0的字符串，并被指示为ε或λ</data>
</edge>
<edge source="空串" target="长度">
  <data key="d2">is_a</data>
  <data key="d3">空串是在Σ上的唯一的长度为0的字符串，并被指示为ε或λ</data>
</edge>
<edge source="偶数" target="形式">
  <data key="d2">is_a</data>
  <data key="d3">例如，如果Σ  0, 1，则带有偶数个零的字符串的集合（ε, 1, 00, 11, 001, 010, 100, 111, 0000, 0011, 0101, 0110, 1001, 1010, 1100, 1111,）是在Σ上的形式语言</data>
</edge>
<edge source="偶数" target="语言">
  <data key="d2">is_a</data>
  <data key="d3">例如，如果Σ  0, 1，则带有偶数个零的字符串的集合（ε, 1, 00, 11, 001, 010, 100, 111, 0000, 0011, 0101, 0110, 1001, 1010, 1100, 1111,）是在Σ上的形式语言</data>
</edge>
<edge source="偏序" target="空串">
  <data key="d2">is_a</data>
  <data key="d3">是其子串关系定义了在Σ上的偏序，其最小元是空串</data>
</edge>
<edge source="次序" target="11">
  <data key="d2">is_a</data>
  <data key="d3">例如，如果Σ  0, 1并且0  1，则Σ的词典次序是ε  0  00  000  011  0110  01111  1  10  100  101  111 在形式理论中经常出现一些在字符串上的额外运算</data>
</edge>
<edge source="次序" target="00">
  <data key="d2">is_a</data>
  <data key="d3">例如，如果Σ  0, 1并且0  1，则Σ的词典次序是ε  0  00  000  011  0110  01111  1  10  100  101  111 在形式理论中经常出现一些在字符串上的额外运算</data>
</edge>
<edge source="词典" target="11">
  <data key="d2">is_a</data>
  <data key="d3">例如，如果Σ  0, 1并且0  1，则Σ的词典次序是ε  0  00  000  011  0110  01111  1  10  100  101  111 在形式理论中经常出现一些在字符串上的额外运算</data>
</edge>
<edge source="词典" target="00">
  <data key="d2">is_a</data>
  <data key="d3">例如，如果Σ  0, 1并且0  1，则Σ的词典次序是ε  0  00  000  011  0110  01111  1  10  100  101  111 在形式理论中经常出现一些在字符串上的额外运算</data>
</edge>
<edge source="理论" target="问题">
  <data key="d2">used_for</data>
  <data key="d3">而计算复杂性理论则被用于回答第二个问题，研究解决一个不同目的的计算问题的时间与空间消耗</data>
</edge>
<edge source="理论" target="性质">
  <data key="d2">is_a</data>
  <data key="d3">由于有机化学中有许多树状结构的分子，这些研究对于理论化学有着重要意义，尤其是其中关于具有某一特定性质的图的计数问题</data>
</edge>
<edge source="理论" target="计数问题">
  <data key="d2">is_a</data>
  <data key="d3">由于有机化学中有许多树状结构的分子，这些研究对于理论化学有着重要意义，尤其是其中关于具有某一特定性质的图的计数问题</data>
</edge>
<edge source="理论" target="计数">
  <data key="d2">is_a</data>
  <data key="d3">由于有机化学中有许多树状结构的分子，这些研究对于理论化学有着重要意义，尤其是其中关于具有某一特定性质的图的计数问题</data>
</edge>
<edge source="理论" target="热点">
  <data key="d2">is_a</data>
  <data key="d3">图书馆学侧重于图书馆业务流程和相关学科的研究，包括图书馆哲学图书馆学理论图书馆管理和图书馆业务技术等；情报学侧重于情报的分析和利用，包括情报学理论情报采集情报分析情报检索以及二次三次文献编辑利用，目前情报技术也是研究热点之一</data>
</edge>
<edge source="理论" target="情报检索">
  <data key="d2">includes</data>
  <data key="d3">图书馆学侧重于图书馆业务流程和相关学科的研究，包括图书馆哲学图书馆学理论图书馆管理和图书馆业务技术等；情报学侧重于情报的分析和利用，包括情报学理论情报采集情报分析情报检索以及二次三次文献编辑利用，目前情报技术也是研究热点之一</data>
</edge>
<edge source="理论" target="研究">
  <data key="d2">implements</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="理论" target="方法">
  <data key="d2">implements</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="理论" target="程式设计">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="理论" target="设计">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="理论" target="專注于">
  <data key="d2">includes</data>
  <data key="d3">广义的理论计算机科学包括经典的计算理论和其它專注于更抽象逻辑与数学方面的计算</data>
</edge>
<edge source="理论" target="计算机科学">
  <data key="d2">is_a</data>
  <data key="d3">编程语言理论是计算机科学的一个分支，主要处理编程语言的设计实现分析描述和分类，以及它们的个体特性</data>
</edge>
<edge source="理论" target="分支">
  <data key="d2">is_a</data>
  <data key="d3">编程语言理论是计算机科学的一个分支，主要处理编程语言的设计实现分析描述和分类，以及它们的个体特性</data>
</edge>
<edge source="理论" target="计算机">
  <data key="d2">is_a</data>
  <data key="d3">编程语言理论是计算机科学的一个分支，主要处理编程语言的设计实现分析描述和分类，以及它们的个体特性</data>
</edge>
<edge source="理论" target="科学">
  <data key="d2">is_a</data>
  <data key="d3">编程语言理论是计算机科学的一个分支，主要处理编程语言的设计实现分析描述和分类，以及它们的个体特性</data>
</edge>
<edge source="理论" target="自动">
  <data key="d2">is_a</data>
  <data key="d3">对于形式化方法的最佳形容是各种理论计算机科学基础种类的应用，特别是计算机逻辑演算，形式语言，自动机理论和形式语义学，此外还有类型系统代数数据类型，以及软件和硬件规范和验证中的一些问题</data>
</edge>
<edge source="理论" target="逻辑">
  <data key="d2">includes</data>
  <data key="d3">广义的理论计算机科学包括经典的计算理论和其它專注于更抽象逻辑与数学方面的计算</data>
</edge>
<edge source="理论" target="动机">
  <data key="d2">is_a</data>
  <data key="d3">对于形式化方法的最佳形容是各种理论计算机科学基础种类的应用，特别是计算机逻辑演算，形式语言，自动机理论和形式语义学，此外还有类型系统代数数据类型，以及软件和硬件规范和验证中的一些问题</data>
</edge>
<edge source="理论" target="自动机">
  <data key="d2">is_a</data>
  <data key="d3">对于形式化方法的最佳形容是各种理论计算机科学基础种类的应用，特别是计算机逻辑演算，形式语言，自动机理论和形式语义学，此外还有类型系统代数数据类型，以及软件和硬件规范和验证中的一些问题</data>
</edge>
<edge source="理论" target="学科">
  <data key="d2">implements</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="理论" target="领域">
  <data key="d2">is_a</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="理论" target="研究者">
  <data key="d2">is_a</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="理论" target="数学">
  <data key="d2">includes</data>
  <data key="d3">广义的理论计算机科学包括经典的计算理论和其它專注于更抽象逻辑与数学方面的计算</data>
</edge>
<edge source="理论" target="经典">
  <data key="d2">includes</data>
  <data key="d3">广义的理论计算机科学包括经典的计算理论和其它專注于更抽象逻辑与数学方面的计算</data>
</edge>
<edge source="理论" target="计算理论">
  <data key="d2">includes</data>
  <data key="d3">广义的理论计算机科学包括经典的计算理论和其它專注于更抽象逻辑与数学方面的计算</data>
</edge>
<edge source="理论" target="第二">
  <data key="d2">used_for</data>
  <data key="d3">而计算复杂性理论则被用于回答第二个问题，研究解决一个不同目的的计算问题的时间与空间消耗</data>
</edge>
<edge source="理论" target="目的">
  <data key="d2">used_for</data>
  <data key="d3">而计算复杂性理论则被用于回答第二个问题，研究解决一个不同目的的计算问题的时间与空间消耗</data>
</edge>
<edge source="理论" target="智能">
  <data key="d2">used_for</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="理论" target="实用技术">
  <data key="d2">implements</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="理论" target="技术">
  <data key="d2">implements</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="理论" target="程式">
  <data key="d2">implements</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="理论" target="語言">
  <data key="d2">implements</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="理论" target="理論">
  <data key="d2">implements</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="理论" target="系统">
  <data key="d2">implements</data>
  <data key="d3">Eden提议了三种范式应用于计算机科学的各个领域：31 作为一个学科，计算机科学涵盖了从算法的理论研究和计算的极限，到如何通过硬件和软件实现计算系统</data>
</edge>
<edge source="理论" target="分析">
  <data key="d2">implements</data>
  <data key="d3">编程语言理论是计算机科学的一个分支，主要处理编程语言的设计实现分析描述和分类，以及它们的个体特性</data>
</edge>
<edge source="理论" target="分类">
  <data key="d2">implements</data>
  <data key="d3">编程语言理论是计算机科学的一个分支，主要处理编程语言的设计实现分析描述和分类，以及它们的个体特性</data>
</edge>
<edge source="理论" target="个体">
  <data key="d2">implements</data>
  <data key="d3">编程语言理论是计算机科学的一个分支，主要处理编程语言的设计实现分析描述和分类，以及它们的个体特性</data>
</edge>
<edge source="理论" target="特性">
  <data key="d2">implements</data>
  <data key="d3">编程语言理论是计算机科学的一个分支，主要处理编程语言的设计实现分析描述和分类，以及它们的个体特性</data>
</edge>
<edge source="语言" target="位面">
  <data key="d2">is_a</data>
  <data key="d3">多数语言有Unicode字符串数据类型（通常是UTF16，因为它在Unicode补充位面介入之前就被增加了）</data>
</edge>
<edge source="语言" target="规则">
  <data key="d2">used_for</data>
  <data key="d3">某些语言如C把字符串实现为可以用于任何基本类型的模版，但这是个例外而不是规则</data>
</edge>
<edge source="语言" target="基本">
  <data key="d2">implements</data>
  <data key="d3">某些语言如C把字符串实现为可以用于任何基本类型的模版，但这是个例外而不是规则</data>
</edge>
<edge source="语言" target="类型">
  <data key="d2">implements</data>
  <data key="d3">字符串是几乎在所有编程语言中都可以实现的非常重要和有用的数据类型</data>
</edge>
<edge source="语言" target="数据类型">
  <data key="d2">implements</data>
  <data key="d3">字符串是几乎在所有编程语言中都可以实现的非常重要和有用的数据类型</data>
</edge>
<edge source="语言" target="字符串">
  <data key="d2">implements</data>
  <data key="d3">其他语言，最著名的有Prolog和Erlang，避免实现字符串数据类型，转而采用把字符串表示为字符代码的列表的约定</data>
</edge>
<edge source="语言" target="字符">
  <data key="d2">implements</data>
  <data key="d3">其他语言，最著名的有Prolog和Erlang，避免实现字符串数据类型，转而采用把字符串表示为字符代码的列表的约定</data>
</edge>
<edge source="语言" target="方法">
  <data key="d2">uses</data>
  <data key="d3">它的长度可以使用一个结束符（一般是NUL，ASCII代码是0，在C编程语言中使用这种方法）</data>
</edge>
<edge source="实际" target="问题">
  <data key="d2">is_a</data>
  <data key="d3">在Unicode和本地编码之间转换要求理解本地编码，这对于现存系统要一起传输各种编码的字符串而又没有实际标记出它们用了什么编码就是个问题</data>
</edge>
<edge source="实际" target="学科">
  <data key="d2">is_a</data>
  <data key="d3">在实际使用中，它通常是计算机模拟和计算等形式在各个科学学科问题中的应用</data>
</edge>
<edge source="实际" target="计算机">
  <data key="d2">uses</data>
  <data key="d3">在实际使用中，它通常是计算机模拟和计算等形式在各个科学学科问题中的应用</data>
</edge>
<edge source="实际" target="科学">
  <data key="d2">uses</data>
  <data key="d3">在实际使用中，它通常是计算机模拟和计算等形式在各个科学学科问题中的应用</data>
</edge>
<edge source="实际" target="形式">
  <data key="d2">uses</data>
  <data key="d3">在实际使用中，它通常是计算机模拟和计算等形式在各个科学学科问题中的应用</data>
</edge>
<edge source="极大值" target="实际">
  <data key="d2">depends_on</data>
  <data key="d3">一般的说，有两种类型的字符串数据类型：定长字符串，它有固定的极大长度并且不管是否达到了这个极大值都使用同样数量的内存；和变长字符串，它的长度不是专断固定的并且依赖于实际的大小使用可变数量的内存</data>
</edge>
<edge source="极大值" target="数量">
  <data key="d2">uses</data>
  <data key="d3">一般的说，有两种类型的字符串数据类型：定长字符串，它有固定的极大长度并且不管是否达到了这个极大值都使用同样数量的内存；和变长字符串，它的长度不是专断固定的并且依赖于实际的大小使用可变数量的内存</data>
</edge>
<edge source="极大值" target="内存">
  <data key="d2">uses</data>
  <data key="d3">一般的说，有两种类型的字符串数据类型：定长字符串，它有固定的极大长度并且不管是否达到了这个极大值都使用同样数量的内存；和变长字符串，它的长度不是专断固定的并且依赖于实际的大小使用可变数量的内存</data>
</edge>
<edge source="数量" target="实际">
  <data key="d2">depends_on</data>
  <data key="d3">一般的说，有两种类型的字符串数据类型：定长字符串，它有固定的极大长度并且不管是否达到了这个极大值都使用同样数量的内存；和变长字符串，它的长度不是专断固定的并且依赖于实际的大小使用可变数量的内存</data>
</edge>
<edge source="内存" target="实际">
  <data key="d2">depends_on</data>
  <data key="d3">一般的说，有两种类型的字符串数据类型：定长字符串，它有固定的极大长度并且不管是否达到了这个极大值都使用同样数量的内存；和变长字符串，它的长度不是专断固定的并且依赖于实际的大小使用可变数量的内存</data>
</edge>
<edge source="名字" target="长度">
  <data key="d2">is_a</data>
  <data key="d3">尽管叫这个名字，所有变长字符串还是在长度上有个极限，一般的说这个极限只依赖于可获得的内存的数量</data>
</edge>
<edge source="名字" target="数量">
  <data key="d2">contains</data>
  <data key="d3">9 尽管计算机科学（computer science）的名字里包含计算机这几个字，但实际上计算机科学相当数量的领域都不涉及计算机本身的研究</data>
</edge>
<edge source="名字" target="内存">
  <data key="d2">depends_on</data>
  <data key="d3">尽管叫这个名字，所有变长字符串还是在长度上有个极限，一般的说这个极限只依赖于可获得的内存的数量</data>
</edge>
<edge source="名字" target="实际">
  <data key="d2">contains</data>
  <data key="d3">9 尽管计算机科学（computer science）的名字里包含计算机这几个字，但实际上计算机科学相当数量的领域都不涉及计算机本身的研究</data>
</edge>
<edge source="历史" target="資訊革命">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="历史" target="信息">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="历史" target="时代">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="历史" target="革命">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="历史" target="信息时代">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="历史" target="奠基">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="历史" target="資訊">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="历史" target="驱动力">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="字节" target="字形">
  <data key="d2">uses</data>
  <data key="d3">常规的解决涉及：保持对ASCII码的单字节表示，并使用双字节来表示CJK字形</data>
</edge>
<edge source="编码" target="设计">
  <data key="d2">is_a</data>
  <data key="d3">现存代码在用到它们会导致一些字符串匹配和切断上的问题，严重程度依赖于字符编码是如何设计的</data>
</edge>
<edge source="编码" target="问题">
  <data key="d2">is_a</data>
  <data key="d3">在Unicode和本地编码之间转换要求理解本地编码，这对于现存系统要一起传输各种编码的字符串而又没有实际标记出它们用了什么编码就是个问题</data>
</edge>
<edge source="编码" target="研究">
  <data key="d2">is_a</data>
  <data key="d3">编码理论是对编码以及它们适用的特定应用性质的研究</data>
</edge>
<edge source="编码" target="性质">
  <data key="d2">is_a</data>
  <data key="d3">编码理论是对编码以及它们适用的特定应用性质的研究</data>
</edge>
<edge source="编码" target="数据">
  <data key="d2">used_for</data>
  <data key="d3">编码（code）被用于数据压缩，密码学，前向纠错，近期也被用于网络编码</data>
</edge>
<edge source="编码" target="密码学">
  <data key="d2">used_for</data>
  <data key="d3">编码（code）被用于数据压缩，密码学，前向纠错，近期也被用于网络编码</data>
</edge>
<edge source="编码" target="网络">
  <data key="d2">used_for</data>
  <data key="d3">编码（code）被用于数据压缩，密码学，前向纠错，近期也被用于网络编码</data>
</edge>
<edge source="文字" target="用户">
  <data key="d2">uses</data>
  <data key="d3">多媒体技术是指通过计算机对文字数据图形图像动画声音等多种媒体信息进行综合处理和管理，使用户可以通过多种感官与计算机进行实时信息交互的技术，又称为计算机多媒体技术</data>
</edge>
<edge source="文字" target="感官">
  <data key="d2">uses</data>
  <data key="d3">多媒体技术是指通过计算机对文字数据图形图像动画声音等多种媒体信息进行综合处理和管理，使用户可以通过多种感官与计算机进行实时信息交互的技术，又称为计算机多媒体技术</data>
</edge>
<edge source="个字符" target="长度">
  <data key="d2">is_a</data>
  <data key="d3">两个字符串相等的充要条件是：长度相等，并且各个对应位置上的字符都相等</data>
</edge>
<edge source="个字符" target="对应">
  <data key="d2">is_a</data>
  <data key="d3">两个字符串相等的充要条件是：长度相等，并且各个对应位置上的字符都相等</data>
</edge>
<edge source="个字符" target="长度相等">
  <data key="d2">is_a</data>
  <data key="d3">两个字符串相等的充要条件是：长度相等，并且各个对应位置上的字符都相等</data>
</edge>
<edge source="个字符" target="子集">
  <data key="d2">is_a</data>
  <data key="d3">在Σ上一个字符串的集合（就是Σ的任何子集）被称为在Σ上的形式语言</data>
</edge>
<edge source="个字符" target="形式">
  <data key="d2">is_a</data>
  <data key="d3">在Σ上一个字符串的集合（就是Σ的任何子集）被称为在Σ上的形式语言</data>
</edge>
<edge source="个字符" target="语言">
  <data key="d2">is_a</data>
  <data key="d3">在Σ上一个字符串的集合（就是Σ的任何子集）被称为在Σ上的形式语言</data>
</edge>
<edge source="个字符" target="序列">
  <data key="d2">defined_as</data>
  <data key="d3">对于Σ中的两个字符串s和t，它们的串接被定义为在s中的字符序列之后跟随着t中的字符序列，并被指示为st</data>
</edge>
<edge source="个字符" target="定义">
  <data key="d2">defined_as</data>
  <data key="d3">对于Σ中的两个字符串s和t，它们的串接被定义为在s中的字符序列之后跟随着t中的字符序列，并被指示为st</data>
</edge>
<edge source="常规" target="字形">
  <data key="d2">uses</data>
  <data key="d3">常规的解决涉及：保持对ASCII码的单字节表示，并使用双字节来表示CJK字形</data>
</edge>
<edge source="单字节" target="字形">
  <data key="d2">uses</data>
  <data key="d3">常规的解决涉及：保持对ASCII码的单字节表示，并使用双字节来表示CJK字形</data>
</edge>
<edge source="现存" target="设计">
  <data key="d2">depends_on</data>
  <data key="d3">现存代码在用到它们会导致一些字符串匹配和切断上的问题，严重程度依赖于字符编码是如何设计的</data>
</edge>
<edge source="现存" target="问题">
  <data key="d2">leads_to</data>
  <data key="d3">现存代码在用到它们会导致一些字符串匹配和切断上的问题，严重程度依赖于字符编码是如何设计的</data>
</edge>
<edge source="现存" target="字符串">
  <data key="d2">leads_to</data>
  <data key="d3">现存代码在用到它们会导致一些字符串匹配和切断上的问题，严重程度依赖于字符编码是如何设计的</data>
</edge>
<edge source="现存" target="字符">
  <data key="d2">leads_to</data>
  <data key="d3">现存代码在用到它们会导致一些字符串匹配和切断上的问题，严重程度依赖于字符编码是如何设计的</data>
</edge>
<edge source="现存" target="程度">
  <data key="d2">leads_to</data>
  <data key="d3">现存代码在用到它们会导致一些字符串匹配和切断上的问题，严重程度依赖于字符编码是如何设计的</data>
</edge>
<edge source="现存" target="编码">
  <data key="d2">depends_on</data>
  <data key="d3">现存代码在用到它们会导致一些字符串匹配和切断上的问题，严重程度依赖于字符编码是如何设计的</data>
</edge>
<edge source="代码" target="设计">
  <data key="d2">depends_on</data>
  <data key="d3">现存代码在用到它们会导致一些字符串匹配和切断上的问题，严重程度依赖于字符编码是如何设计的</data>
</edge>
<edge source="代码" target="编程语言">
  <data key="d2">is_a</data>
  <data key="d3">它的长度可以使用一个结束符（一般是NUL，ASCII代码是0，在C编程语言中使用这种方法）</data>
</edge>
<edge source="代码" target="语言">
  <data key="d2">is_a</data>
  <data key="d3">它的长度可以使用一个结束符（一般是NUL，ASCII代码是0，在C编程语言中使用这种方法）</data>
</edge>
<edge source="代码" target="方法">
  <data key="d2">uses</data>
  <data key="d3">它的长度可以使用一个结束符（一般是NUL，ASCII代码是0，在C编程语言中使用这种方法）</data>
</edge>
<edge source="代码" target="字符串">
  <data key="d2">leads_to</data>
  <data key="d3">现存代码在用到它们会导致一些字符串匹配和切断上的问题，严重程度依赖于字符编码是如何设计的</data>
</edge>
<edge source="代码" target="字符">
  <data key="d2">leads_to</data>
  <data key="d3">现存代码在用到它们会导致一些字符串匹配和切断上的问题，严重程度依赖于字符编码是如何设计的</data>
</edge>
<edge source="代码" target="问题">
  <data key="d2">leads_to</data>
  <data key="d3">现存代码在用到它们会导致一些字符串匹配和切断上的问题，严重程度依赖于字符编码是如何设计的</data>
</edge>
<edge source="代码" target="程度">
  <data key="d2">leads_to</data>
  <data key="d3">现存代码在用到它们会导致一些字符串匹配和切断上的问题，严重程度依赖于字符编码是如何设计的</data>
</edge>
<edge source="代码" target="编码">
  <data key="d2">depends_on</data>
  <data key="d3">现存代码在用到它们会导致一些字符串匹配和切断上的问题，严重程度依赖于字符编码是如何设计的</data>
</edge>
<edge source="程度" target="设计">
  <data key="d2">depends_on</data>
  <data key="d3">现存代码在用到它们会导致一些字符串匹配和切断上的问题，严重程度依赖于字符编码是如何设计的</data>
</edge>
<edge source="程度" target="编码">
  <data key="d2">depends_on</data>
  <data key="d3">现存代码在用到它们会导致一些字符串匹配和切断上的问题，严重程度依赖于字符编码是如何设计的</data>
</edge>
<edge source="设计" target="计算机科学">
  <data key="d2">supports</data>
  <data key="d3">通常也教授程序设计，但仅仅将它看作是支持计算机科学其它领域的媒介，而不是高级研究的重心</data>
</edge>
<edge source="设计" target="学科">
  <data key="d2">uses</data>
  <data key="d3">在软件和硬件设计方面，形式化方法的使用动机，如同其它工程学科，是通过适当的数学分析便有助于设计的可靠性和健壮性的期望</data>
</edge>
<edge source="设计" target="领域">
  <data key="d2">supports</data>
  <data key="d3">通常也教授程序设计，但仅仅将它看作是支持计算机科学其它领域的媒介，而不是高级研究的重心</data>
</edge>
<edge source="设计" target="科学">
  <data key="d2">supports</data>
  <data key="d3">通常也教授程序设计，但仅仅将它看作是支持计算机科学其它领域的媒介，而不是高级研究的重心</data>
</edge>
<edge source="设计" target="数学">
  <data key="d2">uses</data>
  <data key="d3">在软件和硬件设计方面，形式化方法的使用动机，如同其它工程学科，是通过适当的数学分析便有助于设计的可靠性和健壮性的期望</data>
</edge>
<edge source="设计" target="分析">
  <data key="d2">uses</data>
  <data key="d3">在软件和硬件设计方面，形式化方法的使用动机，如同其它工程学科，是通过适当的数学分析便有助于设计的可靠性和健壮性的期望</data>
</edge>
<edge source="设计" target="可靠性">
  <data key="d2">is_a</data>
  <data key="d3">在软件和硬件设计方面，形式化方法的使用动机，如同其它工程学科，是通过适当的数学分析便有助于设计的可靠性和健壮性的期望</data>
</edge>
<edge source="设计" target="健壮性">
  <data key="d2">is_a</data>
  <data key="d3">在软件和硬件设计方面，形式化方法的使用动机，如同其它工程学科，是通过适当的数学分析便有助于设计的可靠性和健壮性的期望</data>
</edge>
<edge source="设计" target="研究">
  <data key="d2">implements</data>
  <data key="d3">37 软件工程是对于设计实现和修改软件的研究，以确保软件的高质量适中的价格可维护性，以及能够快速构建</data>
</edge>
<edge source="设计" target="计算机">
  <data key="d2">supports</data>
  <data key="d3">通常也教授程序设计，但仅仅将它看作是支持计算机科学其它领域的媒介，而不是高级研究的重心</data>
</edge>
<edge source="设计" target="媒介">
  <data key="d2">supports</data>
  <data key="d3">通常也教授程序设计，但仅仅将它看作是支持计算机科学其它领域的媒介，而不是高级研究的重心</data>
</edge>
<edge source="设计" target="分类">
  <data key="d2">implements</data>
  <data key="d3">编程语言理论是计算机科学的一个分支，主要处理编程语言的设计实现分析描述和分类，以及它们的个体特性</data>
</edge>
<edge source="设计" target="个体">
  <data key="d2">implements</data>
  <data key="d3">编程语言理论是计算机科学的一个分支，主要处理编程语言的设计实现分析描述和分类，以及它们的个体特性</data>
</edge>
<edge source="设计" target="特性">
  <data key="d2">implements</data>
  <data key="d3">编程语言理论是计算机科学的一个分支，主要处理编程语言的设计实现分析描述和分类，以及它们的个体特性</data>
</edge>
<edge source="设计" target="高质量">
  <data key="d2">implements</data>
  <data key="d3">37 软件工程是对于设计实现和修改软件的研究，以确保软件的高质量适中的价格可维护性，以及能够快速构建</data>
</edge>
<edge source="设计" target="工程">
  <data key="d2">uses</data>
  <data key="d3">在软件和硬件设计方面，形式化方法的使用动机，如同其它工程学科，是通过适当的数学分析便有助于设计的可靠性和健壮性的期望</data>
</edge>
<edge source="设计" target="工程学">
  <data key="d2">uses</data>
  <data key="d3">在软件和硬件设计方面，形式化方法的使用动机，如同其它工程学科，是通过适当的数学分析便有助于设计的可靠性和健壮性的期望</data>
</edge>
<edge source="设计" target="动机">
  <data key="d2">uses</data>
  <data key="d3">在软件和硬件设计方面，形式化方法的使用动机，如同其它工程学科，是通过适当的数学分析便有助于设计的可靠性和健壮性的期望</data>
</edge>
<edge source="传输" target="问题">
  <data key="d2">is_a</data>
  <data key="d3">在Unicode和本地编码之间转换要求理解本地编码，这对于现存系统要一起传输各种编码的字符串而又没有实际标记出它们用了什么编码就是个问题</data>
</edge>
<edge source="标记" target="问题">
  <data key="d2">is_a</data>
  <data key="d3">在Unicode和本地编码之间转换要求理解本地编码，这对于现存系统要一起传输各种编码的字符串而又没有实际标记出它们用了什么编码就是个问题</data>
</edge>
<edge source="情况" target="节点">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="情况" target="代表">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="情况" target="作者">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="情况" target="学术">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="情况" target="机构">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="情况" target="文献">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="情况" target="关键词">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="表示法" target="字符">
  <data key="d2">uses</data>
  <data key="d3">一种常用的表示法是使用一个字符代码的数组，每个字符占用一个字节（如在ASCII代码中）或两个字节（如在unicode中）</data>
</edge>
<edge source="表示法" target="字节">
  <data key="d2">uses</data>
  <data key="d3">一种常用的表示法是使用一个字符代码的数组，每个字符占用一个字节（如在ASCII代码中）或两个字节（如在unicode中）</data>
</edge>
<edge source="表示法" target="个字符">
  <data key="d2">uses</data>
  <data key="d3">一种常用的表示法是使用一个字符代码的数组，每个字符占用一个字节（如在ASCII代码中）或两个字节（如在unicode中）</data>
</edge>
<edge source="表示法" target="代码">
  <data key="d2">uses</data>
  <data key="d3">一种常用的表示法是使用一个字符代码的数组，每个字符占用一个字节（如在ASCII代码中）或两个字节（如在unicode中）</data>
</edge>
<edge source="表示法" target="数组">
  <data key="d2">uses</data>
  <data key="d3">一种常用的表示法是使用一个字符代码的数组，每个字符占用一个字节（如在ASCII代码中）或两个字节（如在unicode中）</data>
</edge>
<edge source="表示法" target="科學">
  <data key="d2">is_a</data>
  <data key="d3">知識表示法，又稱做知識重呈知識表現知識表徵，是認知科學和人工智能兩個領域共同存在的問題</data>
</edge>
<edge source="表示法" target="人工智能">
  <data key="d2">is_a</data>
  <data key="d3">知識表示法，又稱做知識重呈知識表現知識表徵，是認知科學和人工智能兩個領域共同存在的問題</data>
</edge>
<edge source="表示法" target="領域">
  <data key="d2">is_a</data>
  <data key="d3">知識表示法，又稱做知識重呈知識表現知識表徵，是認知科學和人工智能兩個領域共同存在的問題</data>
</edge>
<edge source="表示法" target="問題">
  <data key="d2">is_a</data>
  <data key="d3">知識表示法，又稱做知識重呈知識表現知識表徵，是認知科學和人工智能兩個領域共同存在的問題</data>
</edge>
<edge source="结束符" target="编程语言">
  <data key="d2">is_a</data>
  <data key="d3">它的长度可以使用一个结束符（一般是NUL，ASCII代码是0，在C编程语言中使用这种方法）</data>
</edge>
<edge source="结束符" target="语言">
  <data key="d2">is_a</data>
  <data key="d3">它的长度可以使用一个结束符（一般是NUL，ASCII代码是0，在C编程语言中使用这种方法）</data>
</edge>
<edge source="结束符" target="代码">
  <data key="d2">is_a</data>
  <data key="d3">它的长度可以使用一个结束符（一般是NUL，ASCII代码是0，在C编程语言中使用这种方法）</data>
</edge>
<edge source="结束符" target="方法">
  <data key="d2">uses</data>
  <data key="d3">它的长度可以使用一个结束符（一般是NUL，ASCII代码是0，在C编程语言中使用这种方法）</data>
</edge>
<edge source="数值" target="方法">
  <data key="d2">uses</data>
  <data key="d3">3或者在前面加入一个整数值来表示它的长度（在Pascal语言中使用这种方法）</data>
</edge>
<edge source="数值" target="古老">
  <data key="d2">used_for</data>
  <data key="d3">那些计算固定数值任务的机器，比如算盘，自古希腊时期即已存在，而用于加快计算的算法更是在算盘等古老的计算仪器发明之前就已被广泛使用</data>
</edge>
<edge source="数值" target="仪器">
  <data key="d2">used_for</data>
  <data key="d3">那些计算固定数值任务的机器，比如算盘，自古希腊时期即已存在，而用于加快计算的算法更是在算盘等古老的计算仪器发明之前就已被广泛使用</data>
</edge>
<edge source="数值" target="祖先">
  <data key="d2">used_for</data>
  <data key="d3">到了20世纪40年代，随着更新更强大的计算机器(如ABC计算机电子数值积分计算机)被发明，术语计算机开始用于指代那些机器而不是它们的祖先</data>
</edge>
<edge source="数值" target="算法">
  <data key="d2">used_for</data>
  <data key="d3">那些计算固定数值任务的机器，比如算盘，自古希腊时期即已存在，而用于加快计算的算法更是在算盘等古老的计算仪器发明之前就已被广泛使用</data>
</edge>
<edge source="数值" target="指代">
  <data key="d2">used_for</data>
  <data key="d3">到了20世纪40年代，随着更新更强大的计算机器(如ABC计算机电子数值积分计算机)被发明，术语计算机开始用于指代那些机器而不是它们的祖先</data>
</edge>
<edge source="例子" target="算法">
  <data key="d2">used_for</data>
  <data key="d3">这是一些例子： 很多UNIX实用程序进行简单的字符串处理，并能用于简单地编写一些强大的字符串处理算法</data>
</edge>
<edge source="意义" target="问题">
  <data key="d2">is_a</data>
  <data key="d3">由于有机化学中有许多树状结构的分子，这些研究对于理论化学有着重要意义，尤其是其中关于具有某一特定性质的图的计数问题</data>
</edge>
<edge source="意义" target="性质">
  <data key="d2">is_a</data>
  <data key="d3">由于有机化学中有许多树状结构的分子，这些研究对于理论化学有着重要意义，尤其是其中关于具有某一特定性质的图的计数问题</data>
</edge>
<edge source="意义" target="计数问题">
  <data key="d2">is_a</data>
  <data key="d3">由于有机化学中有许多树状结构的分子，这些研究对于理论化学有着重要意义，尤其是其中关于具有某一特定性质的图的计数问题</data>
</edge>
<edge source="意义" target="计数">
  <data key="d2">is_a</data>
  <data key="d3">由于有机化学中有许多树状结构的分子，这些研究对于理论化学有着重要意义，尤其是其中关于具有某一特定性质的图的计数问题</data>
</edge>
<edge source="实用程序" target="算法">
  <data key="d2">used_for</data>
  <data key="d3">这是一些例子： 很多UNIX实用程序进行简单的字符串处理，并能用于简单地编写一些强大的字符串处理算法</data>
</edge>
<edge source="string）" target="序列">
  <data key="d2">composed_of</data>
  <data key="d3">字符串（英語：string），是由零个或多个字符组成的有限序列</data>
</edge>
<edge source="string）" target="个字符">
  <data key="d2">composed_of</data>
  <data key="d3">字符串（英語：string），是由零个或多个字符组成的有限序列</data>
</edge>
<edge source="定长字符串" target="极大值">
  <data key="d2">is_a</data>
  <data key="d3">一般的说，有两种类型的字符串数据类型：定长字符串，它有固定的极大长度并且不管是否达到了这个极大值都使用同样数量的内存；和变长字符串，它的长度不是专断固定的并且依赖于实际的大小使用可变数量的内存</data>
</edge>
<edge source="定长字符串" target="数量">
  <data key="d2">uses</data>
  <data key="d3">一般的说，有两种类型的字符串数据类型：定长字符串，它有固定的极大长度并且不管是否达到了这个极大值都使用同样数量的内存；和变长字符串，它的长度不是专断固定的并且依赖于实际的大小使用可变数量的内存</data>
</edge>
<edge source="定长字符串" target="内存">
  <data key="d2">uses</data>
  <data key="d3">一般的说，有两种类型的字符串数据类型：定长字符串，它有固定的极大长度并且不管是否达到了这个极大值都使用同样数量的内存；和变长字符串，它的长度不是专断固定的并且依赖于实际的大小使用可变数量的内存</data>
</edge>
<edge source="定长字符串" target="实际">
  <data key="d2">depends_on</data>
  <data key="d3">一般的说，有两种类型的字符串数据类型：定长字符串，它有固定的极大长度并且不管是否达到了这个极大值都使用同样数量的内存；和变长字符串，它的长度不是专断固定的并且依赖于实际的大小使用可变数量的内存</data>
</edge>
<edge source="保持对ASCII码的单字节表示" target="字形">
  <data key="d2">uses</data>
  <data key="d3">常规的解决涉及：保持对ASCII码的单字节表示，并使用双字节来表示CJK字形</data>
</edge>
<edge source="很多UNIX实用程序进行简单的字符串处理" target="算法">
  <data key="d2">used_for</data>
  <data key="d3">这是一些例子： 很多UNIX实用程序进行简单的字符串处理，并能用于简单地编写一些强大的字符串处理算法</data>
</edge>
<edge source="英語：string" target="序列">
  <data key="d2">composed_of</data>
  <data key="d3">字符串（英語：string），是由零个或多个字符组成的有限序列</data>
</edge>
<edge source="英語：string" target="个字符">
  <data key="d2">composed_of</data>
  <data key="d3">字符串（英語：string），是由零个或多个字符组成的有限序列</data>
</edge>
<edge source="或字" target="序列">
  <data key="d2">is_a</data>
  <data key="d3">在Σ上的字符串（或字）是来自Σ的任何有限序列</data>
</edge>
<edge source="序列的长度" target="整数">
  <data key="d2">is_a</data>
  <data key="d3">字符串的长度是在字符串中字符的数目（序列的长度），它可以是任何非负整数</data>
</edge>
<edge source="ε, 1, 00, 11, 001, 010, 100, 111, 0000, 0011, 0101, 0110, 1001, 1010, 1100, 1111," target="形式">
  <data key="d2">is_a</data>
  <data key="d3">例如，如果Σ  0, 1，则带有偶数个零的字符串的集合（ε, 1, 00, 11, 001, 010, 100, 111, 0000, 0011, 0101, 0110, 1001, 1010, 1100, 1111,）是在Σ上的形式语言</data>
</edge>
<edge source="ε, 1, 00, 11, 001, 010, 100, 111, 0000, 0011, 0101, 0110, 1001, 1010, 1100, 1111," target="语言">
  <data key="d2">is_a</data>
  <data key="d3">例如，如果Σ  0, 1，则带有偶数个零的字符串的集合（ε, 1, 00, 11, 001, 010, 100, 111, 0000, 0011, 0101, 0110, 1001, 1010, 1100, 1111,）是在Σ上的形式语言</data>
</edge>
<edge source="英語：concatenation" target="二元">
  <data key="d2">is_a</data>
  <data key="d3">串接（英語：concatenation）是Σ上的重要二元运算</data>
</edge>
<edge source="英語：concatenation" target="运算">
  <data key="d2">is_a</data>
  <data key="d3">串接（英語：concatenation）是Σ上的重要二元运算</data>
</edge>
<edge source="問題" target="事情">
  <data key="d2">is_a</data>
  <data key="d3">2020世纪50年代后期，计算机科学学科還在发展階段，这種問題在当时是一件很常見的事情</data>
</edge>
<edge source="程式" target="研究">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="程式" target="方法">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="程式" target="程式设计">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="程式" target="设计">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="程式" target="核心">
  <data key="d2">is_a</data>
  <data key="d3">操作系统是管理电脑硬件与软件资源的电脑程式，同时也是电脑系统的核心与基石</data>
</edge>
<edge source="程式" target="基石">
  <data key="d2">is_a</data>
  <data key="d3">操作系统是管理电脑硬件与软件资源的电脑程式，同时也是电脑系统的核心与基石</data>
</edge>
<edge source="Knowledge base" target="管理">
  <data key="d2">used_for</data>
  <data key="d3">知识库（Knowledge base）是用于知识管理的一种特殊的数据库，以便于有关领域知识的采集整理以及提取</data>
</edge>
<edge source="Knowledge base" target="数据库">
  <data key="d2">used_for</data>
  <data key="d3">知识库（Knowledge base）是用于知识管理的一种特殊的数据库，以便于有关领域知识的采集整理以及提取</data>
</edge>
<edge source="Knowledge base" target="有关">
  <data key="d2">used_for</data>
  <data key="d3">知识库（Knowledge base）是用于知识管理的一种特殊的数据库，以便于有关领域知识的采集整理以及提取</data>
</edge>
<edge source="Knowledge base" target="领域">
  <data key="d2">used_for</data>
  <data key="d3">知识库（Knowledge base）是用于知识管理的一种特殊的数据库，以便于有关领域知识的采集整理以及提取</data>
</edge>
<edge source="管理" target="热点">
  <data key="d2">is_a</data>
  <data key="d3">图书馆学侧重于图书馆业务流程和相关学科的研究，包括图书馆哲学图书馆学理论图书馆管理和图书馆业务技术等；情报学侧重于情报的分析和利用，包括情报学理论情报采集情报分析情报检索以及二次三次文献编辑利用，目前情报技术也是研究热点之一</data>
</edge>
<edge source="管理" target="情报检索">
  <data key="d2">includes</data>
  <data key="d3">图书馆学侧重于图书馆业务流程和相关学科的研究，包括图书馆哲学图书馆学理论图书馆管理和图书馆业务技术等；情报学侧重于情报的分析和利用，包括情报学理论情报采集情报分析情报检索以及二次三次文献编辑利用，目前情报技术也是研究热点之一</data>
</edge>
<edge source="管理" target="核心">
  <data key="d2">is_a</data>
  <data key="d3">操作系统是管理电脑硬件与软件资源的电脑程式，同时也是电脑系统的核心与基石</data>
</edge>
<edge source="管理" target="基石">
  <data key="d2">is_a</data>
  <data key="d3">操作系统是管理电脑硬件与软件资源的电脑程式，同时也是电脑系统的核心与基石</data>
</edge>
<edge source="管理" target="用户">
  <data key="d2">uses</data>
  <data key="d3">多媒体技术是指通过计算机对文字数据图形图像动画声音等多种媒体信息进行综合处理和管理，使用户可以通过多种感官与计算机进行实时信息交互的技术，又称为计算机多媒体技术</data>
</edge>
<edge source="管理" target="感官">
  <data key="d2">uses</data>
  <data key="d3">多媒体技术是指通过计算机对文字数据图形图像动画声音等多种媒体信息进行综合处理和管理，使用户可以通过多种感官与计算机进行实时信息交互的技术，又称为计算机多媒体技术</data>
</edge>
<edge source="有关" target="数学">
  <data key="d2">is_a</data>
  <data key="d3">凯莱将他关于树的研究成果与当时有关化合物的研究联系起来，而图论中有一部分术语正是来源于这种将数学与化学相联系的做法</data>
</edge>
<edge source="有关" target="化学">
  <data key="d2">is_a</data>
  <data key="d3">凯莱将他关于树的研究成果与当时有关化合物的研究联系起来，而图论中有一部分术语正是来源于这种将数学与化学相联系的做法</data>
</edge>
<edge source="整理" target="上訊息">
  <data key="d2">is_a</data>
  <data key="d3">经过整理而有序化的訊息方可成为情报，也是狭义上訊息的概念</data>
</edge>
<edge source="整理" target="概念">
  <data key="d2">is_a</data>
  <data key="d3">经过整理而有序化的訊息方可成为情报，也是狭义上訊息的概念</data>
</edge>
<edge source="整理" target="传播">
  <data key="d2">implements</data>
  <data key="d3">图书馆訊息学就是研究訊息的组织整理，以及通过图书馆等平台实现訊息传递与传播，从而保障訊息有效查询与获取的学问</data>
</edge>
<edge source="整理" target="查询">
  <data key="d2">implements</data>
  <data key="d3">图书馆訊息学就是研究訊息的组织整理，以及通过图书馆等平台实现訊息传递与传播，从而保障訊息有效查询与获取的学问</data>
</edge>
<edge source="领域专家" target="问题">
  <data key="d2">is_a</data>
  <data key="d3">知识库中的知识源于领域专家，它是求解问题所需领域知识的集合，包括基本事实规则和其它有关信息</data>
</edge>
<edge source="领域专家" target="基本">
  <data key="d2">includes</data>
  <data key="d3">知识库中的知识源于领域专家，它是求解问题所需领域知识的集合，包括基本事实规则和其它有关信息</data>
</edge>
<edge source="领域专家" target="事实">
  <data key="d2">includes</data>
  <data key="d3">知识库中的知识源于领域专家，它是求解问题所需领域知识的集合，包括基本事实规则和其它有关信息</data>
</edge>
<edge source="领域专家" target="规则">
  <data key="d2">includes</data>
  <data key="d3">知识库中的知识源于领域专家，它是求解问题所需领域知识的集合，包括基本事实规则和其它有关信息</data>
</edge>
<edge source="领域专家" target="有关">
  <data key="d2">includes</data>
  <data key="d3">知识库中的知识源于领域专家，它是求解问题所需领域知识的集合，包括基本事实规则和其它有关信息</data>
</edge>
<edge source="领域专家" target="信息">
  <data key="d2">includes</data>
  <data key="d3">知识库中的知识源于领域专家，它是求解问题所需领域知识的集合，包括基本事实规则和其它有关信息</data>
</edge>
<edge source="Graph" target="数学">
  <data key="d2">is_a</data>
  <data key="d3">图论（英語：Graph theory），是组合数学分支，和其他数学分支如群论矩阵论拓扑学有着密切关系</data>
</edge>
<edge source="Graph" target="分支">
  <data key="d2">is_a</data>
  <data key="d3">图论（英語：Graph theory），是组合数学分支，和其他数学分支如群论矩阵论拓扑学有着密切关系</data>
</edge>
<edge source="Graph" target="群论">
  <data key="d2">is_a</data>
  <data key="d3">图论（英語：Graph theory），是组合数学分支，和其他数学分支如群论矩阵论拓扑学有着密切关系</data>
</edge>
<edge source="Graph" target="矩阵">
  <data key="d2">is_a</data>
  <data key="d3">图论（英語：Graph theory），是组合数学分支，和其他数学分支如群论矩阵论拓扑学有着密切关系</data>
</edge>
<edge source="Graph" target="拓扑学">
  <data key="d2">is_a</data>
  <data key="d3">图论（英語：Graph theory），是组合数学分支，和其他数学分支如群论矩阵论拓扑学有着密切关系</data>
</edge>
<edge source="柯尼斯堡七桥" target="第一">
  <data key="d2">is_a</data>
  <data key="d3">一般认为，欧拉于1736年出版的关于柯尼斯堡七桥问题的论文是图论领域的第一篇文章3</data>
</edge>
<edge source="柯尼斯堡七桥" target="图论">
  <data key="d2">is_a</data>
  <data key="d3">一般认为，欧拉于1736年出版的关于柯尼斯堡七桥问题的论文是图论领域的第一篇文章3</data>
</edge>
<edge source="柯尼斯堡七桥" target="领域">
  <data key="d2">is_a</data>
  <data key="d3">一般认为，欧拉于1736年出版的关于柯尼斯堡七桥问题的论文是图论领域的第一篇文章3</data>
</edge>
<edge source="柯尼斯堡七桥" target="文章">
  <data key="d2">is_a</data>
  <data key="d3">一般认为，欧拉于1736年出版的关于柯尼斯堡七桥问题的论文是图论领域的第一篇文章3</data>
</edge>
<edge source="1736年" target="图论">
  <data key="d2">is_a</data>
  <data key="d3">该问题于1736年被欧拉解决，因此普遍认为欧拉是图论的创始人</data>
</edge>
<edge source="1736年" target="创始人">
  <data key="d2">is_a</data>
  <data key="d3">该问题于1736年被欧拉解决，因此普遍认为欧拉是图论的创始人</data>
</edge>
<edge source="1736年" target="第一">
  <data key="d2">is_a</data>
  <data key="d3">一般认为，欧拉于1736年出版的关于柯尼斯堡七桥问题的论文是图论领域的第一篇文章3</data>
</edge>
<edge source="1736年" target="领域">
  <data key="d2">is_a</data>
  <data key="d3">一般认为，欧拉于1736年出版的关于柯尼斯堡七桥问题的论文是图论领域的第一篇文章3</data>
</edge>
<edge source="1736年" target="文章">
  <data key="d2">is_a</data>
  <data key="d3">一般认为，欧拉于1736年出版的关于柯尼斯堡七桥问题的论文是图论领域的第一篇文章3</data>
</edge>
<edge source="欧拉于" target="第一">
  <data key="d2">is_a</data>
  <data key="d3">一般认为，欧拉于1736年出版的关于柯尼斯堡七桥问题的论文是图论领域的第一篇文章3</data>
</edge>
<edge source="欧拉于" target="图论">
  <data key="d2">is_a</data>
  <data key="d3">一般认为，欧拉于1736年出版的关于柯尼斯堡七桥问题的论文是图论领域的第一篇文章3</data>
</edge>
<edge source="欧拉于" target="领域">
  <data key="d2">is_a</data>
  <data key="d3">一般认为，欧拉于1736年出版的关于柯尼斯堡七桥问题的论文是图论领域的第一篇文章3</data>
</edge>
<edge source="欧拉于" target="文章">
  <data key="d2">is_a</data>
  <data key="d3">一般认为，欧拉于1736年出版的关于柯尼斯堡七桥问题的论文是图论领域的第一篇文章3</data>
</edge>
<edge source="柯尼斯堡" target="第一">
  <data key="d2">is_a</data>
  <data key="d3">一般认为，欧拉于1736年出版的关于柯尼斯堡七桥问题的论文是图论领域的第一篇文章3</data>
</edge>
<edge source="柯尼斯堡" target="图论">
  <data key="d2">is_a</data>
  <data key="d3">一般认为，欧拉于1736年出版的关于柯尼斯堡七桥问题的论文是图论领域的第一篇文章3</data>
</edge>
<edge source="柯尼斯堡" target="领域">
  <data key="d2">is_a</data>
  <data key="d3">一般认为，欧拉于1736年出版的关于柯尼斯堡七桥问题的论文是图论领域的第一篇文章3</data>
</edge>
<edge source="柯尼斯堡" target="文章">
  <data key="d2">is_a</data>
  <data key="d3">一般认为，欧拉于1736年出版的关于柯尼斯堡七桥问题的论文是图论领域的第一篇文章3</data>
</edge>
<edge source="周游" target="莱布尼茨">
  <data key="d2">is_a</data>
  <data key="d3">而此论文与范德蒙的一篇关于骑士周游问题的文章，则是继承了莱布尼茨提出的位置分析的方法</data>
</edge>
<edge source="周游" target="分析">
  <data key="d2">is_a</data>
  <data key="d3">而此论文与范德蒙的一篇关于骑士周游问题的文章，则是继承了莱布尼茨提出的位置分析的方法</data>
</edge>
<edge source="周游" target="方法">
  <data key="d2">is_a</data>
  <data key="d3">而此论文与范德蒙的一篇关于骑士周游问题的文章，则是继承了莱布尼茨提出的位置分析的方法</data>
</edge>
<edge source="1857年" target="图论">
  <data key="d2">is_a</data>
  <data key="d3">1857年，哈密顿发明了環遊世界遊戲（英语：icosian game）（icosian game），与此相关的则是另一个广为人知的图论问题哈密顿路径问题</data>
</edge>
<edge source="1857年" target="问题">
  <data key="d2">is_a</data>
  <data key="d3">1857年，哈密顿发明了環遊世界遊戲（英语：icosian game）（icosian game），与此相关的则是另一个广为人知的图论问题哈密顿路径问题</data>
</edge>
<edge source="1857年" target="路径">
  <data key="d2">is_a</data>
  <data key="d3">1857年，哈密顿发明了環遊世界遊戲（英语：icosian game）（icosian game），与此相关的则是另一个广为人知的图论问题哈密顿路径问题</data>
</edge>
<edge source="英语" target="图论">
  <data key="d2">is_a</data>
  <data key="d3">1857年，哈密顿发明了環遊世界遊戲（英语：icosian game）（icosian game），与此相关的则是另一个广为人知的图论问题哈密顿路径问题</data>
</edge>
<edge source="英语" target="问题">
  <data key="d2">is_a</data>
  <data key="d3">1857年，哈密顿发明了環遊世界遊戲（英语：icosian game）（icosian game），与此相关的则是另一个广为人知的图论问题哈密顿路径问题</data>
</edge>
<edge source="英语" target="路径">
  <data key="d2">is_a</data>
  <data key="d3">1857年，哈密顿发明了環遊世界遊戲（英语：icosian game）（icosian game），与此相关的则是另一个广为人知的图论问题哈密顿路径问题</data>
</edge>
<edge source="英语" target="分支">
  <data key="d2">produces</data>
  <data key="d3">图论中概率方法的引入，尤其是埃尔德什和Alfréd Rényi（英语：Alfréd Rényi）关于随机图连通的渐进概率的研究使得图论产生了新的分支随机图论</data>
</edge>
<edge source="英语" target="产生">
  <data key="d2">produces</data>
  <data key="d3">图论中概率方法的引入，尤其是埃尔德什和Alfréd Rényi（英语：Alfréd Rényi）关于随机图连通的渐进概率的研究使得图论产生了新的分支随机图论</data>
</edge>
<edge source="英语" target="教授">
  <data key="d2">is_a</data>
  <data key="d3">第一个使用这个术语的科学机构是哥本哈根大学计算科学系（英语：UCPH Department of Computer Science），该学院成立于1969年，彼得諾爾便是第一任教授</data>
</edge>
<edge source="英语" target="第一">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="英语" target="计算机科学">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="英语" target="信息">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="英语" target="理论">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="英语" target="计算机">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="英语" target="科学">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="英语" target="科学家">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="英语" target="理论家">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="哈密顿" target="图论">
  <data key="d2">is_a</data>
  <data key="d3">1857年，哈密顿发明了環遊世界遊戲（英语：icosian game）（icosian game），与此相关的则是另一个广为人知的图论问题哈密顿路径问题</data>
</edge>
<edge source="哈密顿" target="问题">
  <data key="d2">is_a</data>
  <data key="d3">1857年，哈密顿发明了環遊世界遊戲（英语：icosian game）（icosian game），与此相关的则是另一个广为人知的图论问题哈密顿路径问题</data>
</edge>
<edge source="哈密顿" target="路径">
  <data key="d2">is_a</data>
  <data key="d3">1857年，哈密顿发明了環遊世界遊戲（英语：icosian game）（icosian game），与此相关的则是另一个广为人知的图论问题哈密顿路径问题</data>
</edge>
<edge source="凯莱" target="数学">
  <data key="d2">is_a</data>
  <data key="d3">凯莱将他关于树的研究成果与当时有关化合物的研究联系起来，而图论中有一部分术语正是来源于这种将数学与化学相联系的做法</data>
</edge>
<edge source="凯莱" target="化学">
  <data key="d2">is_a</data>
  <data key="d3">凯莱将他关于树的研究成果与当时有关化合物的研究联系起来，而图论中有一部分术语正是来源于这种将数学与化学相联系的做法</data>
</edge>
<edge source="1969年" target="教授">
  <data key="d2">is_a</data>
  <data key="d3">第一个使用这个术语的科学机构是哥本哈根大学计算科学系（英语：UCPH Department of Computer Science），该学院成立于1969年，彼得諾爾便是第一任教授</data>
</edge>
<edge source="1860年之1930年" target="道路">
  <data key="d2">uses</data>
  <data key="d3">1860年之1930年间，若当库拉托夫斯基和惠特尼从之前独立于图论发展的拓扑学中吸取大量内容进入图论，而现代代数方法的使用更让图论与拓扑走上共同发展的道路</data>
</edge>
<edge source="惠特尼" target="道路">
  <data key="d2">uses</data>
  <data key="d3">1860年之1930年间，若当库拉托夫斯基和惠特尼从之前独立于图论发展的拓扑学中吸取大量内容进入图论，而现代代数方法的使用更让图论与拓扑走上共同发展的道路</data>
</edge>
<edge source="埃尔德什" target="分支">
  <data key="d2">produces</data>
  <data key="d3">图论中概率方法的引入，尤其是埃尔德什和Alfréd Rényi（英语：Alfréd Rényi）关于随机图连通的渐进概率的研究使得图论产生了新的分支随机图论</data>
</edge>
<edge source="埃尔德什" target="产生">
  <data key="d2">produces</data>
  <data key="d3">图论中概率方法的引入，尤其是埃尔德什和Alfréd Rényi（英语：Alfréd Rényi）关于随机图连通的渐进概率的研究使得图论产生了新的分支随机图论</data>
</edge>
<edge source="Alfréd Rényi" target="分支">
  <data key="d2">produces</data>
  <data key="d3">图论中概率方法的引入，尤其是埃尔德什和Alfréd Rényi（英语：Alfréd Rényi）关于随机图连通的渐进概率的研究使得图论产生了新的分支随机图论</data>
</edge>
<edge source="Alfréd Rényi" target="产生">
  <data key="d2">produces</data>
  <data key="d3">图论中概率方法的引入，尤其是埃尔德什和Alfréd Rényi（英语：Alfréd Rényi）关于随机图连通的渐进概率的研究使得图论产生了新的分支随机图论</data>
</edge>
<edge source="Esubsete" target="無序">
  <data key="d2">composed_of</data>
  <data key="d3">圖論中，圖是有序對 G  ( V , E ) displaystyle G(V,E) ，其中 V displaystyle V 是點集； E    x , y  : ( x , y )  V 2 , x  y  displaystyle Esubseteq leftleftx,yright:(x,y)in V2,xneq yright 是邊集，由所有無序頂點對構成（換句話說，邊連接了頂點對）</data>
</edge>
<edge source="Esubsete" target="頂點">
  <data key="d2">composed_of</data>
  <data key="d3">圖論中，圖是有序對 G  ( V , E ) displaystyle G(V,E) ，其中 V displaystyle V 是點集； E    x , y  : ( x , y )  V 2 , x  y  displaystyle Esubseteq leftleftx,yright:(x,y)in V2,xneq yright 是邊集，由所有無序頂點對構成（換句話說，邊連接了頂點對）</data>
</edge>
<edge source="Esubsete" target="換句話說，邊連接了頂點對">
  <data key="d2">composed_of</data>
  <data key="d3">圖論中，圖是有序對 G  ( V , E ) displaystyle G(V,E) ，其中 V displaystyle V 是點集； E    x , y  : ( x , y )  V 2 , x  y  displaystyle Esubseteq leftleftx,yright:(x,y)in V2,xneq yright 是邊集，由所有無序頂點對構成（換句話說，邊連接了頂點對）</data>
</edge>
<edge source="displaystyle" target="( x">
  <data key="d2">is_a</data>
  <data key="d3">圖論中，圖是有序對 G  ( V , E ) displaystyle G(V,E) ，其中 V displaystyle V 是點集； E    x , y  : ( x , y )  V 2 , x  y  displaystyle Esubseteq leftleftx,yright:(x,y)in V2,xneq yright 是邊集，由所有無序頂點對構成（換句話說，邊連接了頂點對）</data>
</edge>
<edge source="displaystyle" target="E    x">
  <data key="d2">is_a</data>
  <data key="d3">圖論中，圖是有序對 G  ( V , E ) displaystyle G(V,E) ，其中 V displaystyle V 是點集； E    x , y  : ( x , y )  V 2 , x  y  displaystyle Esubseteq leftleftx,yright:(x,y)in V2,xneq yright 是邊集，由所有無序頂點對構成（換句話說，邊連接了頂點對）</data>
</edge>
<edge source="displaystyle" target="x , y">
  <data key="d2">is_a</data>
  <data key="d3">圖論中，圖是有序對 G  ( V , E ) displaystyle G(V,E) ，其中 V displaystyle V 是點集； E    x , y  : ( x , y )  V 2 , x  y  displaystyle Esubseteq leftleftx,yright:(x,y)in V2,xneq yright 是邊集，由所有無序頂點對構成（換句話說，邊連接了頂點對）</data>
</edge>
<edge source="displaystyle" target="端點">
  <data key="d2">is_a</data>
  <data key="d3">對於一個邊  x , y  displaystyle leftx,yright ，頂點 x , y displaystyle x,y 被稱作是邊的端點，邊則被稱為連接了此兩個點</data>
</edge>
<edge source="displaystyle" target="空集合">
  <data key="d2">is_a</data>
  <data key="d3">此外， V displaystyle V 通常不被接受是空集合，而 E displaystyle E 則被接受為空集合</data>
</edge>
<edge source="displaystyle" target="無序">
  <data key="d2">composed_of</data>
  <data key="d3">圖論中，圖是有序對 G  ( V , E ) displaystyle G(V,E) ，其中 V displaystyle V 是點集； E    x , y  : ( x , y )  V 2 , x  y  displaystyle Esubseteq leftleftx,yright:(x,y)in V2,xneq yright 是邊集，由所有無序頂點對構成（換句話說，邊連接了頂點對）</data>
</edge>
<edge source="displaystyle" target="頂點">
  <data key="d2">composed_of</data>
  <data key="d3">圖論中，圖是有序對 G  ( V , E ) displaystyle G(V,E) ，其中 V displaystyle V 是點集； E    x , y  : ( x , y )  V 2 , x  y  displaystyle Esubseteq leftleftx,yright:(x,y)in V2,xneq yright 是邊集，由所有無序頂點對構成（換句話說，邊連接了頂點對）</data>
</edge>
<edge source="displaystyle" target="換句話說，邊連接了頂點對">
  <data key="d2">composed_of</data>
  <data key="d3">圖論中，圖是有序對 G  ( V , E ) displaystyle G(V,E) ，其中 V displaystyle V 是點集； E    x , y  : ( x , y )  V 2 , x  y  displaystyle Esubseteq leftleftx,yright:(x,y)in V2,xneq yright 是邊集，由所有無序頂點對構成（換句話說，邊連接了頂點對）</data>
</edge>
<edge source="displaystyle G" target="( x">
  <data key="d2">is_a</data>
  <data key="d3">圖論中，圖是有序對 G  ( V , E ) displaystyle G(V,E) ，其中 V displaystyle V 是點集； E    x , y  : ( x , y )  V 2 , x  y  displaystyle Esubseteq leftleftx,yright:(x,y)in V2,xneq yright 是邊集，由所有無序頂點對構成（換句話說，邊連接了頂點對）</data>
</edge>
<edge source="displaystyle G" target="E    x">
  <data key="d2">is_a</data>
  <data key="d3">圖論中，圖是有序對 G  ( V , E ) displaystyle G(V,E) ，其中 V displaystyle V 是點集； E    x , y  : ( x , y )  V 2 , x  y  displaystyle Esubseteq leftleftx,yright:(x,y)in V2,xneq yright 是邊集，由所有無序頂點對構成（換句話說，邊連接了頂點對）</data>
</edge>
<edge source="displaystyle G" target="x , y">
  <data key="d2">is_a</data>
  <data key="d3">圖論中，圖是有序對 G  ( V , E ) displaystyle G(V,E) ，其中 V displaystyle V 是點集； E    x , y  : ( x , y )  V 2 , x  y  displaystyle Esubseteq leftleftx,yright:(x,y)in V2,xneq yright 是邊集，由所有無序頂點對構成（換句話說，邊連接了頂點對）</data>
</edge>
<edge source="displaystyle G" target="無序">
  <data key="d2">composed_of</data>
  <data key="d3">圖論中，圖是有序對 G  ( V , E ) displaystyle G(V,E) ，其中 V displaystyle V 是點集； E    x , y  : ( x , y )  V 2 , x  y  displaystyle Esubseteq leftleftx,yright:(x,y)in V2,xneq yright 是邊集，由所有無序頂點對構成（換句話說，邊連接了頂點對）</data>
</edge>
<edge source="displaystyle G" target="頂點">
  <data key="d2">composed_of</data>
  <data key="d3">圖論中，圖是有序對 G  ( V , E ) displaystyle G(V,E) ，其中 V displaystyle V 是點集； E    x , y  : ( x , y )  V 2 , x  y  displaystyle Esubseteq leftleftx,yright:(x,y)in V2,xneq yright 是邊集，由所有無序頂點對構成（換句話說，邊連接了頂點對）</data>
</edge>
<edge source="displaystyle G" target="換句話說，邊連接了頂點對">
  <data key="d2">composed_of</data>
  <data key="d3">圖論中，圖是有序對 G  ( V , E ) displaystyle G(V,E) ，其中 V displaystyle V 是點集； E    x , y  : ( x , y )  V 2 , x  y  displaystyle Esubseteq leftleftx,yright:(x,y)in V2,xneq yright 是邊集，由所有無序頂點對構成（換句話說，邊連接了頂點對）</data>
</edge>
<edge source="平面图" target="库拉托夫斯基">
  <data key="d2">is_a</data>
  <data key="d3">一类相关的常见问题要求在给定图中寻找符合某些条件的最大子图，其中有很多是NP完全的，如： 类似地，有些问题要求寻找符合某些条件的最大导出子图，如： 平面图判定：判定给定的图是否是平面图（此问题与子图的关系，参见库拉托夫斯基定理） 一个尚未解决的与子图相关的猜想，重构猜想（Reconstruction conjecture）：一个n阶图是否能够由其所有n1阶导出子图唯一确定</data>
</edge>
<edge source="平面图" target="关系">
  <data key="d2">is_a</data>
  <data key="d3">一类相关的常见问题要求在给定图中寻找符合某些条件的最大子图，其中有很多是NP完全的，如： 类似地，有些问题要求寻找符合某些条件的最大导出子图，如： 平面图判定：判定给定的图是否是平面图（此问题与子图的关系，参见库拉托夫斯基定理） 一个尚未解决的与子图相关的猜想，重构猜想（Reconstruction conjecture）：一个n阶图是否能够由其所有n1阶导出子图唯一确定</data>
</edge>
<edge source="平面图" target="托夫斯">
  <data key="d2">is_a</data>
  <data key="d3">一类相关的常见问题要求在给定图中寻找符合某些条件的最大子图，其中有很多是NP完全的，如： 类似地，有些问题要求寻找符合某些条件的最大导出子图，如： 平面图判定：判定给定的图是否是平面图（此问题与子图的关系，参见库拉托夫斯基定理） 一个尚未解决的与子图相关的猜想，重构猜想（Reconstruction conjecture）：一个n阶图是否能够由其所有n1阶导出子图唯一确定</data>
</edge>
<edge source="平面图" target="此问题与子图的关系，参见库拉托夫斯基定理">
  <data key="d2">is_a</data>
  <data key="d3">一类相关的常见问题要求在给定图中寻找符合某些条件的最大子图，其中有很多是NP完全的，如： 类似地，有些问题要求寻找符合某些条件的最大导出子图，如： 平面图判定：判定给定的图是否是平面图（此问题与子图的关系，参见库拉托夫斯基定理） 一个尚未解决的与子图相关的猜想，重构猜想（Reconstruction conjecture）：一个n阶图是否能够由其所有n1阶导出子图唯一确定</data>
</edge>
<edge source="库拉托夫斯基" target="道路">
  <data key="d2">uses</data>
  <data key="d3">1860年之1930年间，若当库拉托夫斯基和惠特尼从之前独立于图论发展的拓扑学中吸取大量内容进入图论，而现代代数方法的使用更让图论与拓扑走上共同发展的道路</data>
</edge>
<edge source="图论" target="数学">
  <data key="d2">is_a</data>
  <data key="d3">图论（英語：Graph theory），是组合数学分支，和其他数学分支如群论矩阵论拓扑学有着密切关系</data>
</edge>
<edge source="图论" target="分支">
  <data key="d2">produces</data>
  <data key="d3">图论中概率方法的引入，尤其是埃尔德什和Alfréd Rényi（英语：Alfréd Rényi）关于随机图连通的渐进概率的研究使得图论产生了新的分支随机图论</data>
</edge>
<edge source="图论" target="群论">
  <data key="d2">is_a</data>
  <data key="d3">图论（英語：Graph theory），是组合数学分支，和其他数学分支如群论矩阵论拓扑学有着密切关系</data>
</edge>
<edge source="图论" target="矩阵">
  <data key="d2">is_a</data>
  <data key="d3">图论（英語：Graph theory），是组合数学分支，和其他数学分支如群论矩阵论拓扑学有着密切关系</data>
</edge>
<edge source="图论" target="拓扑学">
  <data key="d2">is_a</data>
  <data key="d3">图论（英語：Graph theory），是组合数学分支，和其他数学分支如群论矩阵论拓扑学有着密切关系</data>
</edge>
<edge source="图论" target="化学">
  <data key="d2">is_a</data>
  <data key="d3">凯莱将他关于树的研究成果与当时有关化合物的研究联系起来，而图论中有一部分术语正是来源于这种将数学与化学相联系的做法</data>
</edge>
<edge source="图论" target="成果">
  <data key="d2">produces</data>
  <data key="d3">四色问题可谓是图论研究史上最著名也是产生成果最多的问题之一：是否任何一幅画在平面上的地图都可以用四种颜色染色，使得任意两个相邻的区域不同色</data>
</edge>
<edge source="图论" target="产生">
  <data key="d2">produces</data>
  <data key="d3">四色问题可谓是图论研究史上最著名也是产生成果最多的问题之一：是否任何一幅画在平面上的地图都可以用四种颜色染色，使得任意两个相邻的区域不同色</data>
</edge>
<edge source="图论" target="平面">
  <data key="d2">produces</data>
  <data key="d3">四色问题可谓是图论研究史上最著名也是产生成果最多的问题之一：是否任何一幅画在平面上的地图都可以用四种颜色染色，使得任意两个相邻的区域不同色</data>
</edge>
<edge source="图论" target="是否任何一幅画在平面上的地图都可以用四种颜色染色">
  <data key="d2">produces</data>
  <data key="d3">四色问题可谓是图论研究史上最著名也是产生成果最多的问题之一：是否任何一幅画在平面上的地图都可以用四种颜色染色，使得任意两个相邻的区域不同色</data>
</edge>
<edge source="图论" target="英语">
  <data key="d2">is_a</data>
  <data key="d3">图论中概率方法的引入，尤其是埃尔德什和Alfréd Rényi（英语：Alfréd Rényi）关于随机图连通的渐进概率的研究使得图论产生了新的分支随机图论</data>
</edge>
<edge source="图论" target="埃尔德什">
  <data key="d2">is_a</data>
  <data key="d3">图论中概率方法的引入，尤其是埃尔德什和Alfréd Rényi（英语：Alfréd Rényi）关于随机图连通的渐进概率的研究使得图论产生了新的分支随机图论</data>
</edge>
<edge source="图论" target="Alfréd Rényi">
  <data key="d2">is_a</data>
  <data key="d3">图论中概率方法的引入，尤其是埃尔德什和Alfréd Rényi（英语：Alfréd Rényi）关于随机图连通的渐进概率的研究使得图论产生了新的分支随机图论</data>
</edge>
<edge source="图论" target="埃尔德">
  <data key="d2">is_a</data>
  <data key="d3">图论中概率方法的引入，尤其是埃尔德什和Alfréd Rényi（英语：Alfréd Rényi）关于随机图连通的渐进概率的研究使得图论产生了新的分支随机图论</data>
</edge>
<edge source="图论" target="什和">
  <data key="d2">is_a</data>
  <data key="d3">图论中概率方法的引入，尤其是埃尔德什和Alfréd Rényi（英语：Alfréd Rényi）关于随机图连通的渐进概率的研究使得图论产生了新的分支随机图论</data>
</edge>
<edge source="图论" target="英语：Alfréd Rényi">
  <data key="d2">is_a</data>
  <data key="d3">图论中概率方法的引入，尤其是埃尔德什和Alfréd Rényi（英语：Alfréd Rényi）关于随机图连通的渐进概率的研究使得图论产生了新的分支随机图论</data>
</edge>
<edge source="图论" target="道路">
  <data key="d2">uses</data>
  <data key="d3">1860年之1930年间，若当库拉托夫斯基和惠特尼从之前独立于图论发展的拓扑学中吸取大量内容进入图论，而现代代数方法的使用更让图论与拓扑走上共同发展的道路</data>
</edge>
<edge source="数学" target="科学">
  <data key="d2">is_a</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="数学" target="物理">
  <data key="d2">is_a</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="数学" target="系统">
  <data key="d2">used_for</data>
  <data key="d3">形式化方法是一种特别的基于数学的技术，用于软件和硬件系统的形式规范开发以及驗證</data>
</edge>
<edge source="数学" target="软件">
  <data key="d2">used_for</data>
  <data key="d3">形式化方法是一种特别的基于数学的技术，用于软件和硬件系统的形式规范开发以及驗證</data>
</edge>
<edge source="数学" target="硬件">
  <data key="d2">used_for</data>
  <data key="d3">形式化方法是一种特别的基于数学的技术，用于软件和硬件系统的形式规范开发以及驗證</data>
</edge>
<edge source="数学" target="规范">
  <data key="d2">used_for</data>
  <data key="d3">形式化方法是一种特别的基于数学的技术，用于软件和硬件系统的形式规范开发以及驗證</data>
</edge>
<edge source="数学" target="通用">
  <data key="d2">used_for</data>
  <data key="d3">一些数学模型，如Petri网进程演算和PRAM模型，被建立以用于通用并发计算</data>
</edge>
<edge source="数学" target="智能">
  <data key="d2">used_for</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="数学" target="英语">
  <data key="d2">affects</data>
  <data key="d3">12 早期计算机科学受数学研究成果的影响很大，如库尔特哥德尔艾伦图灵路莎彼得（英语：Rózsa Péter），阿隆佐邱奇等数学家的研究，这两个领域在某些学科，例如数理逻辑范畴论域理论和代数，也不断有有益的思想交流</data>
</edge>
<edge source="数学" target="艾伦">
  <data key="d2">affects</data>
  <data key="d3">12 早期计算机科学受数学研究成果的影响很大，如库尔特哥德尔艾伦图灵路莎彼得（英语：Rózsa Péter），阿隆佐邱奇等数学家的研究，这两个领域在某些学科，例如数理逻辑范畴论域理论和代数，也不断有有益的思想交流</data>
</edge>
<edge source="数学" target="影响">
  <data key="d2">affects</data>
  <data key="d3">12 早期计算机科学受数学研究成果的影响很大，如库尔特哥德尔艾伦图灵路莎彼得（英语：Rózsa Péter），阿隆佐邱奇等数学家的研究，这两个领域在某些学科，例如数理逻辑范畴论域理论和代数，也不断有有益的思想交流</data>
</edge>
<edge source="数学" target="哥德尔">
  <data key="d2">affects</data>
  <data key="d3">12 早期计算机科学受数学研究成果的影响很大，如库尔特哥德尔艾伦图灵路莎彼得（英语：Rózsa Péter），阿隆佐邱奇等数学家的研究，这两个领域在某些学科，例如数理逻辑范畴论域理论和代数，也不断有有益的思想交流</data>
</edge>
<edge source="数学" target="图灵">
  <data key="d2">affects</data>
  <data key="d3">12 早期计算机科学受数学研究成果的影响很大，如库尔特哥德尔艾伦图灵路莎彼得（英语：Rózsa Péter），阿隆佐邱奇等数学家的研究，这两个领域在某些学科，例如数理逻辑范畴论域理论和代数，也不断有有益的思想交流</data>
</edge>
<edge source="数学" target="英语：Rózsa Péter">
  <data key="d2">affects</data>
  <data key="d3">12 早期计算机科学受数学研究成果的影响很大，如库尔特哥德尔艾伦图灵路莎彼得（英语：Rózsa Péter），阿隆佐邱奇等数学家的研究，这两个领域在某些学科，例如数理逻辑范畴论域理论和代数，也不断有有益的思想交流</data>
</edge>
<edge source="数学" target="研究">
  <data key="d2">extends</data>
  <data key="d3">17计算机的概念变得更加清晰，它不仅仅用于数学运算，总的来说计算机科学的领域也扩展到了对于计算的研究</data>
</edge>
<edge source="分支" target="理论">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="分支" target="问题">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="分支" target="性质">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="分支" target="复杂性">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="分支" target="研究">
  <data key="d2">implements</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="分支" target="领域">
  <data key="d2">is_a</data>
  <data key="d3">它是公认的计算机科学分支，同时也是活跃的研究领域，研究成果被发表在众多学术期刊，计算机科学以及工程出版物</data>
</edge>
<edge source="分支" target="期刊">
  <data key="d2">is_a</data>
  <data key="d3">它是公认的计算机科学分支，同时也是活跃的研究领域，研究成果被发表在众多学术期刊，计算机科学以及工程出版物</data>
</edge>
<edge source="分支" target="研究成果">
  <data key="d2">is_a</data>
  <data key="d3">它是公认的计算机科学分支，同时也是活跃的研究领域，研究成果被发表在众多学术期刊，计算机科学以及工程出版物</data>
</edge>
<edge source="分支" target="学术">
  <data key="d2">is_a</data>
  <data key="d3">它是公认的计算机科学分支，同时也是活跃的研究领域，研究成果被发表在众多学术期刊，计算机科学以及工程出版物</data>
</edge>
<edge source="分支" target="活跃">
  <data key="d2">is_a</data>
  <data key="d3">它是公认的计算机科学分支，同时也是活跃的研究领域，研究成果被发表在众多学术期刊，计算机科学以及工程出版物</data>
</edge>
<edge source="分支" target="学术期刊">
  <data key="d2">is_a</data>
  <data key="d3">它是公认的计算机科学分支，同时也是活跃的研究领域，研究成果被发表在众多学术期刊，计算机科学以及工程出版物</data>
</edge>
<edge source="分支" target="信息">
  <data key="d2">includes</data>
  <data key="d3">计算机安全是计算机技术的一个分支，其目标包括保护信息免受未经授权的访问中断和修改，同时为系统的预期用户保持系统的可访问性和可用性</data>
</edge>
<edge source="分支" target="中断">
  <data key="d2">includes</data>
  <data key="d3">计算机安全是计算机技术的一个分支，其目标包括保护信息免受未经授权的访问中断和修改，同时为系统的预期用户保持系统的可访问性和可用性</data>
</edge>
<edge source="分支" target="程式">
  <data key="d2">implements</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="分支" target="語言">
  <data key="d2">implements</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="分支" target="理論">
  <data key="d2">implements</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="分支" target="方法">
  <data key="d2">implements</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="分支" target="分析">
  <data key="d2">implements</data>
  <data key="d3">编程语言理论是计算机科学的一个分支，主要处理编程语言的设计实现分析描述和分类，以及它们的个体特性</data>
</edge>
<edge source="分支" target="分类">
  <data key="d2">implements</data>
  <data key="d3">编程语言理论是计算机科学的一个分支，主要处理编程语言的设计实现分析描述和分类，以及它们的个体特性</data>
</edge>
<edge source="分支" target="个体">
  <data key="d2">implements</data>
  <data key="d3">编程语言理论是计算机科学的一个分支，主要处理编程语言的设计实现分析描述和分类，以及它们的个体特性</data>
</edge>
<edge source="分支" target="特性">
  <data key="d2">implements</data>
  <data key="d3">编程语言理论是计算机科学的一个分支，主要处理编程语言的设计实现分析描述和分类，以及它们的个体特性</data>
</edge>
<edge source="拓扑学" target="道路">
  <data key="d2">uses</data>
  <data key="d3">1860年之1930年间，若当库拉托夫斯基和惠特尼从之前独立于图论发展的拓扑学中吸取大量内容进入图论，而现代代数方法的使用更让图论与拓扑走上共同发展的道路</data>
</edge>
<edge source="顶点" target="事物">
  <data key="d2">used_for</data>
  <data key="d3">顶点用于代表事物，连接两顶点的边则用于表示两个事物间具有这种关系</data>
</edge>
<edge source="顶点" target="代表">
  <data key="d2">used_for</data>
  <data key="d3">顶点用于代表事物，连接两顶点的边则用于表示两个事物间具有这种关系</data>
</edge>
<edge source="顶点" target="边则">
  <data key="d2">used_for</data>
  <data key="d3">顶点用于代表事物，连接两顶点的边则用于表示两个事物间具有这种关系</data>
</edge>
<edge source="边则" target="关系">
  <data key="d2">used_for</data>
  <data key="d3">顶点用于代表事物，连接两顶点的边则用于表示两个事物间具有这种关系</data>
</edge>
<edge source="七桥" target="第一">
  <data key="d2">is_a</data>
  <data key="d3">一般认为，欧拉于1736年出版的关于柯尼斯堡七桥问题的论文是图论领域的第一篇文章3</data>
</edge>
<edge source="七桥" target="图论">
  <data key="d2">is_a</data>
  <data key="d3">一般认为，欧拉于1736年出版的关于柯尼斯堡七桥问题的论文是图论领域的第一篇文章3</data>
</edge>
<edge source="七桥" target="领域">
  <data key="d2">is_a</data>
  <data key="d3">一般认为，欧拉于1736年出版的关于柯尼斯堡七桥问题的论文是图论领域的第一篇文章3</data>
</edge>
<edge source="七桥" target="文章">
  <data key="d2">is_a</data>
  <data key="d3">一般认为，欧拉于1736年出版的关于柯尼斯堡七桥问题的论文是图论领域的第一篇文章3</data>
</edge>
<edge source="欧拉" target="图论">
  <data key="d2">is_a</data>
  <data key="d3">该问题于1736年被欧拉解决，因此普遍认为欧拉是图论的创始人</data>
</edge>
<edge source="欧拉" target="创始人">
  <data key="d2">is_a</data>
  <data key="d3">该问题于1736年被欧拉解决，因此普遍认为欧拉是图论的创始人</data>
</edge>
<edge source="欧拉" target="第一">
  <data key="d2">is_a</data>
  <data key="d3">一般认为，欧拉于1736年出版的关于柯尼斯堡七桥问题的论文是图论领域的第一篇文章3</data>
</edge>
<edge source="欧拉" target="领域">
  <data key="d2">is_a</data>
  <data key="d3">一般认为，欧拉于1736年出版的关于柯尼斯堡七桥问题的论文是图论领域的第一篇文章3</data>
</edge>
<edge source="欧拉" target="文章">
  <data key="d2">is_a</data>
  <data key="d3">一般认为，欧拉于1736年出版的关于柯尼斯堡七桥问题的论文是图论领域的第一篇文章3</data>
</edge>
<edge source="文章" target="莱布尼茨">
  <data key="d2">is_a</data>
  <data key="d3">而此论文与范德蒙的一篇关于骑士周游问题的文章，则是继承了莱布尼茨提出的位置分析的方法</data>
</edge>
<edge source="文章" target="分析">
  <data key="d2">is_a</data>
  <data key="d3">而此论文与范德蒙的一篇关于骑士周游问题的文章，则是继承了莱布尼茨提出的位置分析的方法</data>
</edge>
<edge source="文章" target="方法">
  <data key="d2">is_a</data>
  <data key="d3">而此论文与范德蒙的一篇关于骑士周游问题的文章，则是继承了莱布尼茨提出的位置分析的方法</data>
</edge>
<edge source="德蒙" target="莱布尼茨">
  <data key="d2">is_a</data>
  <data key="d3">而此论文与范德蒙的一篇关于骑士周游问题的文章，则是继承了莱布尼茨提出的位置分析的方法</data>
</edge>
<edge source="德蒙" target="分析">
  <data key="d2">is_a</data>
  <data key="d3">而此论文与范德蒙的一篇关于骑士周游问题的文章，则是继承了莱布尼茨提出的位置分析的方法</data>
</edge>
<edge source="德蒙" target="方法">
  <data key="d2">is_a</data>
  <data key="d3">而此论文与范德蒙的一篇关于骑士周游问题的文章，则是继承了莱布尼茨提出的位置分析的方法</data>
</edge>
<edge source="骑士" target="莱布尼茨">
  <data key="d2">is_a</data>
  <data key="d3">而此论文与范德蒙的一篇关于骑士周游问题的文章，则是继承了莱布尼茨提出的位置分析的方法</data>
</edge>
<edge source="骑士" target="分析">
  <data key="d2">is_a</data>
  <data key="d3">而此论文与范德蒙的一篇关于骑士周游问题的文章，则是继承了莱布尼茨提出的位置分析的方法</data>
</edge>
<edge source="骑士" target="方法">
  <data key="d2">is_a</data>
  <data key="d3">而此论文与范德蒙的一篇关于骑士周游问题的文章，则是继承了莱布尼茨提出的位置分析的方法</data>
</edge>
<edge source="分析" target="发展">
  <data key="d2">used_for</data>
  <data key="d3">科学知识图谱也称为知识域可视化（Mapping Knowledge Domains），是用于绘制分析和显示学科或学术研究主体之间的相互联系，用于揭示显示科学知识发展进程与结构关系的可视化工具1</data>
</edge>
<edge source="分析" target="进程">
  <data key="d2">used_for</data>
  <data key="d3">科学知识图谱也称为知识域可视化（Mapping Knowledge Domains），是用于绘制分析和显示学科或学术研究主体之间的相互联系，用于揭示显示科学知识发展进程与结构关系的可视化工具1</data>
</edge>
<edge source="分析" target="结构">
  <data key="d2">used_for</data>
  <data key="d3">科学知识图谱也称为知识域可视化（Mapping Knowledge Domains），是用于绘制分析和显示学科或学术研究主体之间的相互联系，用于揭示显示科学知识发展进程与结构关系的可视化工具1</data>
</edge>
<edge source="分析" target="关系">
  <data key="d2">used_for</data>
  <data key="d3">科学知识图谱也称为知识域可视化（Mapping Knowledge Domains），是用于绘制分析和显示学科或学术研究主体之间的相互联系，用于揭示显示科学知识发展进程与结构关系的可视化工具1</data>
</edge>
<edge source="分析" target="热点">
  <data key="d2">is_a</data>
  <data key="d3">图书馆学侧重于图书馆业务流程和相关学科的研究，包括图书馆哲学图书馆学理论图书馆管理和图书馆业务技术等；情报学侧重于情报的分析和利用，包括情报学理论情报采集情报分析情报检索以及二次三次文献编辑利用，目前情报技术也是研究热点之一</data>
</edge>
<edge source="分析" target="情报检索">
  <data key="d2">includes</data>
  <data key="d3">图书馆学侧重于图书馆业务流程和相关学科的研究，包括图书馆哲学图书馆学理论图书馆管理和图书馆业务技术等；情报学侧重于情报的分析和利用，包括情报学理论情报采集情报分析情报检索以及二次三次文献编辑利用，目前情报技术也是研究热点之一</data>
</edge>
<edge source="遊戲" target="图论">
  <data key="d2">is_a</data>
  <data key="d3">1857年，哈密顿发明了環遊世界遊戲（英语：icosian game）（icosian game），与此相关的则是另一个广为人知的图论问题哈密顿路径问题</data>
</edge>
<edge source="遊戲" target="问题">
  <data key="d2">is_a</data>
  <data key="d3">1857年，哈密顿发明了環遊世界遊戲（英语：icosian game）（icosian game），与此相关的则是另一个广为人知的图论问题哈密顿路径问题</data>
</edge>
<edge source="遊戲" target="路径">
  <data key="d2">is_a</data>
  <data key="d3">1857年，哈密顿发明了環遊世界遊戲（英语：icosian game）（icosian game），与此相关的则是另一个广为人知的图论问题哈密顿路径问题</data>
</edge>
<edge source="世纪" target="图书馆">
  <data key="d2">composed_of</data>
  <data key="d3">圖書資訊學註 1（英語：library and information science, LIS）于20世纪70年代由图书馆学與信息学两大领域合并而成</data>
</edge>
<edge source="世纪" target="信息学">
  <data key="d2">composed_of</data>
  <data key="d3">圖書資訊學註 1（英語：library and information science, LIS）于20世纪70年代由图书馆学與信息学两大领域合并而成</data>
</edge>
<edge source="世纪" target="图书馆学">
  <data key="d2">composed_of</data>
  <data key="d3">圖書資訊學註 1（英語：library and information science, LIS）于20世纪70年代由图书馆学與信息学两大领域合并而成</data>
</edge>
<edge source="世纪" target="领域">
  <data key="d2">composed_of</data>
  <data key="d3">圖書資訊學註 1（英語：library and information science, LIS）于20世纪70年代由图书馆学與信息学两大领域合并而成</data>
</edge>
<edge source="世纪" target="信息">
  <data key="d2">composed_of</data>
  <data key="d3">圖書資訊學註 1（英語：library and information science, LIS）于20世纪70年代由图书馆学與信息学两大领域合并而成</data>
</edge>
<edge source="世纪" target="祖先">
  <data key="d2">used_for</data>
  <data key="d3">到了20世纪40年代，随着更新更强大的计算机器(如ABC计算机电子数值积分计算机)被发明，术语计算机开始用于指代那些机器而不是它们的祖先</data>
</edge>
<edge source="世纪" target="事情">
  <data key="d2">is_a</data>
  <data key="d3">2020世纪50年代后期，计算机科学学科還在发展階段，这種問題在当时是一件很常見的事情</data>
</edge>
<edge source="世纪" target="指代">
  <data key="d2">used_for</data>
  <data key="d3">到了20世纪40年代，随着更新更强大的计算机器(如ABC计算机电子数值积分计算机)被发明，术语计算机开始用于指代那些机器而不是它们的祖先</data>
</edge>
<edge source="树状" target="问题">
  <data key="d2">is_a</data>
  <data key="d3">由于有机化学中有许多树状结构的分子，这些研究对于理论化学有着重要意义，尤其是其中关于具有某一特定性质的图的计数问题</data>
</edge>
<edge source="树状" target="性质">
  <data key="d2">is_a</data>
  <data key="d3">由于有机化学中有许多树状结构的分子，这些研究对于理论化学有着重要意义，尤其是其中关于具有某一特定性质的图的计数问题</data>
</edge>
<edge source="树状" target="计数问题">
  <data key="d2">is_a</data>
  <data key="d3">由于有机化学中有许多树状结构的分子，这些研究对于理论化学有着重要意义，尤其是其中关于具有某一特定性质的图的计数问题</data>
</edge>
<edge source="树状" target="计数">
  <data key="d2">is_a</data>
  <data key="d3">由于有机化学中有许多树状结构的分子，这些研究对于理论化学有着重要意义，尤其是其中关于具有某一特定性质的图的计数问题</data>
</edge>
<edge source="分子" target="问题">
  <data key="d2">is_a</data>
  <data key="d3">由于有机化学中有许多树状结构的分子，这些研究对于理论化学有着重要意义，尤其是其中关于具有某一特定性质的图的计数问题</data>
</edge>
<edge source="分子" target="性质">
  <data key="d2">is_a</data>
  <data key="d3">由于有机化学中有许多树状结构的分子，这些研究对于理论化学有着重要意义，尤其是其中关于具有某一特定性质的图的计数问题</data>
</edge>
<edge source="分子" target="计数问题">
  <data key="d2">is_a</data>
  <data key="d3">由于有机化学中有许多树状结构的分子，这些研究对于理论化学有着重要意义，尤其是其中关于具有某一特定性质的图的计数问题</data>
</edge>
<edge source="分子" target="计数">
  <data key="d2">is_a</data>
  <data key="d3">由于有机化学中有许多树状结构的分子，这些研究对于理论化学有着重要意义，尤其是其中关于具有某一特定性质的图的计数问题</data>
</edge>
<edge source="化学" target="问题">
  <data key="d2">is_a</data>
  <data key="d3">由于有机化学中有许多树状结构的分子，这些研究对于理论化学有着重要意义，尤其是其中关于具有某一特定性质的图的计数问题</data>
</edge>
<edge source="化学" target="性质">
  <data key="d2">is_a</data>
  <data key="d3">由于有机化学中有许多树状结构的分子，这些研究对于理论化学有着重要意义，尤其是其中关于具有某一特定性质的图的计数问题</data>
</edge>
<edge source="化学" target="计数问题">
  <data key="d2">is_a</data>
  <data key="d3">由于有机化学中有许多树状结构的分子，这些研究对于理论化学有着重要意义，尤其是其中关于具有某一特定性质的图的计数问题</data>
</edge>
<edge source="化学" target="计数">
  <data key="d2">is_a</data>
  <data key="d3">由于有机化学中有许多树状结构的分子，这些研究对于理论化学有着重要意义，尤其是其中关于具有某一特定性质的图的计数问题</data>
</edge>
<edge source="性质" target="研究">
  <data key="d2">implements</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="性质" target="方法">
  <data key="d2">implements</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="性质" target="程式设计">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="性质" target="设计">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="性质" target="目的">
  <data key="d2">is_a</data>
  <data key="d3">David Parnas从其它工程和科学学科之间的关系得到启示，宣称计算机科学的主要重点总的来说是研究计算的性质，而软件工程的主要重点是具体的计算设计，以达到实用的目的，这样便构成了两个独立但又互补的学科</data>
</edge>
<edge source="性质" target="程式">
  <data key="d2">implements</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="性质" target="語言">
  <data key="d2">implements</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="性质" target="理論">
  <data key="d2">implements</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="成果" target="数学">
  <data key="d2">is_a</data>
  <data key="d3">凯莱将他关于树的研究成果与当时有关化合物的研究联系起来，而图论中有一部分术语正是来源于这种将数学与化学相联系的做法</data>
</edge>
<edge source="成果" target="化学">
  <data key="d2">is_a</data>
  <data key="d3">凯莱将他关于树的研究成果与当时有关化合物的研究联系起来，而图论中有一部分术语正是来源于这种将数学与化学相联系的做法</data>
</edge>
<edge source="成果" target="平面">
  <data key="d2">is_a</data>
  <data key="d3">四色问题可谓是图论研究史上最著名也是产生成果最多的问题之一：是否任何一幅画在平面上的地图都可以用四种颜色染色，使得任意两个相邻的区域不同色</data>
</edge>
<edge source="成果" target="地图">
  <data key="d2">is_a</data>
  <data key="d3">四色问题可谓是图论研究史上最著名也是产生成果最多的问题之一：是否任何一幅画在平面上的地图都可以用四种颜色染色，使得任意两个相邻的区域不同色</data>
</edge>
<edge source="成果" target="颜色">
  <data key="d2">is_a</data>
  <data key="d3">四色问题可谓是图论研究史上最著名也是产生成果最多的问题之一：是否任何一幅画在平面上的地图都可以用四种颜色染色，使得任意两个相邻的区域不同色</data>
</edge>
<edge source="成果" target="是否任何一幅画在平面上的地图都可以用四种颜色染色">
  <data key="d2">is_a</data>
  <data key="d3">四色问题可谓是图论研究史上最著名也是产生成果最多的问题之一：是否任何一幅画在平面上的地图都可以用四种颜色染色，使得任意两个相邻的区域不同色</data>
</edge>
<edge source="研究成果" target="数学">
  <data key="d2">is_a</data>
  <data key="d3">凯莱将他关于树的研究成果与当时有关化合物的研究联系起来，而图论中有一部分术语正是来源于这种将数学与化学相联系的做法</data>
</edge>
<edge source="研究成果" target="化学">
  <data key="d2">is_a</data>
  <data key="d3">凯莱将他关于树的研究成果与当时有关化合物的研究联系起来，而图论中有一部分术语正是来源于这种将数学与化学相联系的做法</data>
</edge>
<edge source="研究成果" target="英语">
  <data key="d2">affects</data>
  <data key="d3">12 早期计算机科学受数学研究成果的影响很大，如库尔特哥德尔艾伦图灵路莎彼得（英语：Rózsa Péter），阿隆佐邱奇等数学家的研究，这两个领域在某些学科，例如数理逻辑范畴论域理论和代数，也不断有有益的思想交流</data>
</edge>
<edge source="研究成果" target="艾伦">
  <data key="d2">affects</data>
  <data key="d3">12 早期计算机科学受数学研究成果的影响很大，如库尔特哥德尔艾伦图灵路莎彼得（英语：Rózsa Péter），阿隆佐邱奇等数学家的研究，这两个领域在某些学科，例如数理逻辑范畴论域理论和代数，也不断有有益的思想交流</data>
</edge>
<edge source="研究成果" target="影响">
  <data key="d2">affects</data>
  <data key="d3">12 早期计算机科学受数学研究成果的影响很大，如库尔特哥德尔艾伦图灵路莎彼得（英语：Rózsa Péter），阿隆佐邱奇等数学家的研究，这两个领域在某些学科，例如数理逻辑范畴论域理论和代数，也不断有有益的思想交流</data>
</edge>
<edge source="研究成果" target="哥德尔">
  <data key="d2">affects</data>
  <data key="d3">12 早期计算机科学受数学研究成果的影响很大，如库尔特哥德尔艾伦图灵路莎彼得（英语：Rózsa Péter），阿隆佐邱奇等数学家的研究，这两个领域在某些学科，例如数理逻辑范畴论域理论和代数，也不断有有益的思想交流</data>
</edge>
<edge source="研究成果" target="图灵">
  <data key="d2">affects</data>
  <data key="d3">12 早期计算机科学受数学研究成果的影响很大，如库尔特哥德尔艾伦图灵路莎彼得（英语：Rózsa Péter），阿隆佐邱奇等数学家的研究，这两个领域在某些学科，例如数理逻辑范畴论域理论和代数，也不断有有益的思想交流</data>
</edge>
<edge source="研究成果" target="英语：Rózsa Péter">
  <data key="d2">affects</data>
  <data key="d3">12 早期计算机科学受数学研究成果的影响很大，如库尔特哥德尔艾伦图灵路莎彼得（英语：Rózsa Péter），阿隆佐邱奇等数学家的研究，这两个领域在某些学科，例如数理逻辑范畴论域理论和代数，也不断有有益的思想交流</data>
</edge>
<edge source="化合物" target="数学">
  <data key="d2">is_a</data>
  <data key="d3">凯莱将他关于树的研究成果与当时有关化合物的研究联系起来，而图论中有一部分术语正是来源于这种将数学与化学相联系的做法</data>
</edge>
<edge source="化合物" target="化学">
  <data key="d2">is_a</data>
  <data key="d3">凯莱将他关于树的研究成果与当时有关化合物的研究联系起来，而图论中有一部分术语正是来源于这种将数学与化学相联系的做法</data>
</edge>
<edge source="术语" target="数学">
  <data key="d2">is_a</data>
  <data key="d3">凯莱将他关于树的研究成果与当时有关化合物的研究联系起来，而图论中有一部分术语正是来源于这种将数学与化学相联系的做法</data>
</edge>
<edge source="术语" target="化学">
  <data key="d2">is_a</data>
  <data key="d3">凯莱将他关于树的研究成果与当时有关化合物的研究联系起来，而图论中有一部分术语正是来源于这种将数学与化学相联系的做法</data>
</edge>
<edge source="术语" target="计算机">
  <data key="d2">is_a</data>
  <data key="d3">丹麦科学家彼得諾爾建议使用术语"datalogy"，以反映这一事实，即科学学科是围绕着数据和数据处理，而不一定要涉及计算机</data>
</edge>
<edge source="术语" target="数据">
  <data key="d2">is_a</data>
  <data key="d3">丹麦科学家彼得諾爾建议使用术语"datalogy"，以反映这一事实，即科学学科是围绕着数据和数据处理，而不一定要涉及计算机</data>
</edge>
<edge source="术语" target="数据处理">
  <data key="d2">is_a</data>
  <data key="d3">丹麦科学家彼得諾爾建议使用术语"datalogy"，以反映这一事实，即科学学科是围绕着数据和数据处理，而不一定要涉及计算机</data>
</edge>
<edge source="术语" target="英语">
  <data key="d2">is_a</data>
  <data key="d3">第一个使用这个术语的科学机构是哥本哈根大学计算科学系（英语：UCPH Department of Computer Science），该学院成立于1969年，彼得諾爾便是第一任教授</data>
</edge>
<edge source="术语" target="UCPH Department of Computer Science">
  <data key="d2">is_a</data>
  <data key="d3">第一个使用这个术语的科学机构是哥本哈根大学计算科学系（英语：UCPH Department of Computer Science），该学院成立于1969年，彼得諾爾便是第一任教授</data>
</edge>
<edge source="术语" target="大学">
  <data key="d2">is_a</data>
  <data key="d3">第一个使用这个术语的科学机构是哥本哈根大学计算科学系（英语：UCPH Department of Computer Science），该学院成立于1969年，彼得諾爾便是第一任教授</data>
</edge>
<edge source="术语" target="哥本哈根大学">
  <data key="d2">is_a</data>
  <data key="d3">第一个使用这个术语的科学机构是哥本哈根大学计算科学系（英语：UCPH Department of Computer Science），该学院成立于1969年，彼得諾爾便是第一任教授</data>
</edge>
<edge source="术语" target="科学系">
  <data key="d2">is_a</data>
  <data key="d3">第一个使用这个术语的科学机构是哥本哈根大学计算科学系（英语：UCPH Department of Computer Science），该学院成立于1969年，彼得諾爾便是第一任教授</data>
</edge>
<edge source="术语" target="UCPH Department of Computer Science）">
  <data key="d2">is_a</data>
  <data key="d3">第一个使用这个术语的科学机构是哥本哈根大学计算科学系（英语：UCPH Department of Computer Science），该学院成立于1969年，彼得諾爾便是第一任教授</data>
</edge>
<edge source="术语" target="英语：UCPH Department of Computer Science">
  <data key="d2">is_a</data>
  <data key="d3">第一个使用这个术语的科学机构是哥本哈根大学计算科学系（英语：UCPH Department of Computer Science），该学院成立于1969年，彼得諾爾便是第一任教授</data>
</edge>
<edge source="术语" target="祖先">
  <data key="d2">used_for</data>
  <data key="d3">到了20世纪40年代，随着更新更强大的计算机器(如ABC计算机电子数值积分计算机)被发明，术语计算机开始用于指代那些机器而不是它们的祖先</data>
</edge>
<edge source="术语" target="北欧">
  <data key="d2">used_for</data>
  <data key="d3">这个术语主要被用于北欧国家</data>
</edge>
<edge source="术语" target="北欧国家">
  <data key="d2">used_for</data>
  <data key="d3">这个术语主要被用于北欧国家</data>
</edge>
<edge source="术语" target="指代">
  <data key="d2">used_for</data>
  <data key="d3">到了20世纪40年代，随着更新更强大的计算机器(如ABC计算机电子数值积分计算机)被发明，术语计算机开始用于指代那些机器而不是它们的祖先</data>
</edge>
<edge source="四色问题" target="图论">
  <data key="d2">is_a</data>
  <data key="d3">四色问题可谓是图论研究史上最著名也是产生成果最多的问题之一：是否任何一幅画在平面上的地图都可以用四种颜色染色，使得任意两个相邻的区域不同色</data>
</edge>
<edge source="四色问题" target="研究">
  <data key="d2">is_a</data>
  <data key="d3">四色问题可谓是图论研究史上最著名也是产生成果最多的问题之一：是否任何一幅画在平面上的地图都可以用四种颜色染色，使得任意两个相邻的区域不同色</data>
</edge>
<edge source="四色问题" target="成果">
  <data key="d2">produces</data>
  <data key="d3">四色问题可谓是图论研究史上最著名也是产生成果最多的问题之一：是否任何一幅画在平面上的地图都可以用四种颜色染色，使得任意两个相邻的区域不同色</data>
</edge>
<edge source="四色问题" target="产生">
  <data key="d2">produces</data>
  <data key="d3">四色问题可谓是图论研究史上最著名也是产生成果最多的问题之一：是否任何一幅画在平面上的地图都可以用四种颜色染色，使得任意两个相邻的区域不同色</data>
</edge>
<edge source="四色问题" target="平面">
  <data key="d2">produces</data>
  <data key="d3">四色问题可谓是图论研究史上最著名也是产生成果最多的问题之一：是否任何一幅画在平面上的地图都可以用四种颜色染色，使得任意两个相邻的区域不同色</data>
</edge>
<edge source="四色问题" target="是否任何一幅画在平面上的地图都可以用四种颜色染色">
  <data key="d2">produces</data>
  <data key="d3">四色问题可谓是图论研究史上最著名也是产生成果最多的问题之一：是否任何一幅画在平面上的地图都可以用四种颜色染色，使得任意两个相邻的区域不同色</data>
</edge>
<edge source="产生" target="平面">
  <data key="d2">is_a</data>
  <data key="d3">四色问题可谓是图论研究史上最著名也是产生成果最多的问题之一：是否任何一幅画在平面上的地图都可以用四种颜色染色，使得任意两个相邻的区域不同色</data>
</edge>
<edge source="产生" target="地图">
  <data key="d2">is_a</data>
  <data key="d3">四色问题可谓是图论研究史上最著名也是产生成果最多的问题之一：是否任何一幅画在平面上的地图都可以用四种颜色染色，使得任意两个相邻的区域不同色</data>
</edge>
<edge source="产生" target="颜色">
  <data key="d2">is_a</data>
  <data key="d3">四色问题可谓是图论研究史上最著名也是产生成果最多的问题之一：是否任何一幅画在平面上的地图都可以用四种颜色染色，使得任意两个相邻的区域不同色</data>
</edge>
<edge source="产生" target="是否任何一幅画在平面上的地图都可以用四种颜色染色">
  <data key="d2">is_a</data>
  <data key="d3">四色问题可谓是图论研究史上最著名也是产生成果最多的问题之一：是否任何一幅画在平面上的地图都可以用四种颜色染色，使得任意两个相邻的区域不同色</data>
</edge>
<edge source="产生" target="列表">
  <data key="d2">is_a</data>
  <data key="d3">Google的约翰娜怀特解释说，搜索引擎使用知识图谱的数据产生的结果：知识图谱知道，圣克鲁斯是一个地方，且此列表与圣克鲁斯有关</data>
</edge>
<edge source="产生" target="地方">
  <data key="d2">is_a</data>
  <data key="d3">Google的约翰娜怀特解释说，搜索引擎使用知识图谱的数据产生的结果：知识图谱知道，圣克鲁斯是一个地方，且此列表与圣克鲁斯有关</data>
</edge>
<edge source="产生" target="有关">
  <data key="d2">is_a</data>
  <data key="d3">Google的约翰娜怀特解释说，搜索引擎使用知识图谱的数据产生的结果：知识图谱知道，圣克鲁斯是一个地方，且此列表与圣克鲁斯有关</data>
</edge>
<edge source="平面" target="库拉托夫斯基">
  <data key="d2">is_a</data>
  <data key="d3">一类相关的常见问题要求在给定图中寻找符合某些条件的最大子图，其中有很多是NP完全的，如： 类似地，有些问题要求寻找符合某些条件的最大导出子图，如： 平面图判定：判定给定的图是否是平面图（此问题与子图的关系，参见库拉托夫斯基定理） 一个尚未解决的与子图相关的猜想，重构猜想（Reconstruction conjecture）：一个n阶图是否能够由其所有n1阶导出子图唯一确定</data>
</edge>
<edge source="平面" target="关系">
  <data key="d2">is_a</data>
  <data key="d3">一类相关的常见问题要求在给定图中寻找符合某些条件的最大子图，其中有很多是NP完全的，如： 类似地，有些问题要求寻找符合某些条件的最大导出子图，如： 平面图判定：判定给定的图是否是平面图（此问题与子图的关系，参见库拉托夫斯基定理） 一个尚未解决的与子图相关的猜想，重构猜想（Reconstruction conjecture）：一个n阶图是否能够由其所有n1阶导出子图唯一确定</data>
</edge>
<edge source="平面" target="托夫斯">
  <data key="d2">is_a</data>
  <data key="d3">一类相关的常见问题要求在给定图中寻找符合某些条件的最大子图，其中有很多是NP完全的，如： 类似地，有些问题要求寻找符合某些条件的最大导出子图，如： 平面图判定：判定给定的图是否是平面图（此问题与子图的关系，参见库拉托夫斯基定理） 一个尚未解决的与子图相关的猜想，重构猜想（Reconstruction conjecture）：一个n阶图是否能够由其所有n1阶导出子图唯一确定</data>
</edge>
<edge source="平面" target="此问题与子图的关系，参见库拉托夫斯基定理">
  <data key="d2">is_a</data>
  <data key="d3">一类相关的常见问题要求在给定图中寻找符合某些条件的最大子图，其中有很多是NP完全的，如： 类似地，有些问题要求寻找符合某些条件的最大导出子图，如： 平面图判定：判定给定的图是否是平面图（此问题与子图的关系，参见库拉托夫斯基定理） 一个尚未解决的与子图相关的猜想，重构猜想（Reconstruction conjecture）：一个n阶图是否能够由其所有n1阶导出子图唯一确定</data>
</edge>
<edge source="计算机" target="系统性">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="计算机" target="研究">
  <data key="d2">extends</data>
  <data key="d3">17计算机的概念变得更加清晰，它不仅仅用于数学运算，总的来说计算机科学的领域也扩展到了对于计算的研究</data>
</edge>
<edge source="计算机" target="信息">
  <data key="d2">includes</data>
  <data key="d3">计算机安全是计算机技术的一个分支，其目标包括保护信息免受未经授权的访问中断和修改，同时为系统的预期用户保持系统的可访问性和可用性</data>
</edge>
<edge source="计算机" target="理论">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="计算机" target="基础">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="计算机" target="计算机系统">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="计算机" target="系统">
  <data key="d2">implements</data>
  <data key="d3">Eden提议了三种范式应用于计算机科学的各个领域：31 作为一个学科，计算机科学涵盖了从算法的理论研究和计算的极限，到如何通过硬件和软件实现计算系统</data>
</edge>
<edge source="计算机" target="问题">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="计算机" target="性质">
  <data key="d2">implements</data>
  <data key="d3">其实计算机科学所关注的，不仅仅是去理解实现类似游戏浏览器这些软件的程序的性质，更要通过现有的知识创造新的程序或者改进已有的程序</data>
</edge>
<edge source="计算机" target="复杂性">
  <data key="d2">based_on</data>
  <data key="d3">现代密码学主要跟计算机科学相关，很多加密和解密算法都是基于它们的计算复杂性</data>
</edge>
<edge source="计算机" target="事业">
  <data key="d2">is_a</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="计算机" target="信息技术">
  <data key="d2">is_a</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="计算机" target="技术">
  <data key="d2">implements</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="计算机" target="比如信息技术">
  <data key="d2">is_a</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="计算机" target="游戏">
  <data key="d2">uses</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="计算机" target="浏览器">
  <data key="d2">implements</data>
  <data key="d3">其实计算机科学所关注的，不仅仅是去理解实现类似游戏浏览器这些软件的程序的性质，更要通过现有的知识创造新的程序或者改进已有的程序</data>
</edge>
<edge source="计算机" target="软件">
  <data key="d2">implements</data>
  <data key="d3">其实计算机科学所关注的，不仅仅是去理解实现类似游戏浏览器这些软件的程序的性质，更要通过现有的知识创造新的程序或者改进已有的程序</data>
</edge>
<edge source="计算机" target="程序">
  <data key="d2">implements</data>
  <data key="d3">其实计算机科学所关注的，不仅仅是去理解实现类似游戏浏览器这些软件的程序的性质，更要通过现有的知识创造新的程序或者改进已有的程序</data>
</edge>
<edge source="计算机" target="天文学">
  <data key="d2">is_a</data>
  <data key="d3">著名计算机科学家艾兹赫尔戴克斯特拉曾经指出：计算机科学并不只是关于计算机，就像天文学并不只是关于望远镜一样</data>
</edge>
<edge source="计算机" target="望远镜">
  <data key="d2">is_a</data>
  <data key="d3">著名计算机科学家艾兹赫尔戴克斯特拉曾经指出：计算机科学并不只是关于计算机，就像天文学并不只是关于望远镜一样</data>
</edge>
<edge source="计算机" target="计算机科学">
  <data key="d2">used_for</data>
  <data key="d3">17计算机的概念变得更加清晰，它不仅仅用于数学运算，总的来说计算机科学的领域也扩展到了对于计算的研究</data>
</edge>
<edge source="计算机" target="学科">
  <data key="d2">implements</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="计算机" target="领域">
  <data key="d2">used_for</data>
  <data key="d3">17计算机的概念变得更加清晰，它不仅仅用于数学运算，总的来说计算机科学的领域也扩展到了对于计算的研究</data>
</edge>
<edge source="计算机" target="科学">
  <data key="d2">used_for</data>
  <data key="d3">17计算机的概念变得更加清晰，它不仅仅用于数学运算，总的来说计算机科学的领域也扩展到了对于计算的研究</data>
</edge>
<edge source="计算机" target="工程">
  <data key="d2">affects</data>
  <data key="d3">它属于计算机科学学科，既受影响于也影响着数学软件工程和语言学</data>
</edge>
<edge source="计算机" target="商业">
  <data key="d2">is_a</data>
  <data key="d3">例如，研究计算机硬件被看作是计算机工程的一部分，而对于商业计算机系统的研究和部署被称为信息技术或者信息系统</data>
</edge>
<edge source="计算机" target="部分">
  <data key="d2">is_a</data>
  <data key="d3">例如，研究计算机硬件被看作是计算机工程的一部分，而对于商业计算机系统的研究和部署被称为信息技术或者信息系统</data>
</edge>
<edge source="计算机" target="祖先">
  <data key="d2">used_for</data>
  <data key="d3">到了20世纪40年代，随着更新更强大的计算机器(如ABC计算机电子数值积分计算机)被发明，术语计算机开始用于指代那些机器而不是它们的祖先</data>
</edge>
<edge source="计算机" target="50年">
  <data key="d2">is_a</data>
  <data key="d3">虽然最初很多人并不相信计算机可能成为科学研究的领域，但是随后的50年里也逐渐被学术界认可</data>
</edge>
<edge source="计算机" target="学术">
  <data key="d2">is_a</data>
  <data key="d3">虽然最初很多人并不相信计算机可能成为科学研究的领域，但是随后的50年里也逐渐被学术界认可</data>
</edge>
<edge source="计算机" target="学术界">
  <data key="d2">is_a</data>
  <data key="d3">虽然最初很多人并不相信计算机可能成为科学研究的领域，但是随后的50年里也逐渐被学术界认可</data>
</edge>
<edge source="计算机" target="事情">
  <data key="d2">is_a</data>
  <data key="d3">2020世纪50年代后期，计算机科学学科還在发展階段，这種問題在当时是一件很常見的事情</data>
</edge>
<edge source="计算机" target="資訊革命">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="计算机" target="时代">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="计算机" target="革命">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="计算机" target="信息时代">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="计算机" target="奠基">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="计算机" target="資訊">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="计算机" target="驱动力">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="计算机" target="科学技术">
  <data key="d2">is_a</data>
  <data key="d3">35算法是计算机科学研究的一个重要领域，也是许多其他计算机科学技术的基础</data>
</edge>
<edge source="计算机" target="自动">
  <data key="d2">is_a</data>
  <data key="d3">Denning的说法，计算机科学的最根本问题是什么能够被有效地自动化</data>
</edge>
<edge source="计算机" target="期刊">
  <data key="d2">is_a</data>
  <data key="d3">它是公认的计算机科学分支，同时也是活跃的研究领域，研究成果被发表在众多学术期刊，计算机科学以及工程出版物</data>
</edge>
<edge source="计算机" target="研究成果">
  <data key="d2">is_a</data>
  <data key="d3">它是公认的计算机科学分支，同时也是活跃的研究领域，研究成果被发表在众多学术期刊，计算机科学以及工程出版物</data>
</edge>
<edge source="计算机" target="活跃">
  <data key="d2">is_a</data>
  <data key="d3">它是公认的计算机科学分支，同时也是活跃的研究领域，研究成果被发表在众多学术期刊，计算机科学以及工程出版物</data>
</edge>
<edge source="计算机" target="学术期刊">
  <data key="d2">is_a</data>
  <data key="d3">它是公认的计算机科学分支，同时也是活跃的研究领域，研究成果被发表在众多学术期刊，计算机科学以及工程出版物</data>
</edge>
<edge source="计算机" target="逻辑">
  <data key="d2">includes</data>
  <data key="d3">广义的理论计算机科学包括经典的计算理论和其它專注于更抽象逻辑与数学方面的计算</data>
</edge>
<edge source="计算机" target="动机">
  <data key="d2">is_a</data>
  <data key="d3">对于形式化方法的最佳形容是各种理论计算机科学基础种类的应用，特别是计算机逻辑演算，形式语言，自动机理论和形式语义学，此外还有类型系统代数数据类型，以及软件和硬件规范和验证中的一些问题</data>
</edge>
<edge source="计算机" target="自动机">
  <data key="d2">is_a</data>
  <data key="d3">对于形式化方法的最佳形容是各种理论计算机科学基础种类的应用，特别是计算机逻辑演算，形式语言，自动机理论和形式语义学，此外还有类型系统代数数据类型，以及软件和硬件规范和验证中的一些问题</data>
</edge>
<edge source="计算机" target="设计">
  <data key="d2">is_a</data>
  <data key="d3">计算机系统结构，或者数字计算机组织，是一个计算机系统的概念设计和根本运作结构</data>
</edge>
<edge source="计算机" target="概念">
  <data key="d2">is_a</data>
  <data key="d3">计算机系统结构，或者数字计算机组织，是一个计算机系统的概念设计和根本运作结构</data>
</edge>
<edge source="计算机" target="概念设计">
  <data key="d2">is_a</data>
  <data key="d3">计算机系统结构，或者数字计算机组织，是一个计算机系统的概念设计和根本运作结构</data>
</edge>
<edge source="计算机" target="运作">
  <data key="d2">is_a</data>
  <data key="d3">计算机系统结构，或者数字计算机组织，是一个计算机系统的概念设计和根本运作结构</data>
</edge>
<edge source="计算机" target="管理">
  <data key="d2">is_a</data>
  <data key="d3">计算机网络是管理遍及全球的计算机连接成的网络的计算机科学分支</data>
</edge>
<edge source="计算机" target="全球">
  <data key="d2">is_a</data>
  <data key="d3">计算机网络是管理遍及全球的计算机连接成的网络的计算机科学分支</data>
</edge>
<edge source="计算机" target="连接成">
  <data key="d2">is_a</data>
  <data key="d3">计算机网络是管理遍及全球的计算机连接成的网络的计算机科学分支</data>
</edge>
<edge source="计算机" target="分支">
  <data key="d2">contains</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="计算机" target="目标">
  <data key="d2">is_a</data>
  <data key="d3">计算机安全是计算机技术的一个分支，其目标包括保护信息免受未经授权的访问中断和修改，同时为系统的预期用户保持系统的可访问性和可用性</data>
</edge>
<edge source="计算机" target="计算机技术">
  <data key="d2">is_a</data>
  <data key="d3">计算机安全是计算机技术的一个分支，其目标包括保护信息免受未经授权的访问中断和修改，同时为系统的预期用户保持系统的可访问性和可用性</data>
</edge>
<edge source="计算机" target="数据">
  <data key="d2">is_a</data>
  <data key="d3">计算机图形学是对于数字视觉内容的研究，涉及图像数据的合成和操作</data>
</edge>
<edge source="计算机" target="数字">
  <data key="d2">is_a</data>
  <data key="d3">计算机图形学是对于数字视觉内容的研究，涉及图像数据的合成和操作</data>
</edge>
<edge source="计算机" target="视觉">
  <data key="d2">includes</data>
  <data key="d3">它跟计算机科学的许多其它领域密切相关，包括计算机视觉图像处理计算几何与可视化，同时也被大量运用在特效和电子游戏</data>
</edge>
<edge source="计算机" target="内容">
  <data key="d2">is_a</data>
  <data key="d3">计算机图形学是对于数字视觉内容的研究，涉及图像数据的合成和操作</data>
</edge>
<edge source="计算机" target="图像">
  <data key="d2">includes</data>
  <data key="d3">它跟计算机科学的许多其它领域密切相关，包括计算机视觉图像处理计算几何与可视化，同时也被大量运用在特效和电子游戏</data>
</edge>
<edge source="计算机" target="争议">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学和软件工程的关系是一个有争议的话题，随后关于什么是软件工程，计算机科学又该如何定义的争论使得情况更加混乱</data>
</edge>
<edge source="计算机" target="话题">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学和软件工程的关系是一个有争议的话题，随后关于什么是软件工程，计算机科学又该如何定义的争论使得情况更加混乱</data>
</edge>
<edge source="计算机" target="算法">
  <data key="d2">is_a</data>
  <data key="d3">的计算机科学课程则主要侧重于训练高级编程，而不是算法和计算理论</data>
</edge>
<edge source="计算机" target="计算理论">
  <data key="d2">includes</data>
  <data key="d3">广义的理论计算机科学包括经典的计算理论和其它專注于更抽象逻辑与数学方面的计算</data>
</edge>
<edge source="计算机" target="12">
  <data key="d2">is_a</data>
  <data key="d3">然而，尽管计算机科学专业日益推动着美国经济，但是计算机科学教育依然不存在大多数美国K12课程中</data>
</edge>
<edge source="计算机" target="课程">
  <data key="d2">is_a</data>
  <data key="d3">然而，尽管计算机科学专业日益推动着美国经济，但是计算机科学教育依然不存在大多数美国K12课程中</data>
</edge>
<edge source="计算机" target="教育">
  <data key="d2">is_a</data>
  <data key="d3">然而，尽管计算机科学专业日益推动着美国经济，但是计算机科学教育依然不存在大多数美国K12课程中</data>
</edge>
<edge source="计算机" target="专业">
  <data key="d2">composed_of</data>
  <data key="d3">现代社会见证了计算机从仅仅由专业人士使用到被广大用户接受的重大转变</data>
</edge>
<edge source="计算机" target="工科">
  <data key="d2">is_a</data>
  <data key="d3">在中国，计算机科学或计算机科学与技术是工科（一级门类）下的二级专业</data>
</edge>
<edge source="计算机" target="门类">
  <data key="d2">is_a</data>
  <data key="d3">在中国，计算机科学或计算机科学与技术是工科（一级门类）下的二级专业</data>
</edge>
<edge source="计算机" target="一级门类">
  <data key="d2">is_a</data>
  <data key="d3">在中国，计算机科学或计算机科学与技术是工科（一级门类）下的二级专业</data>
</edge>
<edge source="计算机" target="專注于">
  <data key="d2">includes</data>
  <data key="d3">广义的理论计算机科学包括经典的计算理论和其它專注于更抽象逻辑与数学方面的计算</data>
</edge>
<edge source="计算机" target="数学">
  <data key="d2">affects</data>
  <data key="d3">它属于计算机科学学科，既受影响于也影响着数学软件工程和语言学</data>
</edge>
<edge source="计算机" target="经典">
  <data key="d2">includes</data>
  <data key="d3">广义的理论计算机科学包括经典的计算理论和其它專注于更抽象逻辑与数学方面的计算</data>
</edge>
<edge source="计算机" target="中断">
  <data key="d2">includes</data>
  <data key="d3">计算机安全是计算机技术的一个分支，其目标包括保护信息免受未经授权的访问中断和修改，同时为系统的预期用户保持系统的可访问性和可用性</data>
</edge>
<edge source="计算机" target="图像处理">
  <data key="d2">includes</data>
  <data key="d3">它跟计算机科学的许多其它领域密切相关，包括计算机视觉图像处理计算几何与可视化，同时也被大量运用在特效和电子游戏</data>
</edge>
<edge source="计算机" target="可视化">
  <data key="d2">includes</data>
  <data key="d3">它跟计算机科学的许多其它领域密切相关，包括计算机视觉图像处理计算几何与可视化，同时也被大量运用在特效和电子游戏</data>
</edge>
<edge source="计算机" target="结果">
  <data key="d2">contains</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="计算机" target="数量">
  <data key="d2">contains</data>
  <data key="d3">9 尽管计算机科学（computer science）的名字里包含计算机这几个字，但实际上计算机科学相当数量的领域都不涉及计算机本身的研究</data>
</edge>
<edge source="计算机" target="实际">
  <data key="d2">contains</data>
  <data key="d3">9 尽管计算机科学（computer science）的名字里包含计算机这几个字，但实际上计算机科学相当数量的领域都不涉及计算机本身的研究</data>
</edge>
<edge source="计算机" target="普渡大学">
  <data key="d2">composed_of</data>
  <data key="d3">18 世界上第一个计算机科学学位点由普渡大学在1962年设立</data>
</edge>
<edge source="计算机" target="1962年">
  <data key="d2">composed_of</data>
  <data key="d3">18 世界上第一个计算机科学学位点由普渡大学在1962年设立</data>
</edge>
<edge source="计算机" target="19">
  <data key="d2">composed_of</data>
  <data key="d3">18 世界上第一个计算机科学学位点由普渡大学在1962年设立</data>
</edge>
<edge source="计算机" target="大学">
  <data key="d2">composed_of</data>
  <data key="d3">18 世界上第一个计算机科学学位点由普渡大学在1962年设立</data>
</edge>
<edge source="计算机" target="专业人士">
  <data key="d2">composed_of</data>
  <data key="d3">现代社会见证了计算机从仅仅由专业人士使用到被广大用户接受的重大转变</data>
</edge>
<edge source="计算机" target="用户">
  <data key="d2">uses</data>
  <data key="d3">现代社会见证了计算机从仅仅由专业人士使用到被广大用户接受的重大转变</data>
</edge>
<edge source="计算机" target="操作员">
  <data key="d2">composed_of</data>
  <data key="d3">最初，计算机非常昂贵，要有效利用它们，某种程度上必须得由专业的计算机操作员来完成</data>
</edge>
<edge source="计算机" target="指代">
  <data key="d2">used_for</data>
  <data key="d3">到了20世纪40年代，随着更新更强大的计算机器(如ABC计算机电子数值积分计算机)被发明，术语计算机开始用于指代那些机器而不是它们的祖先</data>
</edge>
<edge source="计算机" target="运算">
  <data key="d2">used_for</data>
  <data key="d3">17计算机的概念变得更加清晰，它不仅仅用于数学运算，总的来说计算机科学的领域也扩展到了对于计算的研究</data>
</edge>
<edge source="计算机" target="英语">
  <data key="d2">affects</data>
  <data key="d3">12 早期计算机科学受数学研究成果的影响很大，如库尔特哥德尔艾伦图灵路莎彼得（英语：Rózsa Péter），阿隆佐邱奇等数学家的研究，这两个领域在某些学科，例如数理逻辑范畴论域理论和代数，也不断有有益的思想交流</data>
</edge>
<edge source="计算机" target="艾伦">
  <data key="d2">affects</data>
  <data key="d3">12 早期计算机科学受数学研究成果的影响很大，如库尔特哥德尔艾伦图灵路莎彼得（英语：Rózsa Péter），阿隆佐邱奇等数学家的研究，这两个领域在某些学科，例如数理逻辑范畴论域理论和代数，也不断有有益的思想交流</data>
</edge>
<edge source="计算机" target="影响">
  <data key="d2">affects</data>
  <data key="d3">12 早期计算机科学受数学研究成果的影响很大，如库尔特哥德尔艾伦图灵路莎彼得（英语：Rózsa Péter），阿隆佐邱奇等数学家的研究，这两个领域在某些学科，例如数理逻辑范畴论域理论和代数，也不断有有益的思想交流</data>
</edge>
<edge source="计算机" target="哥德尔">
  <data key="d2">affects</data>
  <data key="d3">12 早期计算机科学受数学研究成果的影响很大，如库尔特哥德尔艾伦图灵路莎彼得（英语：Rózsa Péter），阿隆佐邱奇等数学家的研究，这两个领域在某些学科，例如数理逻辑范畴论域理论和代数，也不断有有益的思想交流</data>
</edge>
<edge source="计算机" target="图灵">
  <data key="d2">affects</data>
  <data key="d3">12 早期计算机科学受数学研究成果的影响很大，如库尔特哥德尔艾伦图灵路莎彼得（英语：Rózsa Péter），阿隆佐邱奇等数学家的研究，这两个领域在某些学科，例如数理逻辑范畴论域理论和代数，也不断有有益的思想交流</data>
</edge>
<edge source="计算机" target="英语：Rózsa Péter">
  <data key="d2">affects</data>
  <data key="d3">12 早期计算机科学受数学研究成果的影响很大，如库尔特哥德尔艾伦图灵路莎彼得（英语：Rózsa Péter），阿隆佐邱奇等数学家的研究，这两个领域在某些学科，例如数理逻辑范畴论域理论和代数，也不断有有益的思想交流</data>
</edge>
<edge source="计算机" target="语言学">
  <data key="d2">affects</data>
  <data key="d3">它属于计算机科学学科，既受影响于也影响着数学软件工程和语言学</data>
</edge>
<edge source="计算机" target="教师">
  <data key="d2">supports</data>
  <data key="d3">配合Running on Empty这篇文章，一个新的无党派宣传联盟：Computing in the Core（CinC）被建立，以影响联邦和政府政策，比如Computer Science Education Act（页面存档备份，存于互联网档案馆）要求政府拨款以制定计划完善计算机科学教育及支持计算机科学教师</data>
</edge>
<edge source="计算机" target="实用技术">
  <data key="d2">implements</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="计算机" target="程式">
  <data key="d2">implements</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="计算机" target="語言">
  <data key="d2">implements</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="计算机" target="理論">
  <data key="d2">implements</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="计算机" target="方法">
  <data key="d2">implements</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="计算机" target="分析">
  <data key="d2">implements</data>
  <data key="d3">编程语言理论是计算机科学的一个分支，主要处理编程语言的设计实现分析描述和分类，以及它们的个体特性</data>
</edge>
<edge source="计算机" target="分类">
  <data key="d2">implements</data>
  <data key="d3">编程语言理论是计算机科学的一个分支，主要处理编程语言的设计实现分析描述和分类，以及它们的个体特性</data>
</edge>
<edge source="计算机" target="个体">
  <data key="d2">implements</data>
  <data key="d3">编程语言理论是计算机科学的一个分支，主要处理编程语言的设计实现分析描述和分类，以及它们的个体特性</data>
</edge>
<edge source="计算机" target="特性">
  <data key="d2">implements</data>
  <data key="d3">编程语言理论是计算机科学的一个分支，主要处理编程语言的设计实现分析描述和分类，以及它们的个体特性</data>
</edge>
<edge source="计算机" target="经验">
  <data key="d2">uses</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="计算机" target="有关">
  <data key="d2">uses</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="计算机" target="玩游戏">
  <data key="d2">uses</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="计算机" target="文字">
  <data key="d2">uses</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="计算机" target="感官">
  <data key="d2">uses</data>
  <data key="d3">多媒体技术是指通过计算机对文字数据图形图像动画声音等多种媒体信息进行综合处理和管理，使用户可以通过多种感官与计算机进行实时信息交互的技术，又称为计算机多媒体技术</data>
</edge>
<edge source="托夫斯" target="道路">
  <data key="d2">uses</data>
  <data key="d3">1860年之1930年间，若当库拉托夫斯基和惠特尼从之前独立于图论发展的拓扑学中吸取大量内容进入图论，而现代代数方法的使用更让图论与拓扑走上共同发展的道路</data>
</edge>
<edge source="基和" target="道路">
  <data key="d2">uses</data>
  <data key="d3">1860年之1930年间，若当库拉托夫斯基和惠特尼从之前独立于图论发展的拓扑学中吸取大量内容进入图论，而现代代数方法的使用更让图论与拓扑走上共同发展的道路</data>
</edge>
<edge source="内容" target="道路">
  <data key="d2">uses</data>
  <data key="d3">1860年之1930年间，若当库拉托夫斯基和惠特尼从之前独立于图论发展的拓扑学中吸取大量内容进入图论，而现代代数方法的使用更让图论与拓扑走上共同发展的道路</data>
</edge>
<edge source="代数" target="道路">
  <data key="d2">uses</data>
  <data key="d3">1860年之1930年间，若当库拉托夫斯基和惠特尼从之前独立于图论发展的拓扑学中吸取大量内容进入图论，而现代代数方法的使用更让图论与拓扑走上共同发展的道路</data>
</edge>
<edge source="概率" target="英语">
  <data key="d2">is_a</data>
  <data key="d3">图论中概率方法的引入，尤其是埃尔德什和Alfréd Rényi（英语：Alfréd Rényi）关于随机图连通的渐进概率的研究使得图论产生了新的分支随机图论</data>
</edge>
<edge source="概率" target="埃尔德什">
  <data key="d2">is_a</data>
  <data key="d3">图论中概率方法的引入，尤其是埃尔德什和Alfréd Rényi（英语：Alfréd Rényi）关于随机图连通的渐进概率的研究使得图论产生了新的分支随机图论</data>
</edge>
<edge source="概率" target="Alfréd Rényi">
  <data key="d2">is_a</data>
  <data key="d3">图论中概率方法的引入，尤其是埃尔德什和Alfréd Rényi（英语：Alfréd Rényi）关于随机图连通的渐进概率的研究使得图论产生了新的分支随机图论</data>
</edge>
<edge source="概率" target="埃尔德">
  <data key="d2">is_a</data>
  <data key="d3">图论中概率方法的引入，尤其是埃尔德什和Alfréd Rényi（英语：Alfréd Rényi）关于随机图连通的渐进概率的研究使得图论产生了新的分支随机图论</data>
</edge>
<edge source="概率" target="什和">
  <data key="d2">is_a</data>
  <data key="d3">图论中概率方法的引入，尤其是埃尔德什和Alfréd Rényi（英语：Alfréd Rényi）关于随机图连通的渐进概率的研究使得图论产生了新的分支随机图论</data>
</edge>
<edge source="概率" target="英语：Alfréd Rényi">
  <data key="d2">is_a</data>
  <data key="d3">图论中概率方法的引入，尤其是埃尔德什和Alfréd Rényi（英语：Alfréd Rényi）关于随机图连通的渐进概率的研究使得图论产生了新的分支随机图论</data>
</edge>
<edge source="概率" target="分支">
  <data key="d2">produces</data>
  <data key="d3">图论中概率方法的引入，尤其是埃尔德什和Alfréd Rényi（英语：Alfréd Rényi）关于随机图连通的渐进概率的研究使得图论产生了新的分支随机图论</data>
</edge>
<edge source="概率" target="产生">
  <data key="d2">produces</data>
  <data key="d3">图论中概率方法的引入，尤其是埃尔德什和Alfréd Rényi（英语：Alfréd Rényi）关于随机图连通的渐进概率的研究使得图论产生了新的分支随机图论</data>
</edge>
<edge source="埃尔德" target="分支">
  <data key="d2">produces</data>
  <data key="d3">图论中概率方法的引入，尤其是埃尔德什和Alfréd Rényi（英语：Alfréd Rényi）关于随机图连通的渐进概率的研究使得图论产生了新的分支随机图论</data>
</edge>
<edge source="埃尔德" target="产生">
  <data key="d2">produces</data>
  <data key="d3">图论中概率方法的引入，尤其是埃尔德什和Alfréd Rényi（英语：Alfréd Rényi）关于随机图连通的渐进概率的研究使得图论产生了新的分支随机图论</data>
</edge>
<edge source="什和" target="分支">
  <data key="d2">produces</data>
  <data key="d3">图论中概率方法的引入，尤其是埃尔德什和Alfréd Rényi（英语：Alfréd Rényi）关于随机图连通的渐进概率的研究使得图论产生了新的分支随机图论</data>
</edge>
<edge source="什和" target="产生">
  <data key="d2">produces</data>
  <data key="d3">图论中概率方法的引入，尤其是埃尔德什和Alfréd Rényi（英语：Alfréd Rényi）关于随机图连通的渐进概率的研究使得图论产生了新的分支随机图论</data>
</edge>
<edge source="圖論" target="與之相關">
  <data key="d2">is_a</data>
  <data key="d3">圖論中有許多定義，以下是一些與之相關最基本的定義</data>
</edge>
<edge source="圖論" target="基本">
  <data key="d2">is_a</data>
  <data key="d3">圖論中有許多定義，以下是一些與之相關最基本的定義</data>
</edge>
<edge source="圖論" target="displaystyle">
  <data key="d2">is_a</data>
  <data key="d3">圖論中，圖是有序對 G  ( V , E ) displaystyle G(V,E) ，其中 V displaystyle V 是點集； E    x , y  : ( x , y )  V 2 , x  y  displaystyle Esubseteq leftleftx,yright:(x,y)in V2,xneq yright 是邊集，由所有無序頂點對構成（換句話說，邊連接了頂點對）</data>
</edge>
<edge source="圖論" target="displaystyle G">
  <data key="d2">is_a</data>
  <data key="d3">圖論中，圖是有序對 G  ( V , E ) displaystyle G(V,E) ，其中 V displaystyle V 是點集； E    x , y  : ( x , y )  V 2 , x  y  displaystyle Esubseteq leftleftx,yright:(x,y)in V2,xneq yright 是邊集，由所有無序頂點對構成（換句話說，邊連接了頂點對）</data>
</edge>
<edge source="圖論" target="有序">
  <data key="d2">is_a</data>
  <data key="d3">圖論中，圖是有序對 G  ( V , E ) displaystyle G(V,E) ，其中 V displaystyle V 是點集； E    x , y  : ( x , y )  V 2 , x  y  displaystyle Esubseteq leftleftx,yright:(x,y)in V2,xneq yright 是邊集，由所有無序頂點對構成（換句話說，邊連接了頂點對）</data>
</edge>
<edge source="圖論" target="V , E">
  <data key="d2">is_a</data>
  <data key="d3">圖論中，圖是有序對 G  ( V , E ) displaystyle G(V,E) ，其中 V displaystyle V 是點集； E    x , y  : ( x , y )  V 2 , x  y  displaystyle Esubseteq leftleftx,yright:(x,y)in V2,xneq yright 是邊集，由所有無序頂點對構成（換句話說，邊連接了頂點對）</data>
</edge>
<edge source="圖論" target="頂點">
  <data key="d2">composed_of</data>
  <data key="d3">圖論中，圖是有序對 G  ( V , E ) displaystyle G(V,E) ，其中 V displaystyle V 是點集； E    x , y  : ( x , y )  V 2 , x  y  displaystyle Esubseteq leftleftx,yright:(x,y)in V2,xneq yright 是邊集，由所有無序頂點對構成（換句話說，邊連接了頂點對）</data>
</edge>
<edge source="圖論" target="個數">
  <data key="d2">is_a</data>
  <data key="d3">以下再給出一些圖論中的定義：圖的階是其頂點個數  V  displaystyle V ，圖的邊數是  E  displaystyle E ，頂點的度所有邊的端點中此頂點出現的次數（自環會被算兩次）</data>
</edge>
<edge source="圖論" target="無序">
  <data key="d2">composed_of</data>
  <data key="d3">圖論中，圖是有序對 G  ( V , E ) displaystyle G(V,E) ，其中 V displaystyle V 是點集； E    x , y  : ( x , y )  V 2 , x  y  displaystyle Esubseteq leftleftx,yright:(x,y)in V2,xneq yright 是邊集，由所有無序頂點對構成（換句話說，邊連接了頂點對）</data>
</edge>
<edge source="圖論" target="換句話說，邊連接了頂點對">
  <data key="d2">composed_of</data>
  <data key="d3">圖論中，圖是有序對 G  ( V , E ) displaystyle G(V,E) ，其中 V displaystyle V 是點集； E    x , y  : ( x , y )  V 2 , x  y  displaystyle Esubseteq leftleftx,yright:(x,y)in V2,xneq yright 是邊集，由所有無序頂點對構成（換句話說，邊連接了頂點對）</data>
</edge>
<edge source="定義" target="與之相關">
  <data key="d2">is_a</data>
  <data key="d3">圖論中有許多定義，以下是一些與之相關最基本的定義</data>
</edge>
<edge source="定義" target="基本">
  <data key="d2">is_a</data>
  <data key="d3">圖論中有許多定義，以下是一些與之相關最基本的定義</data>
</edge>
<edge source="定義" target="有序">
  <data key="d2">is_a</data>
  <data key="d3">事實上可以推廣為更一般的定義：圖是有序三元組 G  ( V , E , ϕ ) displaystyle G(V,E,phi ) ，其中 V displaystyle V 是點集； E displaystyle E 是邊集（此時 E displaystyle E 不再如前面限定是該集合的子集）；而 ϕ : E    x , y  : ( x , y )  V 2  displaystyle phi :Eto leftleftx,yright:(x,y)in V2right 將每個邊映射到一個無序頂點對（於是邊連接了頂點對）</data>
</edge>
<edge source="定義" target="V , E">
  <data key="d2">is_a</data>
  <data key="d3">事實上可以推廣為更一般的定義：圖是有序三元組 G  ( V , E , ϕ ) displaystyle G(V,E,phi ) ，其中 V displaystyle V 是點集； E displaystyle E 是邊集（此時 E displaystyle E 不再如前面限定是該集合的子集）；而 ϕ : E    x , y  : ( x , y )  V 2  displaystyle phi :Eto leftleftx,yright:(x,y)in V2right 將每個邊映射到一個無序頂點對（於是邊連接了頂點對）</data>
</edge>
<edge source="定義" target="V , E , ϕ">
  <data key="d2">is_a</data>
  <data key="d3">事實上可以推廣為更一般的定義：圖是有序三元組 G  ( V , E , ϕ ) displaystyle G(V,E,phi ) ，其中 V displaystyle V 是點集； E displaystyle E 是邊集（此時 E displaystyle E 不再如前面限定是該集合的子集）；而 ϕ : E    x , y  : ( x , y )  V 2  displaystyle phi :Eto leftleftx,yright:(x,y)in V2right 將每個邊映射到一個無序頂點對（於是邊連接了頂點對）</data>
</edge>
<edge source="定義" target="端點">
  <data key="d2">is_a</data>
  <data key="d3">此時的定義就允許自環重邊的出現，其中自環是兩端點相同的邊，重邊是兩個或多個連接相同端點的邊</data>
</edge>
<edge source="定義" target="displaystyle">
  <data key="d2">is_a</data>
  <data key="d3">以下再給出一些圖論中的定義：圖的階是其頂點個數  V  displaystyle V ，圖的邊數是  E  displaystyle E ，頂點的度所有邊的端點中此頂點出現的次數（自環會被算兩次）</data>
</edge>
<edge source="定義" target="頂點">
  <data key="d2">is_a</data>
  <data key="d3">以下再給出一些圖論中的定義：圖的階是其頂點個數  V  displaystyle V ，圖的邊數是  E  displaystyle E ，頂點的度所有邊的端點中此頂點出現的次數（自環會被算兩次）</data>
</edge>
<edge source="定義" target="個數">
  <data key="d2">is_a</data>
  <data key="d3">以下再給出一些圖論中的定義：圖的階是其頂點個數  V  displaystyle V ，圖的邊數是  E  displaystyle E ，頂點的度所有邊的端點中此頂點出現的次數（自環會被算兩次）</data>
</edge>
<edge source="有序" target="( x">
  <data key="d2">is_a</data>
  <data key="d3">圖論中，圖是有序對 G  ( V , E ) displaystyle G(V,E) ，其中 V displaystyle V 是點集； E    x , y  : ( x , y )  V 2 , x  y  displaystyle Esubseteq leftleftx,yright:(x,y)in V2,xneq yright 是邊集，由所有無序頂點對構成（換句話說，邊連接了頂點對）</data>
</edge>
<edge source="有序" target="E    x">
  <data key="d2">is_a</data>
  <data key="d3">圖論中，圖是有序對 G  ( V , E ) displaystyle G(V,E) ，其中 V displaystyle V 是點集； E    x , y  : ( x , y )  V 2 , x  y  displaystyle Esubseteq leftleftx,yright:(x,y)in V2,xneq yright 是邊集，由所有無序頂點對構成（換句話說，邊連接了頂點對）</data>
</edge>
<edge source="有序" target="x , y">
  <data key="d2">is_a</data>
  <data key="d3">圖論中，圖是有序對 G  ( V , E ) displaystyle G(V,E) ，其中 V displaystyle V 是點集； E    x , y  : ( x , y )  V 2 , x  y  displaystyle Esubseteq leftleftx,yright:(x,y)in V2,xneq yright 是邊集，由所有無序頂點對構成（換句話說，邊連接了頂點對）</data>
</edge>
<edge source="有序" target="無序">
  <data key="d2">composed_of</data>
  <data key="d3">圖論中，圖是有序對 G  ( V , E ) displaystyle G(V,E) ，其中 V displaystyle V 是點集； E    x , y  : ( x , y )  V 2 , x  y  displaystyle Esubseteq leftleftx,yright:(x,y)in V2,xneq yright 是邊集，由所有無序頂點對構成（換句話說，邊連接了頂點對）</data>
</edge>
<edge source="有序" target="頂點">
  <data key="d2">composed_of</data>
  <data key="d3">圖論中，圖是有序對 G  ( V , E ) displaystyle G(V,E) ，其中 V displaystyle V 是點集； E    x , y  : ( x , y )  V 2 , x  y  displaystyle Esubseteq leftleftx,yright:(x,y)in V2,xneq yright 是邊集，由所有無序頂點對構成（換句話說，邊連接了頂點對）</data>
</edge>
<edge source="有序" target="換句話說，邊連接了頂點對">
  <data key="d2">composed_of</data>
  <data key="d3">圖論中，圖是有序對 G  ( V , E ) displaystyle G(V,E) ，其中 V displaystyle V 是點集； E    x , y  : ( x , y )  V 2 , x  y  displaystyle Esubseteq leftleftx,yright:(x,y)in V2,xneq yright 是邊集，由所有無序頂點對構成（換句話說，邊連接了頂點對）</data>
</edge>
<edge source="頂點" target="端點">
  <data key="d2">is_a</data>
  <data key="d3">對於一個邊  x , y  displaystyle leftx,yright ，頂點 x , y displaystyle x,y 被稱作是邊的端點，邊則被稱為連接了此兩個點</data>
</edge>
<edge source="自環" target="端點">
  <data key="d2">is_a</data>
  <data key="d3">此時的定義就允許自環重邊的出現，其中自環是兩端點相同的邊，重邊是兩個或多個連接相同端點的邊</data>
</edge>
<edge source="子图" target="类似地">
  <data key="d2">is_a</data>
  <data key="d3">一类相关的常见问题要求在给定图中寻找符合某些条件的最大子图，其中有很多是NP完全的，如： 类似地，有些问题要求寻找符合某些条件的最大导出子图，如： 平面图判定：判定给定的图是否是平面图（此问题与子图的关系，参见库拉托夫斯基定理） 一个尚未解决的与子图相关的猜想，重构猜想（Reconstruction conjecture）：一个n阶图是否能够由其所有n1阶导出子图唯一确定</data>
</edge>
<edge source="Graph theory）" target="数学">
  <data key="d2">is_a</data>
  <data key="d3">图论（英語：Graph theory），是组合数学分支，和其他数学分支如群论矩阵论拓扑学有着密切关系</data>
</edge>
<edge source="Graph theory）" target="分支">
  <data key="d2">is_a</data>
  <data key="d3">图论（英語：Graph theory），是组合数学分支，和其他数学分支如群论矩阵论拓扑学有着密切关系</data>
</edge>
<edge source="Graph theory）" target="群论">
  <data key="d2">is_a</data>
  <data key="d3">图论（英語：Graph theory），是组合数学分支，和其他数学分支如群论矩阵论拓扑学有着密切关系</data>
</edge>
<edge source="Graph theory）" target="矩阵">
  <data key="d2">is_a</data>
  <data key="d3">图论（英語：Graph theory），是组合数学分支，和其他数学分支如群论矩阵论拓扑学有着密切关系</data>
</edge>
<edge source="Graph theory）" target="拓扑学">
  <data key="d2">is_a</data>
  <data key="d3">图论（英語：Graph theory），是组合数学分支，和其他数学分支如群论矩阵论拓扑学有着密切关系</data>
</edge>
<edge source="icosian game）（icosian game）" target="图论">
  <data key="d2">is_a</data>
  <data key="d3">1857年，哈密顿发明了環遊世界遊戲（英语：icosian game）（icosian game），与此相关的则是另一个广为人知的图论问题哈密顿路径问题</data>
</edge>
<edge source="icosian game）（icosian game）" target="问题">
  <data key="d2">is_a</data>
  <data key="d3">1857年，哈密顿发明了環遊世界遊戲（英语：icosian game）（icosian game），与此相关的则是另一个广为人知的图论问题哈密顿路径问题</data>
</edge>
<edge source="icosian game）（icosian game）" target="路径">
  <data key="d2">is_a</data>
  <data key="d3">1857年，哈密顿发明了環遊世界遊戲（英语：icosian game）（icosian game），与此相关的则是另一个广为人知的图论问题哈密顿路径问题</data>
</edge>
<edge source="( x" target="無序">
  <data key="d2">composed_of</data>
  <data key="d3">圖論中，圖是有序對 G  ( V , E ) displaystyle G(V,E) ，其中 V displaystyle V 是點集； E    x , y  : ( x , y )  V 2 , x  y  displaystyle Esubseteq leftleftx,yright:(x,y)in V2,xneq yright 是邊集，由所有無序頂點對構成（換句話說，邊連接了頂點對）</data>
</edge>
<edge source="( x" target="頂點">
  <data key="d2">composed_of</data>
  <data key="d3">圖論中，圖是有序對 G  ( V , E ) displaystyle G(V,E) ，其中 V displaystyle V 是點集； E    x , y  : ( x , y )  V 2 , x  y  displaystyle Esubseteq leftleftx,yright:(x,y)in V2,xneq yright 是邊集，由所有無序頂點對構成（換句話說，邊連接了頂點對）</data>
</edge>
<edge source="( x" target="換句話說，邊連接了頂點對">
  <data key="d2">composed_of</data>
  <data key="d3">圖論中，圖是有序對 G  ( V , E ) displaystyle G(V,E) ，其中 V displaystyle V 是點集； E    x , y  : ( x , y )  V 2 , x  y  displaystyle Esubseteq leftleftx,yright:(x,y)in V2,xneq yright 是邊集，由所有無序頂點對構成（換句話說，邊連接了頂點對）</data>
</edge>
<edge source="(x" target="無序">
  <data key="d2">composed_of</data>
  <data key="d3">圖論中，圖是有序對 G  ( V , E ) displaystyle G(V,E) ，其中 V displaystyle V 是點集； E    x , y  : ( x , y )  V 2 , x  y  displaystyle Esubseteq leftleftx,yright:(x,y)in V2,xneq yright 是邊集，由所有無序頂點對構成（換句話說，邊連接了頂點對）</data>
</edge>
<edge source="(x" target="頂點">
  <data key="d2">composed_of</data>
  <data key="d3">圖論中，圖是有序對 G  ( V , E ) displaystyle G(V,E) ，其中 V displaystyle V 是點集； E    x , y  : ( x , y )  V 2 , x  y  displaystyle Esubseteq leftleftx,yright:(x,y)in V2,xneq yright 是邊集，由所有無序頂點對構成（換句話說，邊連接了頂點對）</data>
</edge>
<edge source="(x" target="換句話說，邊連接了頂點對">
  <data key="d2">composed_of</data>
  <data key="d3">圖論中，圖是有序對 G  ( V , E ) displaystyle G(V,E) ，其中 V displaystyle V 是點集； E    x , y  : ( x , y )  V 2 , x  y  displaystyle Esubseteq leftleftx,yright:(x,y)in V2,xneq yright 是邊集，由所有無序頂點對構成（換句話說，邊連接了頂點對）</data>
</edge>
<edge source="E    x" target="無序">
  <data key="d2">composed_of</data>
  <data key="d3">圖論中，圖是有序對 G  ( V , E ) displaystyle G(V,E) ，其中 V displaystyle V 是點集； E    x , y  : ( x , y )  V 2 , x  y  displaystyle Esubseteq leftleftx,yright:(x,y)in V2,xneq yright 是邊集，由所有無序頂點對構成（換句話說，邊連接了頂點對）</data>
</edge>
<edge source="E    x" target="頂點">
  <data key="d2">composed_of</data>
  <data key="d3">圖論中，圖是有序對 G  ( V , E ) displaystyle G(V,E) ，其中 V displaystyle V 是點集； E    x , y  : ( x , y )  V 2 , x  y  displaystyle Esubseteq leftleftx,yright:(x,y)in V2,xneq yright 是邊集，由所有無序頂點對構成（換句話說，邊連接了頂點對）</data>
</edge>
<edge source="E    x" target="換句話說，邊連接了頂點對">
  <data key="d2">composed_of</data>
  <data key="d3">圖論中，圖是有序對 G  ( V , E ) displaystyle G(V,E) ，其中 V displaystyle V 是點集； E    x , y  : ( x , y )  V 2 , x  y  displaystyle Esubseteq leftleftx,yright:(x,y)in V2,xneq yright 是邊集，由所有無序頂點對構成（換句話說，邊連接了頂點對）</data>
</edge>
<edge source="类似地" target="库拉托夫斯基">
  <data key="d2">is_a</data>
  <data key="d3">一类相关的常见问题要求在给定图中寻找符合某些条件的最大子图，其中有很多是NP完全的，如： 类似地，有些问题要求寻找符合某些条件的最大导出子图，如： 平面图判定：判定给定的图是否是平面图（此问题与子图的关系，参见库拉托夫斯基定理） 一个尚未解决的与子图相关的猜想，重构猜想（Reconstruction conjecture）：一个n阶图是否能够由其所有n1阶导出子图唯一确定</data>
</edge>
<edge source="类似地" target="关系">
  <data key="d2">is_a</data>
  <data key="d3">一类相关的常见问题要求在给定图中寻找符合某些条件的最大子图，其中有很多是NP完全的，如： 类似地，有些问题要求寻找符合某些条件的最大导出子图，如： 平面图判定：判定给定的图是否是平面图（此问题与子图的关系，参见库拉托夫斯基定理） 一个尚未解决的与子图相关的猜想，重构猜想（Reconstruction conjecture）：一个n阶图是否能够由其所有n1阶导出子图唯一确定</data>
</edge>
<edge source="类似地" target="托夫斯">
  <data key="d2">is_a</data>
  <data key="d3">一类相关的常见问题要求在给定图中寻找符合某些条件的最大子图，其中有很多是NP完全的，如： 类似地，有些问题要求寻找符合某些条件的最大导出子图，如： 平面图判定：判定给定的图是否是平面图（此问题与子图的关系，参见库拉托夫斯基定理） 一个尚未解决的与子图相关的猜想，重构猜想（Reconstruction conjecture）：一个n阶图是否能够由其所有n1阶导出子图唯一确定</data>
</edge>
<edge source="类似地" target="此问题与子图的关系，参见库拉托夫斯基定理">
  <data key="d2">is_a</data>
  <data key="d3">一类相关的常见问题要求在给定图中寻找符合某些条件的最大子图，其中有很多是NP完全的，如： 类似地，有些问题要求寻找符合某些条件的最大导出子图，如： 平面图判定：判定给定的图是否是平面图（此问题与子图的关系，参见库拉托夫斯基定理） 一个尚未解决的与子图相关的猜想，重构猜想（Reconstruction conjecture）：一个n阶图是否能够由其所有n1阶导出子图唯一确定</data>
</edge>
<edge source="英語：Graph theory" target="数学">
  <data key="d2">is_a</data>
  <data key="d3">图论（英語：Graph theory），是组合数学分支，和其他数学分支如群论矩阵论拓扑学有着密切关系</data>
</edge>
<edge source="英語：Graph theory" target="分支">
  <data key="d2">is_a</data>
  <data key="d3">图论（英語：Graph theory），是组合数学分支，和其他数学分支如群论矩阵论拓扑学有着密切关系</data>
</edge>
<edge source="英語：Graph theory" target="群论">
  <data key="d2">is_a</data>
  <data key="d3">图论（英語：Graph theory），是组合数学分支，和其他数学分支如群论矩阵论拓扑学有着密切关系</data>
</edge>
<edge source="英語：Graph theory" target="矩阵">
  <data key="d2">is_a</data>
  <data key="d3">图论（英語：Graph theory），是组合数学分支，和其他数学分支如群论矩阵论拓扑学有着密切关系</data>
</edge>
<edge source="英語：Graph theory" target="拓扑学">
  <data key="d2">is_a</data>
  <data key="d3">图论（英語：Graph theory），是组合数学分支，和其他数学分支如群论矩阵论拓扑学有着密切关系</data>
</edge>
<edge source="英语：icosian game" target="图论">
  <data key="d2">is_a</data>
  <data key="d3">1857年，哈密顿发明了環遊世界遊戲（英语：icosian game）（icosian game），与此相关的则是另一个广为人知的图论问题哈密顿路径问题</data>
</edge>
<edge source="英语：icosian game" target="问题">
  <data key="d2">is_a</data>
  <data key="d3">1857年，哈密顿发明了環遊世界遊戲（英语：icosian game）（icosian game），与此相关的则是另一个广为人知的图论问题哈密顿路径问题</data>
</edge>
<edge source="英语：icosian game" target="路径">
  <data key="d2">is_a</data>
  <data key="d3">1857年，哈密顿发明了環遊世界遊戲（英语：icosian game）（icosian game），与此相关的则是另一个广为人知的图论问题哈密顿路径问题</data>
</edge>
<edge source="icosian game" target="图论">
  <data key="d2">is_a</data>
  <data key="d3">1857年，哈密顿发明了環遊世界遊戲（英语：icosian game）（icosian game），与此相关的则是另一个广为人知的图论问题哈密顿路径问题</data>
</edge>
<edge source="icosian game" target="问题">
  <data key="d2">is_a</data>
  <data key="d3">1857年，哈密顿发明了環遊世界遊戲（英语：icosian game）（icosian game），与此相关的则是另一个广为人知的图论问题哈密顿路径问题</data>
</edge>
<edge source="icosian game" target="路径">
  <data key="d2">is_a</data>
  <data key="d3">1857年，哈密顿发明了環遊世界遊戲（英语：icosian game）（icosian game），与此相关的则是另一个广为人知的图论问题哈密顿路径问题</data>
</edge>
<edge source="英语：Alfréd Rényi" target="分支">
  <data key="d2">produces</data>
  <data key="d3">图论中概率方法的引入，尤其是埃尔德什和Alfréd Rényi（英语：Alfréd Rényi）关于随机图连通的渐进概率的研究使得图论产生了新的分支随机图论</data>
</edge>
<edge source="英语：Alfréd Rényi" target="产生">
  <data key="d2">produces</data>
  <data key="d3">图论中概率方法的引入，尤其是埃尔德什和Alfréd Rényi（英语：Alfréd Rényi）关于随机图连通的渐进概率的研究使得图论产生了新的分支随机图论</data>
</edge>
<edge source="V , E" target="( x">
  <data key="d2">is_a</data>
  <data key="d3">圖論中，圖是有序對 G  ( V , E ) displaystyle G(V,E) ，其中 V displaystyle V 是點集； E    x , y  : ( x , y )  V 2 , x  y  displaystyle Esubseteq leftleftx,yright:(x,y)in V2,xneq yright 是邊集，由所有無序頂點對構成（換句話說，邊連接了頂點對）</data>
</edge>
<edge source="V , E" target="E    x">
  <data key="d2">is_a</data>
  <data key="d3">圖論中，圖是有序對 G  ( V , E ) displaystyle G(V,E) ，其中 V displaystyle V 是點集； E    x , y  : ( x , y )  V 2 , x  y  displaystyle Esubseteq leftleftx,yright:(x,y)in V2,xneq yright 是邊集，由所有無序頂點對構成（換句話說，邊連接了頂點對）</data>
</edge>
<edge source="V , E" target="x , y">
  <data key="d2">is_a</data>
  <data key="d3">圖論中，圖是有序對 G  ( V , E ) displaystyle G(V,E) ，其中 V displaystyle V 是點集； E    x , y  : ( x , y )  V 2 , x  y  displaystyle Esubseteq leftleftx,yright:(x,y)in V2,xneq yright 是邊集，由所有無序頂點對構成（換句話說，邊連接了頂點對）</data>
</edge>
<edge source="V , E" target="無序">
  <data key="d2">composed_of</data>
  <data key="d3">圖論中，圖是有序對 G  ( V , E ) displaystyle G(V,E) ，其中 V displaystyle V 是點集； E    x , y  : ( x , y )  V 2 , x  y  displaystyle Esubseteq leftleftx,yright:(x,y)in V2,xneq yright 是邊集，由所有無序頂點對構成（換句話說，邊連接了頂點對）</data>
</edge>
<edge source="V , E" target="頂點">
  <data key="d2">composed_of</data>
  <data key="d3">圖論中，圖是有序對 G  ( V , E ) displaystyle G(V,E) ，其中 V displaystyle V 是點集； E    x , y  : ( x , y )  V 2 , x  y  displaystyle Esubseteq leftleftx,yright:(x,y)in V2,xneq yright 是邊集，由所有無序頂點對構成（換句話說，邊連接了頂點對）</data>
</edge>
<edge source="V , E" target="換句話說，邊連接了頂點對">
  <data key="d2">composed_of</data>
  <data key="d3">圖論中，圖是有序對 G  ( V , E ) displaystyle G(V,E) ，其中 V displaystyle V 是點集； E    x , y  : ( x , y )  V 2 , x  y  displaystyle Esubseteq leftleftx,yright:(x,y)in V2,xneq yright 是邊集，由所有無序頂點對構成（換句話說，邊連接了頂點對）</data>
</edge>
<edge source="V,E" target="( x">
  <data key="d2">is_a</data>
  <data key="d3">圖論中，圖是有序對 G  ( V , E ) displaystyle G(V,E) ，其中 V displaystyle V 是點集； E    x , y  : ( x , y )  V 2 , x  y  displaystyle Esubseteq leftleftx,yright:(x,y)in V2,xneq yright 是邊集，由所有無序頂點對構成（換句話說，邊連接了頂點對）</data>
</edge>
<edge source="V,E" target="E    x">
  <data key="d2">is_a</data>
  <data key="d3">圖論中，圖是有序對 G  ( V , E ) displaystyle G(V,E) ，其中 V displaystyle V 是點集； E    x , y  : ( x , y )  V 2 , x  y  displaystyle Esubseteq leftleftx,yright:(x,y)in V2,xneq yright 是邊集，由所有無序頂點對構成（換句話說，邊連接了頂點對）</data>
</edge>
<edge source="V,E" target="x , y">
  <data key="d2">is_a</data>
  <data key="d3">圖論中，圖是有序對 G  ( V , E ) displaystyle G(V,E) ，其中 V displaystyle V 是點集； E    x , y  : ( x , y )  V 2 , x  y  displaystyle Esubseteq leftleftx,yright:(x,y)in V2,xneq yright 是邊集，由所有無序頂點對構成（換句話說，邊連接了頂點對）</data>
</edge>
<edge source="V,E" target="無序">
  <data key="d2">composed_of</data>
  <data key="d3">圖論中，圖是有序對 G  ( V , E ) displaystyle G(V,E) ，其中 V displaystyle V 是點集； E    x , y  : ( x , y )  V 2 , x  y  displaystyle Esubseteq leftleftx,yright:(x,y)in V2,xneq yright 是邊集，由所有無序頂點對構成（換句話說，邊連接了頂點對）</data>
</edge>
<edge source="V,E" target="頂點">
  <data key="d2">composed_of</data>
  <data key="d3">圖論中，圖是有序對 G  ( V , E ) displaystyle G(V,E) ，其中 V displaystyle V 是點集； E    x , y  : ( x , y )  V 2 , x  y  displaystyle Esubseteq leftleftx,yright:(x,y)in V2,xneq yright 是邊集，由所有無序頂點對構成（換句話說，邊連接了頂點對）</data>
</edge>
<edge source="V,E" target="換句話說，邊連接了頂點對">
  <data key="d2">composed_of</data>
  <data key="d3">圖論中，圖是有序對 G  ( V , E ) displaystyle G(V,E) ，其中 V displaystyle V 是點集； E    x , y  : ( x , y )  V 2 , x  y  displaystyle Esubseteq leftleftx,yright:(x,y)in V2,xneq yright 是邊集，由所有無序頂點對構成（換句話說，邊連接了頂點對）</data>
</edge>
<edge source="x , y" target="無序">
  <data key="d2">composed_of</data>
  <data key="d3">圖論中，圖是有序對 G  ( V , E ) displaystyle G(V,E) ，其中 V displaystyle V 是點集； E    x , y  : ( x , y )  V 2 , x  y  displaystyle Esubseteq leftleftx,yright:(x,y)in V2,xneq yright 是邊集，由所有無序頂點對構成（換句話說，邊連接了頂點對）</data>
</edge>
<edge source="x , y" target="頂點">
  <data key="d2">composed_of</data>
  <data key="d3">圖論中，圖是有序對 G  ( V , E ) displaystyle G(V,E) ，其中 V displaystyle V 是點集； E    x , y  : ( x , y )  V 2 , x  y  displaystyle Esubseteq leftleftx,yright:(x,y)in V2,xneq yright 是邊集，由所有無序頂點對構成（換句話說，邊連接了頂點對）</data>
</edge>
<edge source="x , y" target="換句話說，邊連接了頂點對">
  <data key="d2">composed_of</data>
  <data key="d3">圖論中，圖是有序對 G  ( V , E ) displaystyle G(V,E) ，其中 V displaystyle V 是點集； E    x , y  : ( x , y )  V 2 , x  y  displaystyle Esubseteq leftleftx,yright:(x,y)in V2,xneq yright 是邊集，由所有無序頂點對構成（換句話說，邊連接了頂點對）</data>
</edge>
<edge source="x , y" target="端點">
  <data key="d2">is_a</data>
  <data key="d3">對於一個邊  x , y  displaystyle leftx,yright ，頂點 x , y displaystyle x,y 被稱作是邊的端點，邊則被稱為連接了此兩個點</data>
</edge>
<edge source="x,y" target="無序">
  <data key="d2">composed_of</data>
  <data key="d3">圖論中，圖是有序對 G  ( V , E ) displaystyle G(V,E) ，其中 V displaystyle V 是點集； E    x , y  : ( x , y )  V 2 , x  y  displaystyle Esubseteq leftleftx,yright:(x,y)in V2,xneq yright 是邊集，由所有無序頂點對構成（換句話說，邊連接了頂點對）</data>
</edge>
<edge source="x,y" target="頂點">
  <data key="d2">composed_of</data>
  <data key="d3">圖論中，圖是有序對 G  ( V , E ) displaystyle G(V,E) ，其中 V displaystyle V 是點集； E    x , y  : ( x , y )  V 2 , x  y  displaystyle Esubseteq leftleftx,yright:(x,y)in V2,xneq yright 是邊集，由所有無序頂點對構成（換句話說，邊連接了頂點對）</data>
</edge>
<edge source="x,y" target="換句話說，邊連接了頂點對">
  <data key="d2">composed_of</data>
  <data key="d3">圖論中，圖是有序對 G  ( V , E ) displaystyle G(V,E) ，其中 V displaystyle V 是點集； E    x , y  : ( x , y )  V 2 , x  y  displaystyle Esubseteq leftleftx,yright:(x,y)in V2,xneq yright 是邊集，由所有無序頂點對構成（換句話說，邊連接了頂點對）</data>
</edge>
<edge source="x,y" target="端點">
  <data key="d2">is_a</data>
  <data key="d3">對於一個邊  x , y  displaystyle leftx,yright ，頂點 x , y displaystyle x,y 被稱作是邊的端點，邊則被稱為連接了此兩個點</data>
</edge>
<edge source="中国大陆" target="可视化">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="中国大陆" target="图书">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="中国大陆" target="情报学">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="中国大陆" target="领域">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="中国大陆" target="概念">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="中国大陆" target="侧重于">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="中国大陆" target="方式">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="科学知识" target="绘制">
  <data key="d2">used_for</data>
  <data key="d3">科学知识图谱也称为知识域可视化（Mapping Knowledge Domains），是用于绘制分析和显示学科或学术研究主体之间的相互联系，用于揭示显示科学知识发展进程与结构关系的可视化工具1</data>
</edge>
<edge source="科学知识" target="分析">
  <data key="d2">used_for</data>
  <data key="d3">科学知识图谱也称为知识域可视化（Mapping Knowledge Domains），是用于绘制分析和显示学科或学术研究主体之间的相互联系，用于揭示显示科学知识发展进程与结构关系的可视化工具1</data>
</edge>
<edge source="科学知识" target="学科">
  <data key="d2">used_for</data>
  <data key="d3">科学知识图谱也称为知识域可视化（Mapping Knowledge Domains），是用于绘制分析和显示学科或学术研究主体之间的相互联系，用于揭示显示科学知识发展进程与结构关系的可视化工具1</data>
</edge>
<edge source="科学知识" target="学术研究">
  <data key="d2">used_for</data>
  <data key="d3">科学知识图谱也称为知识域可视化（Mapping Knowledge Domains），是用于绘制分析和显示学科或学术研究主体之间的相互联系，用于揭示显示科学知识发展进程与结构关系的可视化工具1</data>
</edge>
<edge source="科学知识" target="主体">
  <data key="d2">used_for</data>
  <data key="d3">科学知识图谱也称为知识域可视化（Mapping Knowledge Domains），是用于绘制分析和显示学科或学术研究主体之间的相互联系，用于揭示显示科学知识发展进程与结构关系的可视化工具1</data>
</edge>
<edge source="科学知识" target="学术">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="科学知识" target="可视化">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="科学知识" target="图书">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="科学知识" target="情报学">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="科学知识" target="领域">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="科学知识" target="概念">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="科学知识" target="侧重于">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="科学知识" target="方式">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="科学知识" target="节点">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="科学知识" target="代表">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="科学知识" target="作者">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="科学知识" target="机构">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="科学知识" target="文献">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="科学知识" target="关键词">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="可视化" target="绘制">
  <data key="d2">used_for</data>
  <data key="d3">科学知识图谱也称为知识域可视化（Mapping Knowledge Domains），是用于绘制分析和显示学科或学术研究主体之间的相互联系，用于揭示显示科学知识发展进程与结构关系的可视化工具1</data>
</edge>
<edge source="可视化" target="分析">
  <data key="d2">used_for</data>
  <data key="d3">科学知识图谱也称为知识域可视化（Mapping Knowledge Domains），是用于绘制分析和显示学科或学术研究主体之间的相互联系，用于揭示显示科学知识发展进程与结构关系的可视化工具1</data>
</edge>
<edge source="可视化" target="学科">
  <data key="d2">used_for</data>
  <data key="d3">科学知识图谱也称为知识域可视化（Mapping Knowledge Domains），是用于绘制分析和显示学科或学术研究主体之间的相互联系，用于揭示显示科学知识发展进程与结构关系的可视化工具1</data>
</edge>
<edge source="可视化" target="学术研究">
  <data key="d2">used_for</data>
  <data key="d3">科学知识图谱也称为知识域可视化（Mapping Knowledge Domains），是用于绘制分析和显示学科或学术研究主体之间的相互联系，用于揭示显示科学知识发展进程与结构关系的可视化工具1</data>
</edge>
<edge source="可视化" target="主体">
  <data key="d2">used_for</data>
  <data key="d3">科学知识图谱也称为知识域可视化（Mapping Knowledge Domains），是用于绘制分析和显示学科或学术研究主体之间的相互联系，用于揭示显示科学知识发展进程与结构关系的可视化工具1</data>
</edge>
<edge source="可视化" target="学术">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="可视化" target="结构">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="可视化" target="计算机领域">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="可视化" target="结构化">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="可视化" target="数据">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="可视化" target="形式">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="可视化" target="节点">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="可视化" target="代表">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="可视化" target="作者">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="可视化" target="机构">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="可视化" target="文献">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="可视化" target="关键词">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="绘制" target="发展">
  <data key="d2">used_for</data>
  <data key="d3">科学知识图谱也称为知识域可视化（Mapping Knowledge Domains），是用于绘制分析和显示学科或学术研究主体之间的相互联系，用于揭示显示科学知识发展进程与结构关系的可视化工具1</data>
</edge>
<edge source="绘制" target="进程">
  <data key="d2">used_for</data>
  <data key="d3">科学知识图谱也称为知识域可视化（Mapping Knowledge Domains），是用于绘制分析和显示学科或学术研究主体之间的相互联系，用于揭示显示科学知识发展进程与结构关系的可视化工具1</data>
</edge>
<edge source="绘制" target="结构">
  <data key="d2">used_for</data>
  <data key="d3">科学知识图谱也称为知识域可视化（Mapping Knowledge Domains），是用于绘制分析和显示学科或学术研究主体之间的相互联系，用于揭示显示科学知识发展进程与结构关系的可视化工具1</data>
</edge>
<edge source="绘制" target="关系">
  <data key="d2">used_for</data>
  <data key="d3">科学知识图谱也称为知识域可视化（Mapping Knowledge Domains），是用于绘制分析和显示学科或学术研究主体之间的相互联系，用于揭示显示科学知识发展进程与结构关系的可视化工具1</data>
</edge>
<edge source="学科" target="发展">
  <data key="d2">used_for</data>
  <data key="d3">科学知识图谱也称为知识域可视化（Mapping Knowledge Domains），是用于绘制分析和显示学科或学术研究主体之间的相互联系，用于揭示显示科学知识发展进程与结构关系的可视化工具1</data>
</edge>
<edge source="学科" target="进程">
  <data key="d2">used_for</data>
  <data key="d3">科学知识图谱也称为知识域可视化（Mapping Knowledge Domains），是用于绘制分析和显示学科或学术研究主体之间的相互联系，用于揭示显示科学知识发展进程与结构关系的可视化工具1</data>
</edge>
<edge source="学科" target="结构">
  <data key="d2">used_for</data>
  <data key="d3">科学知识图谱也称为知识域可视化（Mapping Knowledge Domains），是用于绘制分析和显示学科或学术研究主体之间的相互联系，用于揭示显示科学知识发展进程与结构关系的可视化工具1</data>
</edge>
<edge source="学科" target="关系">
  <data key="d2">used_for</data>
  <data key="d3">科学知识图谱也称为知识域可视化（Mapping Knowledge Domains），是用于绘制分析和显示学科或学术研究主体之间的相互联系，用于揭示显示科学知识发展进程与结构关系的可视化工具1</data>
</edge>
<edge source="学科" target="热点">
  <data key="d2">is_a</data>
  <data key="d3">图书馆学侧重于图书馆业务流程和相关学科的研究，包括图书馆哲学图书馆学理论图书馆管理和图书馆业务技术等；情报学侧重于情报的分析和利用，包括情报学理论情报采集情报分析情报检索以及二次三次文献编辑利用，目前情报技术也是研究热点之一</data>
</edge>
<edge source="学科" target="哲学">
  <data key="d2">includes</data>
  <data key="d3">图书馆学侧重于图书馆业务流程和相关学科的研究，包括图书馆哲学图书馆学理论图书馆管理和图书馆业务技术等；情报学侧重于情报的分析和利用，包括情报学理论情报采集情报分析情报检索以及二次三次文献编辑利用，目前情报技术也是研究热点之一</data>
</edge>
<edge source="学科" target="理论">
  <data key="d2">includes</data>
  <data key="d3">图书馆学侧重于图书馆业务流程和相关学科的研究，包括图书馆哲学图书馆学理论图书馆管理和图书馆业务技术等；情报学侧重于情报的分析和利用，包括情报学理论情报采集情报分析情报检索以及二次三次文献编辑利用，目前情报技术也是研究热点之一</data>
</edge>
<edge source="学科" target="管理">
  <data key="d2">includes</data>
  <data key="d3">图书馆学侧重于图书馆业务流程和相关学科的研究，包括图书馆哲学图书馆学理论图书馆管理和图书馆业务技术等；情报学侧重于情报的分析和利用，包括情报学理论情报采集情报分析情报检索以及二次三次文献编辑利用，目前情报技术也是研究热点之一</data>
</edge>
<edge source="学科" target="计算机">
  <data key="d2">is_a</data>
  <data key="d3">丹麦科学家彼得諾爾建议使用术语"datalogy"，以反映这一事实，即科学学科是围绕着数据和数据处理，而不一定要涉及计算机</data>
</edge>
<edge source="学科" target="数据">
  <data key="d2">is_a</data>
  <data key="d3">丹麦科学家彼得諾爾建议使用术语"datalogy"，以反映这一事实，即科学学科是围绕着数据和数据处理，而不一定要涉及计算机</data>
</edge>
<edge source="学科" target="数据处理">
  <data key="d2">is_a</data>
  <data key="d3">丹麦科学家彼得諾爾建议使用术语"datalogy"，以反映这一事实，即科学学科是围绕着数据和数据处理，而不一定要涉及计算机</data>
</edge>
<edge source="学科" target="事情">
  <data key="d2">is_a</data>
  <data key="d3">2020世纪50年代后期，计算机科学学科還在发展階段，这種問題在当时是一件很常見的事情</data>
</edge>
<edge source="学科" target="資訊革命">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="学科" target="信息">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="学科" target="时代">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="学科" target="革命">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="学科" target="信息时代">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="学科" target="奠基">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="学科" target="資訊">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="学科" target="驱动力">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="学科" target="数学">
  <data key="d2">affects</data>
  <data key="d3">它属于计算机科学学科，既受影响于也影响着数学软件工程和语言学</data>
</edge>
<edge source="学科" target="分析">
  <data key="d2">is_a</data>
  <data key="d3">在软件和硬件设计方面，形式化方法的使用动机，如同其它工程学科，是通过适当的数学分析便有助于设计的可靠性和健壮性的期望</data>
</edge>
<edge source="学科" target="可靠性">
  <data key="d2">is_a</data>
  <data key="d3">在软件和硬件设计方面，形式化方法的使用动机，如同其它工程学科，是通过适当的数学分析便有助于设计的可靠性和健壮性的期望</data>
</edge>
<edge source="学科" target="健壮性">
  <data key="d2">is_a</data>
  <data key="d3">在软件和硬件设计方面，形式化方法的使用动机，如同其它工程学科，是通过适当的数学分析便有助于设计的可靠性和健壮性的期望</data>
</edge>
<edge source="学科" target="科学">
  <data key="d2">is_a</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="学科" target="物理">
  <data key="d2">is_a</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="学科" target="研究">
  <data key="d2">is_a</data>
  <data key="d3">David Parnas从其它工程和科学学科之间的关系得到启示，宣称计算机科学的主要重点总的来说是研究计算的性质，而软件工程的主要重点是具体的计算设计，以达到实用的目的，这样便构成了两个独立但又互补的学科</data>
</edge>
<edge source="学科" target="性质">
  <data key="d2">is_a</data>
  <data key="d3">David Parnas从其它工程和科学学科之间的关系得到启示，宣称计算机科学的主要重点总的来说是研究计算的性质，而软件工程的主要重点是具体的计算设计，以达到实用的目的，这样便构成了两个独立但又互补的学科</data>
</edge>
<edge source="学科" target="软件">
  <data key="d2">affects</data>
  <data key="d3">它属于计算机科学学科，既受影响于也影响着数学软件工程和语言学</data>
</edge>
<edge source="学科" target="智能">
  <data key="d2">used_for</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="学科" target="工程">
  <data key="d2">affects</data>
  <data key="d3">它属于计算机科学学科，既受影响于也影响着数学软件工程和语言学</data>
</edge>
<edge source="学科" target="影响">
  <data key="d2">affects</data>
  <data key="d3">它属于计算机科学学科，既受影响于也影响着数学软件工程和语言学</data>
</edge>
<edge source="学科" target="语言学">
  <data key="d2">affects</data>
  <data key="d3">它属于计算机科学学科，既受影响于也影响着数学软件工程和语言学</data>
</edge>
<edge source="学科" target="系统">
  <data key="d2">implements</data>
  <data key="d3">Eden提议了三种范式应用于计算机科学的各个领域：31 作为一个学科，计算机科学涵盖了从算法的理论研究和计算的极限，到如何通过硬件和软件实现计算系统</data>
</edge>
<edge source="学术研究" target="发展">
  <data key="d2">used_for</data>
  <data key="d3">科学知识图谱也称为知识域可视化（Mapping Knowledge Domains），是用于绘制分析和显示学科或学术研究主体之间的相互联系，用于揭示显示科学知识发展进程与结构关系的可视化工具1</data>
</edge>
<edge source="学术研究" target="进程">
  <data key="d2">used_for</data>
  <data key="d3">科学知识图谱也称为知识域可视化（Mapping Knowledge Domains），是用于绘制分析和显示学科或学术研究主体之间的相互联系，用于揭示显示科学知识发展进程与结构关系的可视化工具1</data>
</edge>
<edge source="学术研究" target="结构">
  <data key="d2">used_for</data>
  <data key="d3">科学知识图谱也称为知识域可视化（Mapping Knowledge Domains），是用于绘制分析和显示学科或学术研究主体之间的相互联系，用于揭示显示科学知识发展进程与结构关系的可视化工具1</data>
</edge>
<edge source="学术研究" target="关系">
  <data key="d2">used_for</data>
  <data key="d3">科学知识图谱也称为知识域可视化（Mapping Knowledge Domains），是用于绘制分析和显示学科或学术研究主体之间的相互联系，用于揭示显示科学知识发展进程与结构关系的可视化工具1</data>
</edge>
<edge source="主体" target="发展">
  <data key="d2">used_for</data>
  <data key="d3">科学知识图谱也称为知识域可视化（Mapping Knowledge Domains），是用于绘制分析和显示学科或学术研究主体之间的相互联系，用于揭示显示科学知识发展进程与结构关系的可视化工具1</data>
</edge>
<edge source="主体" target="进程">
  <data key="d2">used_for</data>
  <data key="d3">科学知识图谱也称为知识域可视化（Mapping Knowledge Domains），是用于绘制分析和显示学科或学术研究主体之间的相互联系，用于揭示显示科学知识发展进程与结构关系的可视化工具1</data>
</edge>
<edge source="主体" target="结构">
  <data key="d2">used_for</data>
  <data key="d3">科学知识图谱也称为知识域可视化（Mapping Knowledge Domains），是用于绘制分析和显示学科或学术研究主体之间的相互联系，用于揭示显示科学知识发展进程与结构关系的可视化工具1</data>
</edge>
<edge source="主体" target="关系">
  <data key="d2">used_for</data>
  <data key="d3">科学知识图谱也称为知识域可视化（Mapping Knowledge Domains），是用于绘制分析和显示学科或学术研究主体之间的相互联系，用于揭示显示科学知识发展进程与结构关系的可视化工具1</data>
</edge>
<edge source="进程" target="通用">
  <data key="d2">used_for</data>
  <data key="d3">一些数学模型，如Petri网进程演算和PRAM模型，被建立以用于通用并发计算</data>
</edge>
<edge source="节点" target="关系">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="节点" target="连线">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="节点" target="合作">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="作者" target="关系">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="作者" target="连线">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="作者" target="合作">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="学术" target="发展">
  <data key="d2">used_for</data>
  <data key="d3">科学知识图谱也称为知识域可视化（Mapping Knowledge Domains），是用于绘制分析和显示学科或学术研究主体之间的相互联系，用于揭示显示科学知识发展进程与结构关系的可视化工具1</data>
</edge>
<edge source="学术" target="进程">
  <data key="d2">used_for</data>
  <data key="d3">科学知识图谱也称为知识域可视化（Mapping Knowledge Domains），是用于绘制分析和显示学科或学术研究主体之间的相互联系，用于揭示显示科学知识发展进程与结构关系的可视化工具1</data>
</edge>
<edge source="学术" target="结构">
  <data key="d2">used_for</data>
  <data key="d3">科学知识图谱也称为知识域可视化（Mapping Knowledge Domains），是用于绘制分析和显示学科或学术研究主体之间的相互联系，用于揭示显示科学知识发展进程与结构关系的可视化工具1</data>
</edge>
<edge source="学术" target="关系">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="学术" target="连线">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="学术" target="合作">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="机构" target="关系">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="机构" target="连线">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="机构" target="合作">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="机构" target="英语">
  <data key="d2">is_a</data>
  <data key="d3">第一个使用这个术语的科学机构是哥本哈根大学计算科学系（英语：UCPH Department of Computer Science），该学院成立于1969年，彼得諾爾便是第一任教授</data>
</edge>
<edge source="机构" target="UCPH Department of Computer Science">
  <data key="d2">is_a</data>
  <data key="d3">第一个使用这个术语的科学机构是哥本哈根大学计算科学系（英语：UCPH Department of Computer Science），该学院成立于1969年，彼得諾爾便是第一任教授</data>
</edge>
<edge source="机构" target="大学">
  <data key="d2">is_a</data>
  <data key="d3">第一个使用这个术语的科学机构是哥本哈根大学计算科学系（英语：UCPH Department of Computer Science），该学院成立于1969年，彼得諾爾便是第一任教授</data>
</edge>
<edge source="机构" target="哥本哈根大学">
  <data key="d2">is_a</data>
  <data key="d3">第一个使用这个术语的科学机构是哥本哈根大学计算科学系（英语：UCPH Department of Computer Science），该学院成立于1969年，彼得諾爾便是第一任教授</data>
</edge>
<edge source="机构" target="科学系">
  <data key="d2">is_a</data>
  <data key="d3">第一个使用这个术语的科学机构是哥本哈根大学计算科学系（英语：UCPH Department of Computer Science），该学院成立于1969年，彼得諾爾便是第一任教授</data>
</edge>
<edge source="机构" target="UCPH Department of Computer Science）">
  <data key="d2">is_a</data>
  <data key="d3">第一个使用这个术语的科学机构是哥本哈根大学计算科学系（英语：UCPH Department of Computer Science），该学院成立于1969年，彼得諾爾便是第一任教授</data>
</edge>
<edge source="机构" target="英语：UCPH Department of Computer Science">
  <data key="d2">is_a</data>
  <data key="d3">第一个使用这个术语的科学机构是哥本哈根大学计算科学系（英语：UCPH Department of Computer Science），该学院成立于1969年，彼得諾爾便是第一任教授</data>
</edge>
<edge source="科学" target="绘制">
  <data key="d2">used_for</data>
  <data key="d3">科学知识图谱也称为知识域可视化（Mapping Knowledge Domains），是用于绘制分析和显示学科或学术研究主体之间的相互联系，用于揭示显示科学知识发展进程与结构关系的可视化工具1</data>
</edge>
<edge source="科学" target="分析">
  <data key="d2">implements</data>
  <data key="d3">编程语言理论是计算机科学的一个分支，主要处理编程语言的设计实现分析描述和分类，以及它们的个体特性</data>
</edge>
<edge source="科学" target="学科">
  <data key="d2">implements</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="科学" target="学术研究">
  <data key="d2">used_for</data>
  <data key="d3">科学知识图谱也称为知识域可视化（Mapping Knowledge Domains），是用于绘制分析和显示学科或学术研究主体之间的相互联系，用于揭示显示科学知识发展进程与结构关系的可视化工具1</data>
</edge>
<edge source="科学" target="主体">
  <data key="d2">used_for</data>
  <data key="d3">科学知识图谱也称为知识域可视化（Mapping Knowledge Domains），是用于绘制分析和显示学科或学术研究主体之间的相互联系，用于揭示显示科学知识发展进程与结构关系的可视化工具1</data>
</edge>
<edge source="科学" target="学术">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="科学" target="可视化">
  <data key="d2">includes</data>
  <data key="d3">它跟计算机科学的许多其它领域密切相关，包括计算机视觉图像处理计算几何与可视化，同时也被大量运用在特效和电子游戏</data>
</edge>
<edge source="科学" target="图书">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="科学" target="情报学">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="科学" target="领域">
  <data key="d2">contains</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="科学" target="概念">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="科学" target="侧重于">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="科学" target="方式">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="科学" target="节点">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="科学" target="代表">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="科学" target="作者">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="科学" target="机构">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="科学" target="文献">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="科学" target="关键词">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="科学" target="系统性">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="科学" target="研究">
  <data key="d2">extends</data>
  <data key="d3">17计算机的概念变得更加清晰，它不仅仅用于数学运算，总的来说计算机科学的领域也扩展到了对于计算的研究</data>
</edge>
<edge source="科学" target="信息">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="科学" target="理论">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="科学" target="基础">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="科学" target="计算机系统">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="科学" target="系统">
  <data key="d2">implements</data>
  <data key="d3">Eden提议了三种范式应用于计算机科学的各个领域：31 作为一个学科，计算机科学涵盖了从算法的理论研究和计算的极限，到如何通过硬件和软件实现计算系统</data>
</edge>
<edge source="科学" target="问题">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="科学" target="性质">
  <data key="d2">implements</data>
  <data key="d3">其实计算机科学所关注的，不仅仅是去理解实现类似游戏浏览器这些软件的程序的性质，更要通过现有的知识创造新的程序或者改进已有的程序</data>
</edge>
<edge source="科学" target="复杂性">
  <data key="d2">based_on</data>
  <data key="d3">现代密码学主要跟计算机科学相关，很多加密和解密算法都是基于它们的计算复杂性</data>
</edge>
<edge source="科学" target="事业">
  <data key="d2">is_a</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="科学" target="信息技术">
  <data key="d2">is_a</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="科学" target="技术">
  <data key="d2">implements</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="科学" target="比如信息技术">
  <data key="d2">is_a</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="科学" target="游戏">
  <data key="d2">uses</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="科学" target="浏览器">
  <data key="d2">implements</data>
  <data key="d3">其实计算机科学所关注的，不仅仅是去理解实现类似游戏浏览器这些软件的程序的性质，更要通过现有的知识创造新的程序或者改进已有的程序</data>
</edge>
<edge source="科学" target="软件">
  <data key="d2">implements</data>
  <data key="d3">其实计算机科学所关注的，不仅仅是去理解实现类似游戏浏览器这些软件的程序的性质，更要通过现有的知识创造新的程序或者改进已有的程序</data>
</edge>
<edge source="科学" target="程序">
  <data key="d2">implements</data>
  <data key="d3">其实计算机科学所关注的，不仅仅是去理解实现类似游戏浏览器这些软件的程序的性质，更要通过现有的知识创造新的程序或者改进已有的程序</data>
</edge>
<edge source="科学" target="计算机">
  <data key="d2">is_a</data>
  <data key="d3">丹麦科学家彼得諾爾建议使用术语"datalogy"，以反映这一事实，即科学学科是围绕着数据和数据处理，而不一定要涉及计算机</data>
</edge>
<edge source="科学" target="数据">
  <data key="d2">is_a</data>
  <data key="d3">丹麦科学家彼得諾爾建议使用术语"datalogy"，以反映这一事实，即科学学科是围绕着数据和数据处理，而不一定要涉及计算机</data>
</edge>
<edge source="科学" target="数据处理">
  <data key="d2">is_a</data>
  <data key="d3">丹麦科学家彼得諾爾建议使用术语"datalogy"，以反映这一事实，即科学学科是围绕着数据和数据处理，而不一定要涉及计算机</data>
</edge>
<edge source="科学" target="英语">
  <data key="d2">affects</data>
  <data key="d3">12 早期计算机科学受数学研究成果的影响很大，如库尔特哥德尔艾伦图灵路莎彼得（英语：Rózsa Péter），阿隆佐邱奇等数学家的研究，这两个领域在某些学科，例如数理逻辑范畴论域理论和代数，也不断有有益的思想交流</data>
</edge>
<edge source="科学" target="UCPH Department of Computer Science">
  <data key="d2">is_a</data>
  <data key="d3">第一个使用这个术语的科学机构是哥本哈根大学计算科学系（英语：UCPH Department of Computer Science），该学院成立于1969年，彼得諾爾便是第一任教授</data>
</edge>
<edge source="科学" target="大学">
  <data key="d2">composed_of</data>
  <data key="d3">18 世界上第一个计算机科学学位点由普渡大学在1962年设立</data>
</edge>
<edge source="科学" target="哥本哈根大学">
  <data key="d2">is_a</data>
  <data key="d3">第一个使用这个术语的科学机构是哥本哈根大学计算科学系（英语：UCPH Department of Computer Science），该学院成立于1969年，彼得諾爾便是第一任教授</data>
</edge>
<edge source="科学" target="科学系">
  <data key="d2">is_a</data>
  <data key="d3">第一个使用这个术语的科学机构是哥本哈根大学计算科学系（英语：UCPH Department of Computer Science），该学院成立于1969年，彼得諾爾便是第一任教授</data>
</edge>
<edge source="科学" target="UCPH Department of Computer Science）">
  <data key="d2">is_a</data>
  <data key="d3">第一个使用这个术语的科学机构是哥本哈根大学计算科学系（英语：UCPH Department of Computer Science），该学院成立于1969年，彼得諾爾便是第一任教授</data>
</edge>
<edge source="科学" target="英语：UCPH Department of Computer Science">
  <data key="d2">is_a</data>
  <data key="d3">第一个使用这个术语的科学机构是哥本哈根大学计算科学系（英语：UCPH Department of Computer Science），该学院成立于1969年，彼得諾爾便是第一任教授</data>
</edge>
<edge source="科学" target="天文学">
  <data key="d2">is_a</data>
  <data key="d3">著名计算机科学家艾兹赫尔戴克斯特拉曾经指出：计算机科学并不只是关于计算机，就像天文学并不只是关于望远镜一样</data>
</edge>
<edge source="科学" target="望远镜">
  <data key="d2">is_a</data>
  <data key="d3">著名计算机科学家艾兹赫尔戴克斯特拉曾经指出：计算机科学并不只是关于计算机，就像天文学并不只是关于望远镜一样</data>
</edge>
<edge source="科学" target="50年">
  <data key="d2">is_a</data>
  <data key="d3">虽然最初很多人并不相信计算机可能成为科学研究的领域，但是随后的50年里也逐渐被学术界认可</data>
</edge>
<edge source="科学" target="学术界">
  <data key="d2">is_a</data>
  <data key="d3">虽然最初很多人并不相信计算机可能成为科学研究的领域，但是随后的50年里也逐渐被学术界认可</data>
</edge>
<edge source="科学" target="事情">
  <data key="d2">is_a</data>
  <data key="d3">2020世纪50年代后期，计算机科学学科還在发展階段，这種問題在当时是一件很常見的事情</data>
</edge>
<edge source="科学" target="資訊革命">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="科学" target="时代">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="科学" target="革命">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="科学" target="信息时代">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="科学" target="奠基">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="科学" target="資訊">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="科学" target="驱动力">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="科学" target="科学技术">
  <data key="d2">is_a</data>
  <data key="d3">35算法是计算机科学研究的一个重要领域，也是许多其他计算机科学技术的基础</data>
</edge>
<edge source="科学" target="自动">
  <data key="d2">is_a</data>
  <data key="d3">Denning的说法，计算机科学的最根本问题是什么能够被有效地自动化</data>
</edge>
<edge source="科学" target="期刊">
  <data key="d2">is_a</data>
  <data key="d3">它是公认的计算机科学分支，同时也是活跃的研究领域，研究成果被发表在众多学术期刊，计算机科学以及工程出版物</data>
</edge>
<edge source="科学" target="研究成果">
  <data key="d2">is_a</data>
  <data key="d3">它是公认的计算机科学分支，同时也是活跃的研究领域，研究成果被发表在众多学术期刊，计算机科学以及工程出版物</data>
</edge>
<edge source="科学" target="活跃">
  <data key="d2">is_a</data>
  <data key="d3">它是公认的计算机科学分支，同时也是活跃的研究领域，研究成果被发表在众多学术期刊，计算机科学以及工程出版物</data>
</edge>
<edge source="科学" target="学术期刊">
  <data key="d2">is_a</data>
  <data key="d3">它是公认的计算机科学分支，同时也是活跃的研究领域，研究成果被发表在众多学术期刊，计算机科学以及工程出版物</data>
</edge>
<edge source="科学" target="逻辑">
  <data key="d2">includes</data>
  <data key="d3">广义的理论计算机科学包括经典的计算理论和其它專注于更抽象逻辑与数学方面的计算</data>
</edge>
<edge source="科学" target="动机">
  <data key="d2">is_a</data>
  <data key="d3">对于形式化方法的最佳形容是各种理论计算机科学基础种类的应用，特别是计算机逻辑演算，形式语言，自动机理论和形式语义学，此外还有类型系统代数数据类型，以及软件和硬件规范和验证中的一些问题</data>
</edge>
<edge source="科学" target="自动机">
  <data key="d2">is_a</data>
  <data key="d3">对于形式化方法的最佳形容是各种理论计算机科学基础种类的应用，特别是计算机逻辑演算，形式语言，自动机理论和形式语义学，此外还有类型系统代数数据类型，以及软件和硬件规范和验证中的一些问题</data>
</edge>
<edge source="科学" target="数学">
  <data key="d2">affects</data>
  <data key="d3">它属于计算机科学学科，既受影响于也影响着数学软件工程和语言学</data>
</edge>
<edge source="科学" target="模型">
  <data key="d2">is_a</data>
  <data key="d3">科学计算（或者计算科学）是关注构建数学模型和量化分析技术的研究领域，同时通过计算机分析和解决科学问题</data>
</edge>
<edge source="科学" target="数学模型">
  <data key="d2">is_a</data>
  <data key="d3">科学计算（或者计算科学）是关注构建数学模型和量化分析技术的研究领域，同时通过计算机分析和解决科学问题</data>
</edge>
<edge source="科学" target="争议">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学和软件工程的关系是一个有争议的话题，随后关于什么是软件工程，计算机科学又该如何定义的争论使得情况更加混乱</data>
</edge>
<edge source="科学" target="话题">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学和软件工程的关系是一个有争议的话题，随后关于什么是软件工程，计算机科学又该如何定义的争论使得情况更加混乱</data>
</edge>
<edge source="科学" target="算法">
  <data key="d2">is_a</data>
  <data key="d3">的计算机科学课程则主要侧重于训练高级编程，而不是算法和计算理论</data>
</edge>
<edge source="科学" target="计算理论">
  <data key="d2">includes</data>
  <data key="d3">广义的理论计算机科学包括经典的计算理论和其它專注于更抽象逻辑与数学方面的计算</data>
</edge>
<edge source="科学" target="12">
  <data key="d2">is_a</data>
  <data key="d3">然而，尽管计算机科学专业日益推动着美国经济，但是计算机科学教育依然不存在大多数美国K12课程中</data>
</edge>
<edge source="科学" target="课程">
  <data key="d2">is_a</data>
  <data key="d3">然而，尽管计算机科学专业日益推动着美国经济，但是计算机科学教育依然不存在大多数美国K12课程中</data>
</edge>
<edge source="科学" target="教育">
  <data key="d2">is_a</data>
  <data key="d3">然而，尽管计算机科学专业日益推动着美国经济，但是计算机科学教育依然不存在大多数美国K12课程中</data>
</edge>
<edge source="科学" target="专业">
  <data key="d2">is_a</data>
  <data key="d3">在中国，计算机科学或计算机科学与技术是工科（一级门类）下的二级专业</data>
</edge>
<edge source="科学" target="工科">
  <data key="d2">is_a</data>
  <data key="d3">在中国，计算机科学或计算机科学与技术是工科（一级门类）下的二级专业</data>
</edge>
<edge source="科学" target="门类">
  <data key="d2">is_a</data>
  <data key="d3">在中国，计算机科学或计算机科学与技术是工科（一级门类）下的二级专业</data>
</edge>
<edge source="科学" target="一级门类">
  <data key="d2">is_a</data>
  <data key="d3">在中国，计算机科学或计算机科学与技术是工科（一级门类）下的二级专业</data>
</edge>
<edge source="科学" target="專注于">
  <data key="d2">includes</data>
  <data key="d3">广义的理论计算机科学包括经典的计算理论和其它專注于更抽象逻辑与数学方面的计算</data>
</edge>
<edge source="科学" target="经典">
  <data key="d2">includes</data>
  <data key="d3">广义的理论计算机科学包括经典的计算理论和其它專注于更抽象逻辑与数学方面的计算</data>
</edge>
<edge source="科学" target="视觉">
  <data key="d2">includes</data>
  <data key="d3">它跟计算机科学的许多其它领域密切相关，包括计算机视觉图像处理计算几何与可视化，同时也被大量运用在特效和电子游戏</data>
</edge>
<edge source="科学" target="图像">
  <data key="d2">includes</data>
  <data key="d3">它跟计算机科学的许多其它领域密切相关，包括计算机视觉图像处理计算几何与可视化，同时也被大量运用在特效和电子游戏</data>
</edge>
<edge source="科学" target="图像处理">
  <data key="d2">includes</data>
  <data key="d3">它跟计算机科学的许多其它领域密切相关，包括计算机视觉图像处理计算几何与可视化，同时也被大量运用在特效和电子游戏</data>
</edge>
<edge source="科学" target="分支">
  <data key="d2">contains</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="科学" target="结果">
  <data key="d2">contains</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="科学" target="数量">
  <data key="d2">contains</data>
  <data key="d3">9 尽管计算机科学（computer science）的名字里包含计算机这几个字，但实际上计算机科学相当数量的领域都不涉及计算机本身的研究</data>
</edge>
<edge source="科学" target="实际">
  <data key="d2">contains</data>
  <data key="d3">9 尽管计算机科学（computer science）的名字里包含计算机这几个字，但实际上计算机科学相当数量的领域都不涉及计算机本身的研究</data>
</edge>
<edge source="科学" target="普渡大学">
  <data key="d2">composed_of</data>
  <data key="d3">18 世界上第一个计算机科学学位点由普渡大学在1962年设立</data>
</edge>
<edge source="科学" target="1962年">
  <data key="d2">composed_of</data>
  <data key="d3">18 世界上第一个计算机科学学位点由普渡大学在1962年设立</data>
</edge>
<edge source="科学" target="19">
  <data key="d2">composed_of</data>
  <data key="d3">18 世界上第一个计算机科学学位点由普渡大学在1962年设立</data>
</edge>
<edge source="科学" target="艾伦">
  <data key="d2">affects</data>
  <data key="d3">12 早期计算机科学受数学研究成果的影响很大，如库尔特哥德尔艾伦图灵路莎彼得（英语：Rózsa Péter），阿隆佐邱奇等数学家的研究，这两个领域在某些学科，例如数理逻辑范畴论域理论和代数，也不断有有益的思想交流</data>
</edge>
<edge source="科学" target="影响">
  <data key="d2">affects</data>
  <data key="d3">12 早期计算机科学受数学研究成果的影响很大，如库尔特哥德尔艾伦图灵路莎彼得（英语：Rózsa Péter），阿隆佐邱奇等数学家的研究，这两个领域在某些学科，例如数理逻辑范畴论域理论和代数，也不断有有益的思想交流</data>
</edge>
<edge source="科学" target="哥德尔">
  <data key="d2">affects</data>
  <data key="d3">12 早期计算机科学受数学研究成果的影响很大，如库尔特哥德尔艾伦图灵路莎彼得（英语：Rózsa Péter），阿隆佐邱奇等数学家的研究，这两个领域在某些学科，例如数理逻辑范畴论域理论和代数，也不断有有益的思想交流</data>
</edge>
<edge source="科学" target="图灵">
  <data key="d2">affects</data>
  <data key="d3">12 早期计算机科学受数学研究成果的影响很大，如库尔特哥德尔艾伦图灵路莎彼得（英语：Rózsa Péter），阿隆佐邱奇等数学家的研究，这两个领域在某些学科，例如数理逻辑范畴论域理论和代数，也不断有有益的思想交流</data>
</edge>
<edge source="科学" target="英语：Rózsa Péter">
  <data key="d2">affects</data>
  <data key="d3">12 早期计算机科学受数学研究成果的影响很大，如库尔特哥德尔艾伦图灵路莎彼得（英语：Rózsa Péter），阿隆佐邱奇等数学家的研究，这两个领域在某些学科，例如数理逻辑范畴论域理论和代数，也不断有有益的思想交流</data>
</edge>
<edge source="科学" target="工程">
  <data key="d2">affects</data>
  <data key="d3">它属于计算机科学学科，既受影响于也影响着数学软件工程和语言学</data>
</edge>
<edge source="科学" target="语言学">
  <data key="d2">affects</data>
  <data key="d3">它属于计算机科学学科，既受影响于也影响着数学软件工程和语言学</data>
</edge>
<edge source="科学" target="教师">
  <data key="d2">supports</data>
  <data key="d3">配合Running on Empty这篇文章，一个新的无党派宣传联盟：Computing in the Core（CinC）被建立，以影响联邦和政府政策，比如Computer Science Education Act（页面存档备份，存于互联网档案馆）要求政府拨款以制定计划完善计算机科学教育及支持计算机科学教师</data>
</edge>
<edge source="科学" target="实用技术">
  <data key="d2">implements</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="科学" target="程式">
  <data key="d2">implements</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="科学" target="語言">
  <data key="d2">implements</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="科学" target="理論">
  <data key="d2">implements</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="科学" target="方法">
  <data key="d2">implements</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="科学" target="分类">
  <data key="d2">implements</data>
  <data key="d3">编程语言理论是计算机科学的一个分支，主要处理编程语言的设计实现分析描述和分类，以及它们的个体特性</data>
</edge>
<edge source="科学" target="个体">
  <data key="d2">implements</data>
  <data key="d3">编程语言理论是计算机科学的一个分支，主要处理编程语言的设计实现分析描述和分类，以及它们的个体特性</data>
</edge>
<edge source="科学" target="特性">
  <data key="d2">implements</data>
  <data key="d3">编程语言理论是计算机科学的一个分支，主要处理编程语言的设计实现分析描述和分类，以及它们的个体特性</data>
</edge>
<edge source="科学" target="经验">
  <data key="d2">uses</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="科学" target="有关">
  <data key="d2">uses</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="科学" target="玩游戏">
  <data key="d2">uses</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="科学" target="文字">
  <data key="d2">uses</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="科学" target="术语">
  <data key="d2">uses</data>
  <data key="d3">丹麦科学家彼得諾爾建议使用术语"datalogy"，以反映这一事实，即科学学科是围绕着数据和数据处理，而不一定要涉及计算机</data>
</edge>
<edge source="科学" target="事实">
  <data key="d2">uses</data>
  <data key="d3">丹麦科学家彼得諾爾建议使用术语"datalogy"，以反映这一事实，即科学学科是围绕着数据和数据处理，而不一定要涉及计算机</data>
</edge>
<edge source="科学" target="datalogy">
  <data key="d2">uses</data>
  <data key="d3">丹麦科学家彼得諾爾建议使用术语"datalogy"，以反映这一事实，即科学学科是围绕着数据和数据处理，而不一定要涉及计算机</data>
</edge>
<edge source="文献" target="关系">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="文献" target="连线">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="文献" target="合作">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="文献" target="热点">
  <data key="d2">is_a</data>
  <data key="d3">图书馆学侧重于图书馆业务流程和相关学科的研究，包括图书馆哲学图书馆学理论图书馆管理和图书馆业务技术等；情报学侧重于情报的分析和利用，包括情报学理论情报采集情报分析情报检索以及二次三次文献编辑利用，目前情报技术也是研究热点之一</data>
</edge>
<edge source="文献" target="图书馆">
  <data key="d2">is_a</data>
  <data key="d3">档案是一类特殊的文献，可以说是专业文献学之一种，在管理上较多的借鉴图书馆管理和技术方法</data>
</edge>
<edge source="文献" target="文献学">
  <data key="d2">is_a</data>
  <data key="d3">档案是一类特殊的文献，可以说是专业文献学之一种，在管理上较多的借鉴图书馆管理和技术方法</data>
</edge>
<edge source="文献" target="管理">
  <data key="d2">is_a</data>
  <data key="d3">档案是一类特殊的文献，可以说是专业文献学之一种，在管理上较多的借鉴图书馆管理和技术方法</data>
</edge>
<edge source="文献" target="专业">
  <data key="d2">is_a</data>
  <data key="d3">档案是一类特殊的文献，可以说是专业文献学之一种，在管理上较多的借鉴图书馆管理和技术方法</data>
</edge>
<edge source="文献" target="利用">
  <data key="d2">produces</data>
  <data key="d3">文献学侧重于研究文献的产生流传鉴别和利用问题</data>
</edge>
<edge source="文献" target="产生">
  <data key="d2">produces</data>
  <data key="d3">文献学侧重于研究文献的产生流传鉴别和利用问题</data>
</edge>
<edge source="文献" target="流传">
  <data key="d2">produces</data>
  <data key="d3">文献学侧重于研究文献的产生流传鉴别和利用问题</data>
</edge>
<edge source="文献" target="问题">
  <data key="d2">produces</data>
  <data key="d3">文献学侧重于研究文献的产生流传鉴别和利用问题</data>
</edge>
<edge source="关键词" target="关系">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="关键词" target="连线">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="关键词" target="合作">
  <data key="d2">uses</data>
  <data key="d3">在多数情况下，科学知识图谱采用图结构进行可视化表示，使用节点代表作者学术机构科学文献或关键词，使用连线代表作者机构间的合作关系，文献间的引用关系，以及关键词间的共现关系</data>
</edge>
<edge source="大陆" target="可视化">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="大陆" target="图书">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="大陆" target="情报学">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="大陆" target="领域">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="大陆" target="概念">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="大陆" target="侧重于">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="大陆" target="方式">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="地区" target="可视化">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="地区" target="图书">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="地区" target="情报学">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="地区" target="领域">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="地区" target="概念">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="地区" target="侧重于">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="地区" target="方式">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="内涵" target="可视化">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="内涵" target="图书">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="内涵" target="情报学">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="内涵" target="领域">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="内涵" target="概念">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="内涵" target="侧重于">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="内涵" target="方式">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="图书" target="结构">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="图书" target="计算机领域">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="图书" target="结构化">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="图书" target="数据">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="图书" target="形式">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="情报学" target="结构">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="情报学" target="计算机领域">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="情报学" target="结构化">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="情报学" target="数据">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="情报学" target="形式">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="情报学" target="热点">
  <data key="d2">is_a</data>
  <data key="d3">图书馆学侧重于图书馆业务流程和相关学科的研究，包括图书馆哲学图书馆学理论图书馆管理和图书馆业务技术等；情报学侧重于情报的分析和利用，包括情报学理论情报采集情报分析情报检索以及二次三次文献编辑利用，目前情报技术也是研究热点之一</data>
</edge>
<edge source="情报学" target="情报检索">
  <data key="d2">includes</data>
  <data key="d3">图书馆学侧重于图书馆业务流程和相关学科的研究，包括图书馆哲学图书馆学理论图书馆管理和图书馆业务技术等；情报学侧重于情报的分析和利用，包括情报学理论情报采集情报分析情报检索以及二次三次文献编辑利用，目前情报技术也是研究热点之一</data>
</edge>
<edge source="侧重于" target="结构">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="侧重于" target="计算机领域">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="侧重于" target="结构化">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="侧重于" target="数据">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="侧重于" target="形式">
  <data key="d2">is_a</data>
  <data key="d3">在中国大陆地区，科学知识图谱常被简称为知识图谱，但其内涵不同于Google所提出的知识图谱（Knowledge Graph），科学知识图谱是图书情报学领域的概念，侧重于以可视化的方式表示知识单元的联系，Google知识图谱是计算机领域的概念，侧重于以结构化的数据形式（如RDF）描述客观世界中概念实体及其关系</data>
</edge>
<edge source="侧重于" target="热点">
  <data key="d2">is_a</data>
  <data key="d3">图书馆学侧重于图书馆业务流程和相关学科的研究，包括图书馆哲学图书馆学理论图书馆管理和图书馆业务技术等；情报学侧重于情报的分析和利用，包括情报学理论情报采集情报分析情报检索以及二次三次文献编辑利用，目前情报技术也是研究热点之一</data>
</edge>
<edge source="侧重于" target="哲学">
  <data key="d2">includes</data>
  <data key="d3">图书馆学侧重于图书馆业务流程和相关学科的研究，包括图书馆哲学图书馆学理论图书馆管理和图书馆业务技术等；情报学侧重于情报的分析和利用，包括情报学理论情报采集情报分析情报检索以及二次三次文献编辑利用，目前情报技术也是研究热点之一</data>
</edge>
<edge source="侧重于" target="理论">
  <data key="d2">is_a</data>
  <data key="d3">的计算机科学课程则主要侧重于训练高级编程，而不是算法和计算理论</data>
</edge>
<edge source="侧重于" target="管理">
  <data key="d2">includes</data>
  <data key="d3">图书馆学侧重于图书馆业务流程和相关学科的研究，包括图书馆哲学图书馆学理论图书馆管理和图书馆业务技术等；情报学侧重于情报的分析和利用，包括情报学理论情报采集情报分析情报检索以及二次三次文献编辑利用，目前情报技术也是研究热点之一</data>
</edge>
<edge source="侧重于" target="利用">
  <data key="d2">produces</data>
  <data key="d3">文献学侧重于研究文献的产生流传鉴别和利用问题</data>
</edge>
<edge source="侧重于" target="产生">
  <data key="d2">produces</data>
  <data key="d3">文献学侧重于研究文献的产生流传鉴别和利用问题</data>
</edge>
<edge source="侧重于" target="流传">
  <data key="d2">produces</data>
  <data key="d3">文献学侧重于研究文献的产生流传鉴别和利用问题</data>
</edge>
<edge source="侧重于" target="问题">
  <data key="d2">produces</data>
  <data key="d3">文献学侧重于研究文献的产生流传鉴别和利用问题</data>
</edge>
<edge source="侧重于" target="算法">
  <data key="d2">is_a</data>
  <data key="d3">的计算机科学课程则主要侧重于训练高级编程，而不是算法和计算理论</data>
</edge>
<edge source="侧重于" target="计算理论">
  <data key="d2">is_a</data>
  <data key="d3">的计算机科学课程则主要侧重于训练高级编程，而不是算法和计算理论</data>
</edge>
<edge source="Mapping Knowledge Domains" target="绘制">
  <data key="d2">used_for</data>
  <data key="d3">科学知识图谱也称为知识域可视化（Mapping Knowledge Domains），是用于绘制分析和显示学科或学术研究主体之间的相互联系，用于揭示显示科学知识发展进程与结构关系的可视化工具1</data>
</edge>
<edge source="Mapping Knowledge Domains" target="分析">
  <data key="d2">used_for</data>
  <data key="d3">科学知识图谱也称为知识域可视化（Mapping Knowledge Domains），是用于绘制分析和显示学科或学术研究主体之间的相互联系，用于揭示显示科学知识发展进程与结构关系的可视化工具1</data>
</edge>
<edge source="Mapping Knowledge Domains" target="学科">
  <data key="d2">used_for</data>
  <data key="d3">科学知识图谱也称为知识域可视化（Mapping Knowledge Domains），是用于绘制分析和显示学科或学术研究主体之间的相互联系，用于揭示显示科学知识发展进程与结构关系的可视化工具1</data>
</edge>
<edge source="Mapping Knowledge Domains" target="学术研究">
  <data key="d2">used_for</data>
  <data key="d3">科学知识图谱也称为知识域可视化（Mapping Knowledge Domains），是用于绘制分析和显示学科或学术研究主体之间的相互联系，用于揭示显示科学知识发展进程与结构关系的可视化工具1</data>
</edge>
<edge source="Mapping Knowledge Domains" target="主体">
  <data key="d2">used_for</data>
  <data key="d3">科学知识图谱也称为知识域可视化（Mapping Knowledge Domains），是用于绘制分析和显示学科或学术研究主体之间的相互联系，用于揭示显示科学知识发展进程与结构关系的可视化工具1</data>
</edge>
<edge source="Mapping Knowledge Domains" target="学术">
  <data key="d2">used_for</data>
  <data key="d3">科学知识图谱也称为知识域可视化（Mapping Knowledge Domains），是用于绘制分析和显示学科或学术研究主体之间的相互联系，用于揭示显示科学知识发展进程与结构关系的可视化工具1</data>
</edge>
<edge source="圖書" target="图书馆">
  <data key="d2">composed_of</data>
  <data key="d3">圖書資訊學註 1（英語：library and information science, LIS）于20世纪70年代由图书馆学與信息学两大领域合并而成</data>
</edge>
<edge source="圖書" target="信息学">
  <data key="d2">composed_of</data>
  <data key="d3">圖書資訊學註 1（英語：library and information science, LIS）于20世纪70年代由图书馆学與信息学两大领域合并而成</data>
</edge>
<edge source="圖書" target="图书馆学">
  <data key="d2">composed_of</data>
  <data key="d3">圖書資訊學註 1（英語：library and information science, LIS）于20世纪70年代由图书馆学與信息学两大领域合并而成</data>
</edge>
<edge source="圖書" target="领域">
  <data key="d2">composed_of</data>
  <data key="d3">圖書資訊學註 1（英語：library and information science, LIS）于20世纪70年代由图书馆学與信息学两大领域合并而成</data>
</edge>
<edge source="圖書" target="信息">
  <data key="d2">composed_of</data>
  <data key="d3">圖書資訊學註 1（英語：library and information science, LIS）于20世纪70年代由图书馆学與信息学两大领域合并而成</data>
</edge>
<edge source="library and information science" target="图书馆">
  <data key="d2">composed_of</data>
  <data key="d3">圖書資訊學註 1（英語：library and information science, LIS）于20世纪70年代由图书馆学與信息学两大领域合并而成</data>
</edge>
<edge source="library and information science" target="信息学">
  <data key="d2">composed_of</data>
  <data key="d3">圖書資訊學註 1（英語：library and information science, LIS）于20世纪70年代由图书馆学與信息学两大领域合并而成</data>
</edge>
<edge source="library and information science" target="图书馆学">
  <data key="d2">composed_of</data>
  <data key="d3">圖書資訊學註 1（英語：library and information science, LIS）于20世纪70年代由图书馆学與信息学两大领域合并而成</data>
</edge>
<edge source="library and information science" target="领域">
  <data key="d2">composed_of</data>
  <data key="d3">圖書資訊學註 1（英語：library and information science, LIS）于20世纪70年代由图书馆学與信息学两大领域合并而成</data>
</edge>
<edge source="library and information science" target="信息">
  <data key="d2">composed_of</data>
  <data key="d3">圖書資訊學註 1（英語：library and information science, LIS）于20世纪70年代由图书馆学與信息学两大领域合并而成</data>
</edge>
<edge source="LIS" target="图书馆">
  <data key="d2">composed_of</data>
  <data key="d3">圖書資訊學註 1（英語：library and information science, LIS）于20世纪70年代由图书馆学與信息学两大领域合并而成</data>
</edge>
<edge source="LIS" target="信息学">
  <data key="d2">composed_of</data>
  <data key="d3">圖書資訊學註 1（英語：library and information science, LIS）于20世纪70年代由图书馆学與信息学两大领域合并而成</data>
</edge>
<edge source="LIS" target="图书馆学">
  <data key="d2">composed_of</data>
  <data key="d3">圖書資訊學註 1（英語：library and information science, LIS）于20世纪70年代由图书馆学與信息学两大领域合并而成</data>
</edge>
<edge source="LIS" target="领域">
  <data key="d2">composed_of</data>
  <data key="d3">圖書資訊學註 1（英語：library and information science, LIS）于20世纪70年代由图书馆学與信息学两大领域合并而成</data>
</edge>
<edge source="LIS" target="信息">
  <data key="d2">composed_of</data>
  <data key="d3">圖書資訊學註 1（英語：library and information science, LIS）于20世纪70年代由图书馆学與信息学两大领域合并而成</data>
</edge>
<edge source="20世纪70年代" target="图书馆">
  <data key="d2">composed_of</data>
  <data key="d3">圖書資訊學註 1（英語：library and information science, LIS）于20世纪70年代由图书馆学與信息学两大领域合并而成</data>
</edge>
<edge source="20世纪70年代" target="信息学">
  <data key="d2">composed_of</data>
  <data key="d3">圖書資訊學註 1（英語：library and information science, LIS）于20世纪70年代由图书馆学與信息学两大领域合并而成</data>
</edge>
<edge source="20世纪70年代" target="图书馆学">
  <data key="d2">composed_of</data>
  <data key="d3">圖書資訊學註 1（英語：library and information science, LIS）于20世纪70年代由图书馆学與信息学两大领域合并而成</data>
</edge>
<edge source="20世纪70年代" target="领域">
  <data key="d2">composed_of</data>
  <data key="d3">圖書資訊學註 1（英語：library and information science, LIS）于20世纪70年代由图书馆学與信息学两大领域合并而成</data>
</edge>
<edge source="20世纪70年代" target="信息">
  <data key="d2">composed_of</data>
  <data key="d3">圖書資訊學註 1（英語：library and information science, LIS）于20世纪70年代由图书馆学與信息学两大领域合并而成</data>
</edge>
<edge source="图书馆" target="热点">
  <data key="d2">is_a</data>
  <data key="d3">图书馆学侧重于图书馆业务流程和相关学科的研究，包括图书馆哲学图书馆学理论图书馆管理和图书馆业务技术等；情报学侧重于情报的分析和利用，包括情报学理论情报采集情报分析情报检索以及二次三次文献编辑利用，目前情报技术也是研究热点之一</data>
</edge>
<edge source="图书馆" target="整理">
  <data key="d2">is_a</data>
  <data key="d3">图书馆訊息学就是研究訊息的组织整理，以及通过图书馆等平台实现訊息传递与传播，从而保障訊息有效查询与获取的学问</data>
</edge>
<edge source="图书馆" target="研究">
  <data key="d2">is_a</data>
  <data key="d3">图书馆訊息学就是研究訊息的组织整理，以及通过图书馆等平台实现訊息传递与传播，从而保障訊息有效查询与获取的学问</data>
</edge>
<edge source="图书馆" target="平台">
  <data key="d2">is_a</data>
  <data key="d3">图书馆訊息学就是研究訊息的组织整理，以及通过图书馆等平台实现訊息传递与传播，从而保障訊息有效查询与获取的学问</data>
</edge>
<edge source="图书馆" target="哲学">
  <data key="d2">includes</data>
  <data key="d3">图书馆学侧重于图书馆业务流程和相关学科的研究，包括图书馆哲学图书馆学理论图书馆管理和图书馆业务技术等；情报学侧重于情报的分析和利用，包括情报学理论情报采集情报分析情报检索以及二次三次文献编辑利用，目前情报技术也是研究热点之一</data>
</edge>
<edge source="图书馆" target="理论">
  <data key="d2">includes</data>
  <data key="d3">图书馆学侧重于图书馆业务流程和相关学科的研究，包括图书馆哲学图书馆学理论图书馆管理和图书馆业务技术等；情报学侧重于情报的分析和利用，包括情报学理论情报采集情报分析情报检索以及二次三次文献编辑利用，目前情报技术也是研究热点之一</data>
</edge>
<edge source="图书馆" target="管理">
  <data key="d2">includes</data>
  <data key="d3">图书馆学侧重于图书馆业务流程和相关学科的研究，包括图书馆哲学图书馆学理论图书馆管理和图书馆业务技术等；情报学侧重于情报的分析和利用，包括情报学理论情报采集情报分析情报检索以及二次三次文献编辑利用，目前情报技术也是研究热点之一</data>
</edge>
<edge source="图书馆" target="传播">
  <data key="d2">implements</data>
  <data key="d3">图书馆訊息学就是研究訊息的组织整理，以及通过图书馆等平台实现訊息传递与传播，从而保障訊息有效查询与获取的学问</data>
</edge>
<edge source="图书馆" target="查询">
  <data key="d2">implements</data>
  <data key="d3">图书馆訊息学就是研究訊息的组织整理，以及通过图书馆等平台实现訊息传递与传播，从而保障訊息有效查询与获取的学问</data>
</edge>
<edge source="資訊" target="图书馆">
  <data key="d2">composed_of</data>
  <data key="d3">圖書資訊學註 1（英語：library and information science, LIS）于20世纪70年代由图书馆学與信息学两大领域合并而成</data>
</edge>
<edge source="資訊" target="信息学">
  <data key="d2">composed_of</data>
  <data key="d3">圖書資訊學註 1（英語：library and information science, LIS）于20世纪70年代由图书馆学與信息学两大领域合并而成</data>
</edge>
<edge source="資訊" target="图书馆学">
  <data key="d2">composed_of</data>
  <data key="d3">圖書資訊學註 1（英語：library and information science, LIS）于20世纪70年代由图书馆学與信息学两大领域合并而成</data>
</edge>
<edge source="資訊" target="领域">
  <data key="d2">composed_of</data>
  <data key="d3">圖書資訊學註 1（英語：library and information science, LIS）于20世纪70年代由图书馆学與信息学两大领域合并而成</data>
</edge>
<edge source="資訊" target="信息">
  <data key="d2">composed_of</data>
  <data key="d3">圖書資訊學註 1（英語：library and information science, LIS）于20世纪70年代由图书馆学與信息学两大领域合并而成</data>
</edge>
<edge source="图书馆学" target="热点">
  <data key="d2">is_a</data>
  <data key="d3">图书馆学侧重于图书馆业务流程和相关学科的研究，包括图书馆哲学图书馆学理论图书馆管理和图书馆业务技术等；情报学侧重于情报的分析和利用，包括情报学理论情报采集情报分析情报检索以及二次三次文献编辑利用，目前情报技术也是研究热点之一</data>
</edge>
<edge source="图书馆学" target="哲学">
  <data key="d2">includes</data>
  <data key="d3">图书馆学侧重于图书馆业务流程和相关学科的研究，包括图书馆哲学图书馆学理论图书馆管理和图书馆业务技术等；情报学侧重于情报的分析和利用，包括情报学理论情报采集情报分析情报检索以及二次三次文献编辑利用，目前情报技术也是研究热点之一</data>
</edge>
<edge source="图书馆学" target="理论">
  <data key="d2">includes</data>
  <data key="d3">图书馆学侧重于图书馆业务流程和相关学科的研究，包括图书馆哲学图书馆学理论图书馆管理和图书馆业务技术等；情报学侧重于情报的分析和利用，包括情报学理论情报采集情报分析情报检索以及二次三次文献编辑利用，目前情报技术也是研究热点之一</data>
</edge>
<edge source="图书馆学" target="管理">
  <data key="d2">includes</data>
  <data key="d3">图书馆学侧重于图书馆业务流程和相关学科的研究，包括图书馆哲学图书馆学理论图书馆管理和图书馆业务技术等；情报学侧重于情报的分析和利用，包括情报学理论情报采集情报分析情报检索以及二次三次文献编辑利用，目前情报技术也是研究热点之一</data>
</edge>
<edge source="文献学" target="利用">
  <data key="d2">produces</data>
  <data key="d3">文献学侧重于研究文献的产生流传鉴别和利用问题</data>
</edge>
<edge source="文献学" target="产生">
  <data key="d2">produces</data>
  <data key="d3">文献学侧重于研究文献的产生流传鉴别和利用问题</data>
</edge>
<edge source="文献学" target="流传">
  <data key="d2">produces</data>
  <data key="d3">文献学侧重于研究文献的产生流传鉴别和利用问题</data>
</edge>
<edge source="文献学" target="问题">
  <data key="d2">produces</data>
  <data key="d3">文献学侧重于研究文献的产生流传鉴别和利用问题</data>
</edge>
<edge source="情报" target="英文">
  <data key="d2">is_a</data>
  <data key="d3">情报和訊息都是英文information的汉译，转译自日文</data>
</edge>
<edge source="情报" target="日文">
  <data key="d2">is_a</data>
  <data key="d3">情报和訊息都是英文information的汉译，转译自日文</data>
</edge>
<edge source="情报" target="汉译">
  <data key="d2">is_a</data>
  <data key="d3">情报和訊息都是英文information的汉译，转译自日文</data>
</edge>
<edge source="情报" target="上訊息">
  <data key="d2">is_a</data>
  <data key="d3">经过整理而有序化的訊息方可成为情报，也是狭义上訊息的概念</data>
</edge>
<edge source="情报" target="概念">
  <data key="d2">is_a</data>
  <data key="d3">经过整理而有序化的訊息方可成为情报，也是狭义上訊息的概念</data>
</edge>
<edge source="情报" target="热点">
  <data key="d2">is_a</data>
  <data key="d3">图书馆学侧重于图书馆业务流程和相关学科的研究，包括图书馆哲学图书馆学理论图书馆管理和图书馆业务技术等；情报学侧重于情报的分析和利用，包括情报学理论情报采集情报分析情报检索以及二次三次文献编辑利用，目前情报技术也是研究热点之一</data>
</edge>
<edge source="情报" target="情报检索">
  <data key="d2">includes</data>
  <data key="d3">图书馆学侧重于图书馆业务流程和相关学科的研究，包括图书馆哲学图书馆学理论图书馆管理和图书馆业务技术等；情报学侧重于情报的分析和利用，包括情报学理论情报采集情报分析情报检索以及二次三次文献编辑利用，目前情报技术也是研究热点之一</data>
</edge>
<edge source="和訊" target="英文">
  <data key="d2">is_a</data>
  <data key="d3">情报和訊息都是英文information的汉译，转译自日文</data>
</edge>
<edge source="和訊" target="日文">
  <data key="d2">is_a</data>
  <data key="d3">情报和訊息都是英文information的汉译，转译自日文</data>
</edge>
<edge source="和訊" target="汉译">
  <data key="d2">is_a</data>
  <data key="d3">情报和訊息都是英文information的汉译，转译自日文</data>
</edge>
<edge source="广义" target="專注于">
  <data key="d2">includes</data>
  <data key="d3">广义的理论计算机科学包括经典的计算理论和其它專注于更抽象逻辑与数学方面的计算</data>
</edge>
<edge source="广义" target="数学">
  <data key="d2">includes</data>
  <data key="d3">广义的理论计算机科学包括经典的计算理论和其它專注于更抽象逻辑与数学方面的计算</data>
</edge>
<edge source="广义" target="经典">
  <data key="d2">includes</data>
  <data key="d3">广义的理论计算机科学包括经典的计算理论和其它專注于更抽象逻辑与数学方面的计算</data>
</edge>
<edge source="广义" target="逻辑">
  <data key="d2">includes</data>
  <data key="d3">广义的理论计算机科学包括经典的计算理论和其它專注于更抽象逻辑与数学方面的计算</data>
</edge>
<edge source="广义" target="计算理论">
  <data key="d2">includes</data>
  <data key="d3">广义的理论计算机科学包括经典的计算理论和其它專注于更抽象逻辑与数学方面的计算</data>
</edge>
<edge source="社会" target="資訊革命">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="社会" target="信息">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="社会" target="时代">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="社会" target="革命">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="社会" target="信息时代">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="社会" target="奠基">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="社会" target="資訊">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="社会" target="驱动力">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="社会" target="科学">
  <data key="d2">is_a</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="社会" target="物理">
  <data key="d2">is_a</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="社会" target="专业人士">
  <data key="d2">composed_of</data>
  <data key="d3">现代社会见证了计算机从仅仅由专业人士使用到被广大用户接受的重大转变</data>
</edge>
<edge source="社会" target="用户">
  <data key="d2">uses</data>
  <data key="d3">现代社会见证了计算机从仅仅由专业人士使用到被广大用户接受的重大转变</data>
</edge>
<edge source="社会" target="专业">
  <data key="d2">composed_of</data>
  <data key="d3">现代社会见证了计算机从仅仅由专业人士使用到被广大用户接受的重大转变</data>
</edge>
<edge source="社会" target="智能">
  <data key="d2">used_for</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="訊息" target="英文">
  <data key="d2">is_a</data>
  <data key="d3">情报和訊息都是英文information的汉译，转译自日文</data>
</edge>
<edge source="訊息" target="日文">
  <data key="d2">is_a</data>
  <data key="d3">情报和訊息都是英文information的汉译，转译自日文</data>
</edge>
<edge source="訊息" target="汉译">
  <data key="d2">is_a</data>
  <data key="d3">情报和訊息都是英文information的汉译，转译自日文</data>
</edge>
<edge source="訊息" target="上訊息">
  <data key="d2">is_a</data>
  <data key="d3">经过整理而有序化的訊息方可成为情报，也是狭义上訊息的概念</data>
</edge>
<edge source="訊息" target="概念">
  <data key="d2">is_a</data>
  <data key="d3">经过整理而有序化的訊息方可成为情报，也是狭义上訊息的概念</data>
</edge>
<edge source="訊息" target="整理">
  <data key="d2">is_a</data>
  <data key="d3">图书馆訊息学就是研究訊息的组织整理，以及通过图书馆等平台实现訊息传递与传播，从而保障訊息有效查询与获取的学问</data>
</edge>
<edge source="訊息" target="研究">
  <data key="d2">is_a</data>
  <data key="d3">图书馆訊息学就是研究訊息的组织整理，以及通过图书馆等平台实现訊息传递与传播，从而保障訊息有效查询与获取的学问</data>
</edge>
<edge source="訊息" target="平台">
  <data key="d2">is_a</data>
  <data key="d3">图书馆訊息学就是研究訊息的组织整理，以及通过图书馆等平台实现訊息传递与传播，从而保障訊息有效查询与获取的学问</data>
</edge>
<edge source="訊息" target="传播">
  <data key="d2">implements</data>
  <data key="d3">图书馆訊息学就是研究訊息的组织整理，以及通过图书馆等平台实现訊息传递与传播，从而保障訊息有效查询与获取的学问</data>
</edge>
<edge source="訊息" target="查询">
  <data key="d2">implements</data>
  <data key="d3">图书馆訊息学就是研究訊息的组织整理，以及通过图书馆等平台实现訊息传递与传播，从而保障訊息有效查询与获取的学问</data>
</edge>
<edge source="方可" target="上訊息">
  <data key="d2">is_a</data>
  <data key="d3">经过整理而有序化的訊息方可成为情报，也是狭义上訊息的概念</data>
</edge>
<edge source="方可" target="概念">
  <data key="d2">is_a</data>
  <data key="d3">经过整理而有序化的訊息方可成为情报，也是狭义上訊息的概念</data>
</edge>
<edge source="业务流程" target="热点">
  <data key="d2">is_a</data>
  <data key="d3">图书馆学侧重于图书馆业务流程和相关学科的研究，包括图书馆哲学图书馆学理论图书馆管理和图书馆业务技术等；情报学侧重于情报的分析和利用，包括情报学理论情报采集情报分析情报检索以及二次三次文献编辑利用，目前情报技术也是研究热点之一</data>
</edge>
<edge source="业务流程" target="哲学">
  <data key="d2">includes</data>
  <data key="d3">图书馆学侧重于图书馆业务流程和相关学科的研究，包括图书馆哲学图书馆学理论图书馆管理和图书馆业务技术等；情报学侧重于情报的分析和利用，包括情报学理论情报采集情报分析情报检索以及二次三次文献编辑利用，目前情报技术也是研究热点之一</data>
</edge>
<edge source="业务流程" target="理论">
  <data key="d2">includes</data>
  <data key="d3">图书馆学侧重于图书馆业务流程和相关学科的研究，包括图书馆哲学图书馆学理论图书馆管理和图书馆业务技术等；情报学侧重于情报的分析和利用，包括情报学理论情报采集情报分析情报检索以及二次三次文献编辑利用，目前情报技术也是研究热点之一</data>
</edge>
<edge source="业务流程" target="管理">
  <data key="d2">includes</data>
  <data key="d3">图书馆学侧重于图书馆业务流程和相关学科的研究，包括图书馆哲学图书馆学理论图书馆管理和图书馆业务技术等；情报学侧重于情报的分析和利用，包括情报学理论情报采集情报分析情报检索以及二次三次文献编辑利用，目前情报技术也是研究热点之一</data>
</edge>
<edge source="哲学" target="热点">
  <data key="d2">is_a</data>
  <data key="d3">图书馆学侧重于图书馆业务流程和相关学科的研究，包括图书馆哲学图书馆学理论图书馆管理和图书馆业务技术等；情报学侧重于情报的分析和利用，包括情报学理论情报采集情报分析情报检索以及二次三次文献编辑利用，目前情报技术也是研究热点之一</data>
</edge>
<edge source="哲学" target="情报检索">
  <data key="d2">includes</data>
  <data key="d3">图书馆学侧重于图书馆业务流程和相关学科的研究，包括图书馆哲学图书馆学理论图书馆管理和图书馆业务技术等；情报学侧重于情报的分析和利用，包括情报学理论情报采集情报分析情报检索以及二次三次文献编辑利用，目前情报技术也是研究热点之一</data>
</edge>
<edge source="哲学" target="科学">
  <data key="d2">is_a</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="哲学" target="物理">
  <data key="d2">is_a</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="哲学" target="智能">
  <data key="d2">used_for</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="业务" target="热点">
  <data key="d2">is_a</data>
  <data key="d3">图书馆学侧重于图书馆业务流程和相关学科的研究，包括图书馆哲学图书馆学理论图书馆管理和图书馆业务技术等；情报学侧重于情报的分析和利用，包括情报学理论情报采集情报分析情报检索以及二次三次文献编辑利用，目前情报技术也是研究热点之一</data>
</edge>
<edge source="业务" target="哲学">
  <data key="d2">includes</data>
  <data key="d3">图书馆学侧重于图书馆业务流程和相关学科的研究，包括图书馆哲学图书馆学理论图书馆管理和图书馆业务技术等；情报学侧重于情报的分析和利用，包括情报学理论情报采集情报分析情报检索以及二次三次文献编辑利用，目前情报技术也是研究热点之一</data>
</edge>
<edge source="业务" target="理论">
  <data key="d2">includes</data>
  <data key="d3">图书馆学侧重于图书馆业务流程和相关学科的研究，包括图书馆哲学图书馆学理论图书馆管理和图书馆业务技术等；情报学侧重于情报的分析和利用，包括情报学理论情报采集情报分析情报检索以及二次三次文献编辑利用，目前情报技术也是研究热点之一</data>
</edge>
<edge source="业务" target="管理">
  <data key="d2">includes</data>
  <data key="d3">图书馆学侧重于图书馆业务流程和相关学科的研究，包括图书馆哲学图书馆学理论图书馆管理和图书馆业务技术等；情报学侧重于情报的分析和利用，包括情报学理论情报采集情报分析情报检索以及二次三次文献编辑利用，目前情报技术也是研究热点之一</data>
</edge>
<edge source="情报检索" target="热点">
  <data key="d2">is_a</data>
  <data key="d3">图书馆学侧重于图书馆业务流程和相关学科的研究，包括图书馆哲学图书馆学理论图书馆管理和图书馆业务技术等；情报学侧重于情报的分析和利用，包括情报学理论情报采集情报分析情报检索以及二次三次文献编辑利用，目前情报技术也是研究热点之一</data>
</edge>
<edge source="编辑" target="热点">
  <data key="d2">is_a</data>
  <data key="d3">图书馆学侧重于图书馆业务流程和相关学科的研究，包括图书馆哲学图书馆学理论图书馆管理和图书馆业务技术等；情报学侧重于情报的分析和利用，包括情报学理论情报采集情报分析情报检索以及二次三次文献编辑利用，目前情报技术也是研究热点之一</data>
</edge>
<edge source="档案" target="文献学">
  <data key="d2">is_a</data>
  <data key="d3">档案是一类特殊的文献，可以说是专业文献学之一种，在管理上较多的借鉴图书馆管理和技术方法</data>
</edge>
<edge source="档案" target="文献">
  <data key="d2">is_a</data>
  <data key="d3">档案是一类特殊的文献，可以说是专业文献学之一种，在管理上较多的借鉴图书馆管理和技术方法</data>
</edge>
<edge source="档案" target="专业">
  <data key="d2">is_a</data>
  <data key="d3">档案是一类特殊的文献，可以说是专业文献学之一种，在管理上较多的借鉴图书馆管理和技术方法</data>
</edge>
<edge source="档案" target="教师">
  <data key="d2">supports</data>
  <data key="d3">配合Running on Empty这篇文章，一个新的无党派宣传联盟：Computing in the Core（CinC）被建立，以影响联邦和政府政策，比如Computer Science Education Act（页面存档备份，存于互联网档案馆）要求政府拨款以制定计划完善计算机科学教育及支持计算机科学教师</data>
</edge>
<edge source="专业" target="12">
  <data key="d2">is_a</data>
  <data key="d3">然而，尽管计算机科学专业日益推动着美国经济，但是计算机科学教育依然不存在大多数美国K12课程中</data>
</edge>
<edge source="专业" target="课程">
  <data key="d2">is_a</data>
  <data key="d3">然而，尽管计算机科学专业日益推动着美国经济，但是计算机科学教育依然不存在大多数美国K12课程中</data>
</edge>
<edge source="专业" target="教育">
  <data key="d2">is_a</data>
  <data key="d3">然而，尽管计算机科学专业日益推动着美国经济，但是计算机科学教育依然不存在大多数美国K12课程中</data>
</edge>
<edge source="专业" target="用户">
  <data key="d2">uses</data>
  <data key="d3">现代社会见证了计算机从仅仅由专业人士使用到被广大用户接受的重大转变</data>
</edge>
<edge source="平台" target="传播">
  <data key="d2">implements</data>
  <data key="d3">图书馆訊息学就是研究訊息的组织整理，以及通过图书馆等平台实现訊息传递与传播，从而保障訊息有效查询与获取的学问</data>
</edge>
<edge source="平台" target="查询">
  <data key="d2">implements</data>
  <data key="d3">图书馆訊息学就是研究訊息的组织整理，以及通过图书馆等平台实现訊息传递与传播，从而保障訊息有效查询与获取的学问</data>
</edge>
<edge source="英語：library and information science, LIS" target="图书馆">
  <data key="d2">composed_of</data>
  <data key="d3">圖書資訊學註 1（英語：library and information science, LIS）于20世纪70年代由图书馆学與信息学两大领域合并而成</data>
</edge>
<edge source="英語：library and information science, LIS" target="信息学">
  <data key="d2">composed_of</data>
  <data key="d3">圖書資訊學註 1（英語：library and information science, LIS）于20世纪70年代由图书馆学與信息学两大领域合并而成</data>
</edge>
<edge source="英語：library and information science, LIS" target="图书馆学">
  <data key="d2">composed_of</data>
  <data key="d3">圖書資訊學註 1（英語：library and information science, LIS）于20世纪70年代由图书馆学與信息学两大领域合并而成</data>
</edge>
<edge source="英語：library and information science, LIS" target="领域">
  <data key="d2">composed_of</data>
  <data key="d3">圖書資訊學註 1（英語：library and information science, LIS）于20世纪70年代由图书馆学與信息学两大领域合并而成</data>
</edge>
<edge source="英語：library and information science, LIS" target="信息">
  <data key="d2">composed_of</data>
  <data key="d3">圖書資訊學註 1（英語：library and information science, LIS）于20世纪70年代由图书馆学與信息学两大领域合并而成</data>
</edge>
<edge source="2012年" target="语义">
  <data key="d2">is_a</data>
  <data key="d3">56 在谷歌于2012年发布知识图谱之前，Tim BernersLee于2006年就提出了Linked Data，是一种万维网数据上创建语义关联的方法</data>
</edge>
<edge source="2012年" target="万维网">
  <data key="d2">is_a</data>
  <data key="d3">56 在谷歌于2012年发布知识图谱之前，Tim BernersLee于2006年就提出了Linked Data，是一种万维网数据上创建语义关联的方法</data>
</edge>
<edge source="2012年" target="数据">
  <data key="d2">is_a</data>
  <data key="d3">56 在谷歌于2012年发布知识图谱之前，Tim BernersLee于2006年就提出了Linked Data，是一种万维网数据上创建语义关联的方法</data>
</edge>
<edge source="2012年" target="关联">
  <data key="d2">is_a</data>
  <data key="d3">56 在谷歌于2012年发布知识图谱之前，Tim BernersLee于2006年就提出了Linked Data，是一种万维网数据上创建语义关联的方法</data>
</edge>
<edge source="2012年" target="方法">
  <data key="d2">is_a</data>
  <data key="d3">56 在谷歌于2012年发布知识图谱之前，Tim BernersLee于2006年就提出了Linked Data，是一种万维网数据上创建语义关联的方法</data>
</edge>
<edge source="美国" target="12">
  <data key="d2">is_a</data>
  <data key="d3">然而，尽管计算机科学专业日益推动着美国经济，但是计算机科学教育依然不存在大多数美国K12课程中</data>
</edge>
<edge source="美国" target="课程">
  <data key="d2">is_a</data>
  <data key="d3">然而，尽管计算机科学专业日益推动着美国经济，但是计算机科学教育依然不存在大多数美国K12课程中</data>
</edge>
<edge source="美国" target="教育">
  <data key="d2">is_a</data>
  <data key="d3">然而，尽管计算机科学专业日益推动着美国经济，但是计算机科学教育依然不存在大多数美国K12课程中</data>
</edge>
<edge source="56" target="语义">
  <data key="d2">is_a</data>
  <data key="d3">56 在谷歌于2012年发布知识图谱之前，Tim BernersLee于2006年就提出了Linked Data，是一种万维网数据上创建语义关联的方法</data>
</edge>
<edge source="56" target="万维网">
  <data key="d2">is_a</data>
  <data key="d3">56 在谷歌于2012年发布知识图谱之前，Tim BernersLee于2006年就提出了Linked Data，是一种万维网数据上创建语义关联的方法</data>
</edge>
<edge source="56" target="数据">
  <data key="d2">is_a</data>
  <data key="d3">56 在谷歌于2012年发布知识图谱之前，Tim BernersLee于2006年就提出了Linked Data，是一种万维网数据上创建语义关联的方法</data>
</edge>
<edge source="56" target="关联">
  <data key="d2">is_a</data>
  <data key="d3">56 在谷歌于2012年发布知识图谱之前，Tim BernersLee于2006年就提出了Linked Data，是一种万维网数据上创建语义关联的方法</data>
</edge>
<edge source="56" target="方法">
  <data key="d2">is_a</data>
  <data key="d3">56 在谷歌于2012年发布知识图谱之前，Tim BernersLee于2006年就提出了Linked Data，是一种万维网数据上创建语义关联的方法</data>
</edge>
<edge source="16" target="第一">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="16" target="计算机科学">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="16" target="信息">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="16" target="理论">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="16" target="计算机">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="16" target="科学">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="16" target="科学家">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="16" target="理论家">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="Conversational" target="阿密特">
  <data key="d2">contains</data>
  <data key="d3">对话搜索（英語：Conversational search）技术包含阿密特推出的一种热关键词的搜索技术，不需要一个接口，即用户只需将Google搜索引擎说OK Google</data>
</edge>
<edge source="Conversational" target="关键词">
  <data key="d2">contains</data>
  <data key="d3">对话搜索（英語：Conversational search）技术包含阿密特推出的一种热关键词的搜索技术，不需要一个接口，即用户只需将Google搜索引擎说OK Google</data>
</edge>
<edge source="圣克鲁斯" target="列表">
  <data key="d2">is_a</data>
  <data key="d3">Google的约翰娜怀特解释说，搜索引擎使用知识图谱的数据产生的结果：知识图谱知道，圣克鲁斯是一个地方，且此列表与圣克鲁斯有关</data>
</edge>
<edge source="圣克鲁斯" target="地方">
  <data key="d2">is_a</data>
  <data key="d3">Google的约翰娜怀特解释说，搜索引擎使用知识图谱的数据产生的结果：知识图谱知道，圣克鲁斯是一个地方，且此列表与圣克鲁斯有关</data>
</edge>
<edge source="圣克鲁斯" target="有关">
  <data key="d2">is_a</data>
  <data key="d3">Google的约翰娜怀特解释说，搜索引擎使用知识图谱的数据产生的结果：知识图谱知道，圣克鲁斯是一个地方，且此列表与圣克鲁斯有关</data>
</edge>
<edge source="约翰娜怀特" target="列表">
  <data key="d2">is_a</data>
  <data key="d3">Google的约翰娜怀特解释说，搜索引擎使用知识图谱的数据产生的结果：知识图谱知道，圣克鲁斯是一个地方，且此列表与圣克鲁斯有关</data>
</edge>
<edge source="约翰娜怀特" target="地方">
  <data key="d2">produces</data>
  <data key="d3">Google的约翰娜怀特解释说，搜索引擎使用知识图谱的数据产生的结果：知识图谱知道，圣克鲁斯是一个地方，且此列表与圣克鲁斯有关</data>
</edge>
<edge source="约翰娜怀特" target="有关">
  <data key="d2">is_a</data>
  <data key="d3">Google的约翰娜怀特解释说，搜索引擎使用知识图谱的数据产生的结果：知识图谱知道，圣克鲁斯是一个地方，且此列表与圣克鲁斯有关</data>
</edge>
<edge source="约翰娜怀特" target="圣克鲁斯">
  <data key="d2">uses</data>
  <data key="d3">Google的约翰娜怀特解释说，搜索引擎使用知识图谱的数据产生的结果：知识图谱知道，圣克鲁斯是一个地方，且此列表与圣克鲁斯有关</data>
</edge>
<edge source="约翰娜怀特" target="结果">
  <data key="d2">uses</data>
  <data key="d3">Google的约翰娜怀特解释说，搜索引擎使用知识图谱的数据产生的结果：知识图谱知道，圣克鲁斯是一个地方，且此列表与圣克鲁斯有关</data>
</edge>
<edge source="约翰娜怀特" target="产生">
  <data key="d2">uses</data>
  <data key="d3">Google的约翰娜怀特解释说，搜索引擎使用知识图谱的数据产生的结果：知识图谱知道，圣克鲁斯是一个地方，且此列表与圣克鲁斯有关</data>
</edge>
<edge source="约翰娜怀特" target="知识图谱知道">
  <data key="d2">uses</data>
  <data key="d3">Google的约翰娜怀特解释说，搜索引擎使用知识图谱的数据产生的结果：知识图谱知道，圣克鲁斯是一个地方，且此列表与圣克鲁斯有关</data>
</edge>
<edge source="约翰娜怀特" target="图谱">
  <data key="d2">uses</data>
  <data key="d3">Google的约翰娜怀特解释说，搜索引擎使用知识图谱的数据产生的结果：知识图谱知道，圣克鲁斯是一个地方，且此列表与圣克鲁斯有关</data>
</edge>
<edge source="约翰娜怀特" target="数据">
  <data key="d2">uses</data>
  <data key="d3">Google的约翰娜怀特解释说，搜索引擎使用知识图谱的数据产生的结果：知识图谱知道，圣克鲁斯是一个地方，且此列表与圣克鲁斯有关</data>
</edge>
<edge source="约翰娜怀特" target="知识图谱">
  <data key="d2">uses</data>
  <data key="d3">Google的约翰娜怀特解释说，搜索引擎使用知识图谱的数据产生的结果：知识图谱知道，圣克鲁斯是一个地方，且此列表与圣克鲁斯有关</data>
</edge>
<edge source="来源" target="Freebase">
  <data key="d2">includes</data>
  <data key="d3">2 据Google称，知识图谱的信息来自许多来源，包括CIA的世界概况，Freebase和维基百科1</data>
</edge>
<edge source="来源" target="百科1">
  <data key="d2">includes</data>
  <data key="d3">2 据Google称，知识图谱的信息来自许多来源，包括CIA的世界概况，Freebase和维基百科1</data>
</edge>
<edge source="来源" target="世界">
  <data key="d2">includes</data>
  <data key="d3">2 据Google称，知识图谱的信息来自许多来源，包括CIA的世界概况，Freebase和维基百科1</data>
</edge>
<edge source="来源" target="概况">
  <data key="d2">includes</data>
  <data key="d3">2 据Google称，知识图谱的信息来自许多来源，包括CIA的世界概况，Freebase和维基百科1</data>
</edge>
<edge source="来源" target="维基百科">
  <data key="d2">includes</data>
  <data key="d3">2 据Google称，知识图谱的信息来自许多来源，包括CIA的世界概况，Freebase和维基百科1</data>
</edge>
<edge source="目标" target="信息">
  <data key="d2">includes</data>
  <data key="d3">计算机安全是计算机技术的一个分支，其目标包括保护信息免受未经授权的访问中断和修改，同时为系统的预期用户保持系统的可访问性和可用性</data>
</edge>
<edge source="目标" target="用户">
  <data key="d2">is_a</data>
  <data key="d3">其目标是，用户将能够使用此功能提供的信息来解决他们查询的问题，而不必导航到其他网站并自己汇总信息</data>
</edge>
<edge source="目标" target="功能">
  <data key="d2">uses</data>
  <data key="d3">其目标是，用户将能够使用此功能提供的信息来解决他们查询的问题，而不必导航到其他网站并自己汇总信息</data>
</edge>
<edge source="目标" target="方法">
  <data key="d2">is_a</data>
  <data key="d3">更早之前，语义链网络（Semantic Link Network）已经开始了系统性的研究，目标是创立一个自组织的语义互联方法来表达知识支持智能应用, 系统性的理论和方法作为专著发表于2004年</data>
</edge>
<edge source="目标" target="智能">
  <data key="d2">supports</data>
  <data key="d3">更早之前，语义链网络（Semantic Link Network）已经开始了系统性的研究，目标是创立一个自组织的语义互联方法来表达知识支持智能应用, 系统性的理论和方法作为专著发表于2004年</data>
</edge>
<edge source="目标" target="理论">
  <data key="d2">supports</data>
  <data key="d3">更早之前，语义链网络（Semantic Link Network）已经开始了系统性的研究，目标是创立一个自组织的语义互联方法来表达知识支持智能应用, 系统性的理论和方法作为专著发表于2004年</data>
</edge>
<edge source="目标" target="专著">
  <data key="d2">supports</data>
  <data key="d3">更早之前，语义链网络（Semantic Link Network）已经开始了系统性的研究，目标是创立一个自组织的语义互联方法来表达知识支持智能应用, 系统性的理论和方法作为专著发表于2004年</data>
</edge>
<edge source="目标" target="问题">
  <data key="d2">uses</data>
  <data key="d3">其目标是，用户将能够使用此功能提供的信息来解决他们查询的问题，而不必导航到其他网站并自己汇总信息</data>
</edge>
<edge source="目标" target="查询">
  <data key="d2">uses</data>
  <data key="d3">其目标是，用户将能够使用此功能提供的信息来解决他们查询的问题，而不必导航到其他网站并自己汇总信息</data>
</edge>
<edge source="目标" target="中断">
  <data key="d2">includes</data>
  <data key="d3">计算机安全是计算机技术的一个分支，其目标包括保护信息免受未经授权的访问中断和修改，同时为系统的预期用户保持系统的可访问性和可用性</data>
</edge>
<edge source="系统性" target="方法">
  <data key="d2">is_a</data>
  <data key="d3">更早之前，语义链网络（Semantic Link Network）已经开始了系统性的研究，目标是创立一个自组织的语义互联方法来表达知识支持智能应用, 系统性的理论和方法作为专著发表于2004年</data>
</edge>
<edge source="系统性" target="智能">
  <data key="d2">supports</data>
  <data key="d3">更早之前，语义链网络（Semantic Link Network）已经开始了系统性的研究，目标是创立一个自组织的语义互联方法来表达知识支持智能应用, 系统性的理论和方法作为专著发表于2004年</data>
</edge>
<edge source="系统性" target="理论">
  <data key="d2">supports</data>
  <data key="d3">更早之前，语义链网络（Semantic Link Network）已经开始了系统性的研究，目标是创立一个自组织的语义互联方法来表达知识支持智能应用, 系统性的理论和方法作为专著发表于2004年</data>
</edge>
<edge source="系统性" target="专著">
  <data key="d2">supports</data>
  <data key="d3">更早之前，语义链网络（Semantic Link Network）已经开始了系统性的研究，目标是创立一个自组织的语义互联方法来表达知识支持智能应用, 系统性的理论和方法作为专著发表于2004年</data>
</edge>
<edge source="系统性" target="实用技术">
  <data key="d2">implements</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="系统性" target="学科">
  <data key="d2">implements</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="系统性" target="技术">
  <data key="d2">implements</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="智能" target="科学">
  <data key="d2">is_a</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="智能" target="物理">
  <data key="d2">is_a</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="工作" target="第一">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="工作" target="计算机科学">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="工作" target="信息">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="工作" target="理论">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="工作" target="计算机">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="工作" target="科学">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="工作" target="科学家">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="工作" target="理论家">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="工作" target="事情">
  <data key="d2">is_a</data>
  <data key="d3">不过，使用IBM电脑工作仍然是一件很沮丧的事情</data>
</edge>
<edge source="对话" target="阿密特">
  <data key="d2">contains</data>
  <data key="d3">对话搜索（英語：Conversational search）技术包含阿密特推出的一种热关键词的搜索技术，不需要一个接口，即用户只需将Google搜索引擎说OK Google</data>
</edge>
<edge source="对话" target="关键词">
  <data key="d2">contains</data>
  <data key="d3">对话搜索（英語：Conversational search）技术包含阿密特推出的一种热关键词的搜索技术，不需要一个接口，即用户只需将Google搜索引擎说OK Google</data>
</edge>
<edge source="电脑" target="事情">
  <data key="d2">is_a</data>
  <data key="d3">不过，使用IBM电脑工作仍然是一件很沮丧的事情</data>
</edge>
<edge source="电脑" target="核心">
  <data key="d2">is_a</data>
  <data key="d3">操作系统是管理电脑硬件与软件资源的电脑程式，同时也是电脑系统的核心与基石</data>
</edge>
<edge source="电脑" target="基石">
  <data key="d2">is_a</data>
  <data key="d3">操作系统是管理电脑硬件与软件资源的电脑程式，同时也是电脑系统的核心与基石</data>
</edge>
<edge source="怀特" target="列表">
  <data key="d2">is_a</data>
  <data key="d3">Google的约翰娜怀特解释说，搜索引擎使用知识图谱的数据产生的结果：知识图谱知道，圣克鲁斯是一个地方，且此列表与圣克鲁斯有关</data>
</edge>
<edge source="怀特" target="地方">
  <data key="d2">produces</data>
  <data key="d3">Google的约翰娜怀特解释说，搜索引擎使用知识图谱的数据产生的结果：知识图谱知道，圣克鲁斯是一个地方，且此列表与圣克鲁斯有关</data>
</edge>
<edge source="怀特" target="有关">
  <data key="d2">is_a</data>
  <data key="d3">Google的约翰娜怀特解释说，搜索引擎使用知识图谱的数据产生的结果：知识图谱知道，圣克鲁斯是一个地方，且此列表与圣克鲁斯有关</data>
</edge>
<edge source="怀特" target="圣克鲁斯">
  <data key="d2">uses</data>
  <data key="d3">Google的约翰娜怀特解释说，搜索引擎使用知识图谱的数据产生的结果：知识图谱知道，圣克鲁斯是一个地方，且此列表与圣克鲁斯有关</data>
</edge>
<edge source="怀特" target="结果">
  <data key="d2">uses</data>
  <data key="d3">Google的约翰娜怀特解释说，搜索引擎使用知识图谱的数据产生的结果：知识图谱知道，圣克鲁斯是一个地方，且此列表与圣克鲁斯有关</data>
</edge>
<edge source="怀特" target="产生">
  <data key="d2">uses</data>
  <data key="d3">Google的约翰娜怀特解释说，搜索引擎使用知识图谱的数据产生的结果：知识图谱知道，圣克鲁斯是一个地方，且此列表与圣克鲁斯有关</data>
</edge>
<edge source="怀特" target="知识图谱知道">
  <data key="d2">uses</data>
  <data key="d3">Google的约翰娜怀特解释说，搜索引擎使用知识图谱的数据产生的结果：知识图谱知道，圣克鲁斯是一个地方，且此列表与圣克鲁斯有关</data>
</edge>
<edge source="怀特" target="图谱">
  <data key="d2">uses</data>
  <data key="d3">Google的约翰娜怀特解释说，搜索引擎使用知识图谱的数据产生的结果：知识图谱知道，圣克鲁斯是一个地方，且此列表与圣克鲁斯有关</data>
</edge>
<edge source="怀特" target="数据">
  <data key="d2">uses</data>
  <data key="d3">Google的约翰娜怀特解释说，搜索引擎使用知识图谱的数据产生的结果：知识图谱知道，圣克鲁斯是一个地方，且此列表与圣克鲁斯有关</data>
</edge>
<edge source="怀特" target="知识图谱">
  <data key="d2">uses</data>
  <data key="d3">Google的约翰娜怀特解释说，搜索引擎使用知识图谱的数据产生的结果：知识图谱知道，圣克鲁斯是一个地方，且此列表与圣克鲁斯有关</data>
</edge>
<edge source="Google Knowledge Graph" target="知识库">
  <data key="d2">is_a</data>
  <data key="d3">Google知识图谱（英語：Google Knowledge Graph，也称Google知识图）是Google的一个知识库，其使用语义检索从多种来源收集信息，以提高Google搜索的质量</data>
</edge>
<edge source="Google Knowledge Graph" target="语义">
  <data key="d2">uses</data>
  <data key="d3">Google知识图谱（英語：Google Knowledge Graph，也称Google知识图）是Google的一个知识库，其使用语义检索从多种来源收集信息，以提高Google搜索的质量</data>
</edge>
<edge source="Google Knowledge Graph" target="检索">
  <data key="d2">uses</data>
  <data key="d3">Google知识图谱（英語：Google Knowledge Graph，也称Google知识图）是Google的一个知识库，其使用语义检索从多种来源收集信息，以提高Google搜索的质量</data>
</edge>
<edge source="Google Knowledge Graph" target="来源">
  <data key="d2">uses</data>
  <data key="d3">Google知识图谱（英語：Google Knowledge Graph，也称Google知识图）是Google的一个知识库，其使用语义检索从多种来源收集信息，以提高Google搜索的质量</data>
</edge>
<edge source="Google Knowledge Graph" target="信息">
  <data key="d2">uses</data>
  <data key="d3">Google知识图谱（英語：Google Knowledge Graph，也称Google知识图）是Google的一个知识库，其使用语义检索从多种来源收集信息，以提高Google搜索的质量</data>
</edge>
<edge source="知识图谱知道" target="列表">
  <data key="d2">is_a</data>
  <data key="d3">Google的约翰娜怀特解释说，搜索引擎使用知识图谱的数据产生的结果：知识图谱知道，圣克鲁斯是一个地方，且此列表与圣克鲁斯有关</data>
</edge>
<edge source="知识图谱知道" target="地方">
  <data key="d2">is_a</data>
  <data key="d3">Google的约翰娜怀特解释说，搜索引擎使用知识图谱的数据产生的结果：知识图谱知道，圣克鲁斯是一个地方，且此列表与圣克鲁斯有关</data>
</edge>
<edge source="知识图谱知道" target="有关">
  <data key="d2">is_a</data>
  <data key="d3">Google的约翰娜怀特解释说，搜索引擎使用知识图谱的数据产生的结果：知识图谱知道，圣克鲁斯是一个地方，且此列表与圣克鲁斯有关</data>
</edge>
<edge source="英語：Google Knowledge Graph，也称Google知识图" target="知识库">
  <data key="d2">is_a</data>
  <data key="d3">Google知识图谱（英語：Google Knowledge Graph，也称Google知识图）是Google的一个知识库，其使用语义检索从多种来源收集信息，以提高Google搜索的质量</data>
</edge>
<edge source="英語：Google Knowledge Graph，也称Google知识图" target="语义">
  <data key="d2">uses</data>
  <data key="d3">Google知识图谱（英語：Google Knowledge Graph，也称Google知识图）是Google的一个知识库，其使用语义检索从多种来源收集信息，以提高Google搜索的质量</data>
</edge>
<edge source="英語：Google Knowledge Graph，也称Google知识图" target="检索">
  <data key="d2">uses</data>
  <data key="d3">Google知识图谱（英語：Google Knowledge Graph，也称Google知识图）是Google的一个知识库，其使用语义检索从多种来源收集信息，以提高Google搜索的质量</data>
</edge>
<edge source="英語：Google Knowledge Graph，也称Google知识图" target="来源">
  <data key="d2">uses</data>
  <data key="d3">Google知识图谱（英語：Google Knowledge Graph，也称Google知识图）是Google的一个知识库，其使用语义检索从多种来源收集信息，以提高Google搜索的质量</data>
</edge>
<edge source="英語：Google Knowledge Graph，也称Google知识图" target="信息">
  <data key="d2">uses</data>
  <data key="d3">Google知识图谱（英語：Google Knowledge Graph，也称Google知识图）是Google的一个知识库，其使用语义检索从多种来源收集信息，以提高Google搜索的质量</data>
</edge>
<edge source="Semantic Link Network" target="方法">
  <data key="d2">is_a</data>
  <data key="d3">更早之前，语义链网络（Semantic Link Network）已经开始了系统性的研究，目标是创立一个自组织的语义互联方法来表达知识支持智能应用, 系统性的理论和方法作为专著发表于2004年</data>
</edge>
<edge source="Semantic Link Network" target="智能">
  <data key="d2">supports</data>
  <data key="d3">更早之前，语义链网络（Semantic Link Network）已经开始了系统性的研究，目标是创立一个自组织的语义互联方法来表达知识支持智能应用, 系统性的理论和方法作为专著发表于2004年</data>
</edge>
<edge source="Semantic Link Network" target="理论">
  <data key="d2">supports</data>
  <data key="d3">更早之前，语义链网络（Semantic Link Network）已经开始了系统性的研究，目标是创立一个自组织的语义互联方法来表达知识支持智能应用, 系统性的理论和方法作为专著发表于2004年</data>
</edge>
<edge source="Semantic Link Network" target="专著">
  <data key="d2">supports</data>
  <data key="d3">更早之前，语义链网络（Semantic Link Network）已经开始了系统性的研究，目标是创立一个自组织的语义互联方法来表达知识支持智能应用, 系统性的理论和方法作为专著发表于2004年</data>
</edge>
<edge source="英語：Conversational search" target="阿密特">
  <data key="d2">contains</data>
  <data key="d3">对话搜索（英語：Conversational search）技术包含阿密特推出的一种热关键词的搜索技术，不需要一个接口，即用户只需将Google搜索引擎说OK Google</data>
</edge>
<edge source="英語：Conversational search" target="关键词">
  <data key="d2">contains</data>
  <data key="d3">对话搜索（英語：Conversational search）技术包含阿密特推出的一种热关键词的搜索技术，不需要一个接口，即用户只需将Google搜索引擎说OK Google</data>
</edge>
<edge source="專注于" target="研究">
  <data key="d2">implements</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="專注于" target="方法">
  <data key="d2">implements</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="專注于" target="程式设计">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="專注于" target="设计">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="專注于" target="程式">
  <data key="d2">implements</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="專注于" target="語言">
  <data key="d2">implements</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="專注于" target="理論">
  <data key="d2">implements</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="丹麦" target="计算机">
  <data key="d2">is_a</data>
  <data key="d3">丹麦科学家彼得諾爾建议使用术语"datalogy"，以反映这一事实，即科学学科是围绕着数据和数据处理，而不一定要涉及计算机</data>
</edge>
<edge source="丹麦" target="数据">
  <data key="d2">is_a</data>
  <data key="d3">丹麦科学家彼得諾爾建议使用术语"datalogy"，以反映这一事实，即科学学科是围绕着数据和数据处理，而不一定要涉及计算机</data>
</edge>
<edge source="丹麦" target="数据处理">
  <data key="d2">is_a</data>
  <data key="d3">丹麦科学家彼得諾爾建议使用术语"datalogy"，以反映这一事实，即科学学科是围绕着数据和数据处理，而不一定要涉及计算机</data>
</edge>
<edge source="丹麦" target="术语">
  <data key="d2">uses</data>
  <data key="d3">丹麦科学家彼得諾爾建议使用术语"datalogy"，以反映这一事实，即科学学科是围绕着数据和数据处理，而不一定要涉及计算机</data>
</edge>
<edge source="丹麦" target="事实">
  <data key="d2">uses</data>
  <data key="d3">丹麦科学家彼得諾爾建议使用术语"datalogy"，以反映这一事实，即科学学科是围绕着数据和数据处理，而不一定要涉及计算机</data>
</edge>
<edge source="丹麦" target="datalogy">
  <data key="d2">uses</data>
  <data key="d3">丹麦科学家彼得諾爾建议使用术语"datalogy"，以反映这一事实，即科学学科是围绕着数据和数据处理，而不一定要涉及计算机</data>
</edge>
<edge source="UCPH Department of Computer Science" target="教授">
  <data key="d2">is_a</data>
  <data key="d3">第一个使用这个术语的科学机构是哥本哈根大学计算科学系（英语：UCPH Department of Computer Science），该学院成立于1969年，彼得諾爾便是第一任教授</data>
</edge>
<edge source="艾兹" target="天文学">
  <data key="d2">is_a</data>
  <data key="d3">著名计算机科学家艾兹赫尔戴克斯特拉曾经指出：计算机科学并不只是关于计算机，就像天文学并不只是关于望远镜一样</data>
</edge>
<edge source="艾兹" target="望远镜">
  <data key="d2">is_a</data>
  <data key="d3">著名计算机科学家艾兹赫尔戴克斯特拉曾经指出：计算机科学并不只是关于计算机，就像天文学并不只是关于望远镜一样</data>
</edge>
<edge source="12 早期" target="英语">
  <data key="d2">affects</data>
  <data key="d3">12 早期计算机科学受数学研究成果的影响很大，如库尔特哥德尔艾伦图灵路莎彼得（英语：Rózsa Péter），阿隆佐邱奇等数学家的研究，这两个领域在某些学科，例如数理逻辑范畴论域理论和代数，也不断有有益的思想交流</data>
</edge>
<edge source="12 早期" target="艾伦">
  <data key="d2">affects</data>
  <data key="d3">12 早期计算机科学受数学研究成果的影响很大，如库尔特哥德尔艾伦图灵路莎彼得（英语：Rózsa Péter），阿隆佐邱奇等数学家的研究，这两个领域在某些学科，例如数理逻辑范畴论域理论和代数，也不断有有益的思想交流</data>
</edge>
<edge source="12 早期" target="影响">
  <data key="d2">affects</data>
  <data key="d3">12 早期计算机科学受数学研究成果的影响很大，如库尔特哥德尔艾伦图灵路莎彼得（英语：Rózsa Péter），阿隆佐邱奇等数学家的研究，这两个领域在某些学科，例如数理逻辑范畴论域理论和代数，也不断有有益的思想交流</data>
</edge>
<edge source="12 早期" target="哥德尔">
  <data key="d2">affects</data>
  <data key="d3">12 早期计算机科学受数学研究成果的影响很大，如库尔特哥德尔艾伦图灵路莎彼得（英语：Rózsa Péter），阿隆佐邱奇等数学家的研究，这两个领域在某些学科，例如数理逻辑范畴论域理论和代数，也不断有有益的思想交流</data>
</edge>
<edge source="12 早期" target="图灵">
  <data key="d2">affects</data>
  <data key="d3">12 早期计算机科学受数学研究成果的影响很大，如库尔特哥德尔艾伦图灵路莎彼得（英语：Rózsa Péter），阿隆佐邱奇等数学家的研究，这两个领域在某些学科，例如数理逻辑范畴论域理论和代数，也不断有有益的思想交流</data>
</edge>
<edge source="12 早期" target="英语：Rózsa Péter">
  <data key="d2">affects</data>
  <data key="d3">12 早期计算机科学受数学研究成果的影响很大，如库尔特哥德尔艾伦图灵路莎彼得（英语：Rózsa Péter），阿隆佐邱奇等数学家的研究，这两个领域在某些学科，例如数理逻辑范畴论域理论和代数，也不断有有益的思想交流</data>
</edge>
<edge source="1673年" target="第一">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="1673年" target="计算机科学">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="1673年" target="信息">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="1673年" target="理论">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="1673年" target="计算机">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="1673年" target="科学">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="1673年" target="科学家">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="1673年" target="理论家">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="莱布尼兹" target="第一">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="莱布尼兹" target="计算机科学">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="莱布尼兹" target="信息">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="莱布尼兹" target="理论">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="莱布尼兹" target="计算机">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="莱布尼兹" target="科学">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="莱布尼兹" target="科学家">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="莱布尼兹" target="理论家">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="1694年" target="第一">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="1694年" target="计算机科学">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="1694年" target="信息">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="1694年" target="理论">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="1694年" target="计算机">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="1694年" target="科学">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="1694年" target="科学家">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="1694年" target="理论家">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="二进制" target="第一">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="二进制" target="计算机科学">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="二进制" target="信息">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="二进制" target="理论">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="二进制" target="计算机">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="二进制" target="科学">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="二进制" target="科学家">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="二进制" target="理论家">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="20世纪40年代" target="祖先">
  <data key="d2">used_for</data>
  <data key="d3">到了20世纪40年代，随着更新更强大的计算机器(如ABC计算机电子数值积分计算机)被发明，术语计算机开始用于指代那些机器而不是它们的祖先</data>
</edge>
<edge source="20世纪40年代" target="指代">
  <data key="d2">used_for</data>
  <data key="d3">到了20世纪40年代，随着更新更强大的计算机器(如ABC计算机电子数值积分计算机)被发明，术语计算机开始用于指代那些机器而不是它们的祖先</data>
</edge>
<edge source="17计算机" target="计算机科学">
  <data key="d2">used_for</data>
  <data key="d3">17计算机的概念变得更加清晰，它不仅仅用于数学运算，总的来说计算机科学的领域也扩展到了对于计算的研究</data>
</edge>
<edge source="17计算机" target="领域">
  <data key="d2">used_for</data>
  <data key="d3">17计算机的概念变得更加清晰，它不仅仅用于数学运算，总的来说计算机科学的领域也扩展到了对于计算的研究</data>
</edge>
<edge source="17计算机" target="科学">
  <data key="d2">used_for</data>
  <data key="d3">17计算机的概念变得更加清晰，它不仅仅用于数学运算，总的来说计算机科学的领域也扩展到了对于计算的研究</data>
</edge>
<edge source="17计算机" target="数学">
  <data key="d2">used_for</data>
  <data key="d3">17计算机的概念变得更加清晰，它不仅仅用于数学运算，总的来说计算机科学的领域也扩展到了对于计算的研究</data>
</edge>
<edge source="17计算机" target="运算">
  <data key="d2">used_for</data>
  <data key="d3">17计算机的概念变得更加清晰，它不仅仅用于数学运算，总的来说计算机科学的领域也扩展到了对于计算的研究</data>
</edge>
<edge source="17计算机" target="研究">
  <data key="d2">extends</data>
  <data key="d3">17计算机的概念变得更加清晰，它不仅仅用于数学运算，总的来说计算机科学的领域也扩展到了对于计算的研究</data>
</edge>
<edge source="18" target="普渡大学">
  <data key="d2">composed_of</data>
  <data key="d3">18 世界上第一个计算机科学学位点由普渡大学在1962年设立</data>
</edge>
<edge source="18" target="1962年">
  <data key="d2">composed_of</data>
  <data key="d3">18 世界上第一个计算机科学学位点由普渡大学在1962年设立</data>
</edge>
<edge source="18" target="19">
  <data key="d2">composed_of</data>
  <data key="d3">18 世界上第一个计算机科学学位点由普渡大学在1962年设立</data>
</edge>
<edge source="18" target="大学">
  <data key="d2">composed_of</data>
  <data key="d3">18 世界上第一个计算机科学学位点由普渡大学在1962年设立</data>
</edge>
<edge source="19" target="教授">
  <data key="d2">is_a</data>
  <data key="d3">第一个使用这个术语的科学机构是哥本哈根大学计算科学系（英语：UCPH Department of Computer Science），该学院成立于1969年，彼得諾爾便是第一任教授</data>
</edge>
<edge source="50年" target="事情">
  <data key="d2">is_a</data>
  <data key="d3">2020世纪50年代后期，计算机科学学科還在发展階段，这種問題在当时是一件很常見的事情</data>
</edge>
<edge source="20" target="祖先">
  <data key="d2">used_for</data>
  <data key="d3">到了20世纪40年代，随着更新更强大的计算机器(如ABC计算机电子数值积分计算机)被发明，术语计算机开始用于指代那些机器而不是它们的祖先</data>
</edge>
<edge source="20" target="之一">
  <data key="d2">is_a</data>
  <data key="d3">20IBM公司是那段时期计算机科学革命的参与者之一</data>
</edge>
<edge source="20" target="计算机科学">
  <data key="d2">is_a</data>
  <data key="d3">20IBM公司是那段时期计算机科学革命的参与者之一</data>
</edge>
<edge source="20" target="计算机">
  <data key="d2">is_a</data>
  <data key="d3">20IBM公司是那段时期计算机科学革命的参与者之一</data>
</edge>
<edge source="20" target="科学">
  <data key="d2">is_a</data>
  <data key="d3">20IBM公司是那段时期计算机科学革命的参与者之一</data>
</edge>
<edge source="20" target="时期">
  <data key="d2">is_a</data>
  <data key="d3">20IBM公司是那段时期计算机科学革命的参与者之一</data>
</edge>
<edge source="20" target="革命">
  <data key="d2">is_a</data>
  <data key="d3">20IBM公司是那段时期计算机科学革命的参与者之一</data>
</edge>
<edge source="20" target="参与者">
  <data key="d2">is_a</data>
  <data key="d3">20IBM公司是那段时期计算机科学革命的参与者之一</data>
</edge>
<edge source="20" target="事情">
  <data key="d2">is_a</data>
  <data key="d3">2020世纪50年代后期，计算机科学学科還在发展階段，这種問題在当时是一件很常見的事情</data>
</edge>
<edge source="20" target="档案馆">
  <data key="d2">composed_of</data>
  <data key="d3">2010年10月由ACM（页面存档备份，存于互联网档案馆）和计算机科学教师协会（CSTA）（页面存档备份，存于互联网档案馆）共同发表了一篇名为Running on Empty: The Failure to Teach K12 Computer Science in the Digital Age的报告，文中揭示了仅有14个州通过了有意义的高中计算机科学教育标准</data>
</edge>
<edge source="20" target="档案">
  <data key="d2">composed_of</data>
  <data key="d3">2010年10月由ACM（页面存档备份，存于互联网档案馆）和计算机科学教师协会（CSTA）（页面存档备份，存于互联网档案馆）共同发表了一篇名为Running on Empty: The Failure to Teach K12 Computer Science in the Digital Age的报告，文中揭示了仅有14个州通过了有意义的高中计算机科学教育标准</data>
</edge>
<edge source="20" target="页面">
  <data key="d2">composed_of</data>
  <data key="d3">2010年10月由ACM（页面存档备份，存于互联网档案馆）和计算机科学教师协会（CSTA）（页面存档备份，存于互联网档案馆）共同发表了一篇名为Running on Empty: The Failure to Teach K12 Computer Science in the Digital Age的报告，文中揭示了仅有14个州通过了有意义的高中计算机科学教育标准</data>
</edge>
<edge source="20" target="备份">
  <data key="d2">composed_of</data>
  <data key="d3">2010年10月由ACM（页面存档备份，存于互联网档案馆）和计算机科学教师协会（CSTA）（页面存档备份，存于互联网档案馆）共同发表了一篇名为Running on Empty: The Failure to Teach K12 Computer Science in the Digital Age的报告，文中揭示了仅有14个州通过了有意义的高中计算机科学教育标准</data>
</edge>
<edge source="20" target="互联网">
  <data key="d2">composed_of</data>
  <data key="d3">2010年10月由ACM（页面存档备份，存于互联网档案馆）和计算机科学教师协会（CSTA）（页面存档备份，存于互联网档案馆）共同发表了一篇名为Running on Empty: The Failure to Teach K12 Computer Science in the Digital Age的报告，文中揭示了仅有14个州通过了有意义的高中计算机科学教育标准</data>
</edge>
<edge source="20" target="ACM">
  <data key="d2">composed_of</data>
  <data key="d3">2010年10月由ACM（页面存档备份，存于互联网档案馆）和计算机科学教师协会（CSTA）（页面存档备份，存于互联网档案馆）共同发表了一篇名为Running on Empty: The Failure to Teach K12 Computer Science in the Digital Age的报告，文中揭示了仅有14个州通过了有意义的高中计算机科学教育标准</data>
</edge>
<edge source="20" target="页面存档备份，存于互联网档案馆">
  <data key="d2">composed_of</data>
  <data key="d3">2010年10月由ACM（页面存档备份，存于互联网档案馆）和计算机科学教师协会（CSTA）（页面存档备份，存于互联网档案馆）共同发表了一篇名为Running on Empty: The Failure to Teach K12 Computer Science in the Digital Age的报告，文中揭示了仅有14个州通过了有意义的高中计算机科学教育标准</data>
</edge>
<edge source="20" target="指代">
  <data key="d2">used_for</data>
  <data key="d3">到了20世纪40年代，随着更新更强大的计算机器(如ABC计算机电子数值积分计算机)被发明，术语计算机开始用于指代那些机器而不是它们的祖先</data>
</edge>
<edge source="之一" target="理论">
  <data key="d2">is_a</data>
  <data key="d3">问题，千禧年大奖难题之一，36是计算理论的一个开放问题</data>
</edge>
<edge source="之一" target="计算理论">
  <data key="d2">is_a</data>
  <data key="d3">问题，千禧年大奖难题之一，36是计算理论的一个开放问题</data>
</edge>
<edge source="IBM" target="之一">
  <data key="d2">is_a</data>
  <data key="d3">20IBM公司是那段时期计算机科学革命的参与者之一</data>
</edge>
<edge source="IBM" target="计算机科学">
  <data key="d2">is_a</data>
  <data key="d3">20IBM公司是那段时期计算机科学革命的参与者之一</data>
</edge>
<edge source="IBM" target="计算机">
  <data key="d2">is_a</data>
  <data key="d3">20IBM公司是那段时期计算机科学革命的参与者之一</data>
</edge>
<edge source="IBM" target="科学">
  <data key="d2">is_a</data>
  <data key="d3">20IBM公司是那段时期计算机科学革命的参与者之一</data>
</edge>
<edge source="IBM" target="时期">
  <data key="d2">is_a</data>
  <data key="d3">20IBM公司是那段时期计算机科学革命的参与者之一</data>
</edge>
<edge source="IBM" target="革命">
  <data key="d2">is_a</data>
  <data key="d3">20IBM公司是那段时期计算机科学革命的参与者之一</data>
</edge>
<edge source="IBM" target="参与者">
  <data key="d2">is_a</data>
  <data key="d3">20IBM公司是那段时期计算机科学革命的参与者之一</data>
</edge>
<edge source="IBM" target="事情">
  <data key="d2">is_a</data>
  <data key="d3">不过，使用IBM电脑工作仍然是一件很沮丧的事情</data>
</edge>
<edge source="2020世纪50年代后期" target="事情">
  <data key="d2">is_a</data>
  <data key="d3">2020世纪50年代后期，计算机科学学科還在发展階段，这種問題在当时是一件很常見的事情</data>
</edge>
<edge source="Eden" target="计算机科学">
  <data key="d2">applied_to</data>
  <data key="d3">Eden提议了三种范式应用于计算机科学的各个领域：31 作为一个学科，计算机科学涵盖了从算法的理论研究和计算的极限，到如何通过硬件和软件实现计算系统</data>
</edge>
<edge source="Eden" target="学科">
  <data key="d2">applied_to</data>
  <data key="d3">Eden提议了三种范式应用于计算机科学的各个领域：31 作为一个学科，计算机科学涵盖了从算法的理论研究和计算的极限，到如何通过硬件和软件实现计算系统</data>
</edge>
<edge source="Eden" target="领域">
  <data key="d2">applied_to</data>
  <data key="d3">Eden提议了三种范式应用于计算机科学的各个领域：31 作为一个学科，计算机科学涵盖了从算法的理论研究和计算的极限，到如何通过硬件和软件实现计算系统</data>
</edge>
<edge source="Eden" target="计算机">
  <data key="d2">applied_to</data>
  <data key="d3">Eden提议了三种范式应用于计算机科学的各个领域：31 作为一个学科，计算机科学涵盖了从算法的理论研究和计算的极限，到如何通过硬件和软件实现计算系统</data>
</edge>
<edge source="Eden" target="科学">
  <data key="d2">applied_to</data>
  <data key="d3">Eden提议了三种范式应用于计算机科学的各个领域：31 作为一个学科，计算机科学涵盖了从算法的理论研究和计算的极限，到如何通过硬件和软件实现计算系统</data>
</edge>
<edge source="Eden" target="31 作为一个学科">
  <data key="d2">applied_to</data>
  <data key="d3">Eden提议了三种范式应用于计算机科学的各个领域：31 作为一个学科，计算机科学涵盖了从算法的理论研究和计算的极限，到如何通过硬件和软件实现计算系统</data>
</edge>
<edge source="Eden" target="系统">
  <data key="d2">implements</data>
  <data key="d3">Eden提议了三种范式应用于计算机科学的各个领域：31 作为一个学科，计算机科学涵盖了从算法的理论研究和计算的极限，到如何通过硬件和软件实现计算系统</data>
</edge>
<edge source="3233 CSAB" target="for Computing Machinery">
  <data key="d2">composed_of</data>
  <data key="d3">3233 CSAB（以前被叫做Computing Sciences Accreditation Board），由Association for Computing Machinery（ACM）和IEEE计算机协会（英语：IEEE Computer Society）（IEEECS）的代表组成34，确立了计算机科学学科的4个主要领域：计算理论，算法与数据结构，编程方法与编程语言，以及计算机组成与架构</data>
</edge>
<edge source="Computing Sciences Accreditation Board" target="for Computing Machinery">
  <data key="d2">composed_of</data>
  <data key="d3">3233 CSAB（以前被叫做Computing Sciences Accreditation Board），由Association for Computing Machinery（ACM）和IEEE计算机协会（英语：IEEE Computer Society）（IEEECS）的代表组成34，确立了计算机科学学科的4个主要领域：计算理论，算法与数据结构，编程方法与编程语言，以及计算机组成与架构</data>
</edge>
<edge source="35" target="计算机科学">
  <data key="d2">is_a</data>
  <data key="d3">35算法是计算机科学研究的一个重要领域，也是许多其他计算机科学技术的基础</data>
</edge>
<edge source="35" target="研究">
  <data key="d2">is_a</data>
  <data key="d3">35算法是计算机科学研究的一个重要领域，也是许多其他计算机科学技术的基础</data>
</edge>
<edge source="35" target="领域">
  <data key="d2">is_a</data>
  <data key="d3">35算法是计算机科学研究的一个重要领域，也是许多其他计算机科学技术的基础</data>
</edge>
<edge source="35" target="计算机">
  <data key="d2">is_a</data>
  <data key="d3">35算法是计算机科学研究的一个重要领域，也是许多其他计算机科学技术的基础</data>
</edge>
<edge source="35" target="科学">
  <data key="d2">is_a</data>
  <data key="d3">35算法是计算机科学研究的一个重要领域，也是许多其他计算机科学技术的基础</data>
</edge>
<edge source="35" target="科学研究">
  <data key="d2">is_a</data>
  <data key="d3">35算法是计算机科学研究的一个重要领域，也是许多其他计算机科学技术的基础</data>
</edge>
<edge source="Denning" target="自动">
  <data key="d2">is_a</data>
  <data key="d3">Denning的说法，计算机科学的最根本问题是什么能够被有效地自动化</data>
</edge>
<edge source="千禧年" target="理论">
  <data key="d2">is_a</data>
  <data key="d3">问题，千禧年大奖难题之一，36是计算理论的一个开放问题</data>
</edge>
<edge source="千禧年" target="计算理论">
  <data key="d2">is_a</data>
  <data key="d3">问题，千禧年大奖难题之一，36是计算理论的一个开放问题</data>
</edge>
<edge source="36" target="理论">
  <data key="d2">is_a</data>
  <data key="d3">问题，千禧年大奖难题之一，36是计算理论的一个开放问题</data>
</edge>
<edge source="36" target="计算理论">
  <data key="d2">is_a</data>
  <data key="d3">问题，千禧年大奖难题之一，36是计算理论的一个开放问题</data>
</edge>
<edge source="信息论" target="克劳德香农">
  <data key="d2">composed_of</data>
  <data key="d3">信息论与信息量化相关，由克劳德香农创建，用于寻找信号处理操作的根本极限，比如压缩数据和可靠的数据存储与通讯</data>
</edge>
<edge source="信息论" target="香农">
  <data key="d2">composed_of</data>
  <data key="d3">信息论与信息量化相关，由克劳德香农创建，用于寻找信号处理操作的根本极限，比如压缩数据和可靠的数据存储与通讯</data>
</edge>
<edge source="信息论" target="信号处理">
  <data key="d2">used_for</data>
  <data key="d3">信息论与信息量化相关，由克劳德香农创建，用于寻找信号处理操作的根本极限，比如压缩数据和可靠的数据存储与通讯</data>
</edge>
<edge source="信息论" target="数据">
  <data key="d2">used_for</data>
  <data key="d3">信息论与信息量化相关，由克劳德香农创建，用于寻找信号处理操作的根本极限，比如压缩数据和可靠的数据存储与通讯</data>
</edge>
<edge source="克劳德香农" target="数据">
  <data key="d2">used_for</data>
  <data key="d3">信息论与信息量化相关，由克劳德香农创建，用于寻找信号处理操作的根本极限，比如压缩数据和可靠的数据存储与通讯</data>
</edge>
<edge source="克劳德香农" target="信号处理">
  <data key="d2">used_for</data>
  <data key="d3">信息论与信息量化相关，由克劳德香农创建，用于寻找信号处理操作的根本极限，比如压缩数据和可靠的数据存储与通讯</data>
</edge>
<edge source="并发性" target="系统">
  <data key="d2">is_a</data>
  <data key="d3">并发性（concurrency）是系统的一种性质，这类系统可以同时执行多个可能互相交互的计算</data>
</edge>
<edge source="并发性" target="性质">
  <data key="d2">is_a</data>
  <data key="d3">并发性（concurrency）是系统的一种性质，这类系统可以同时执行多个可能互相交互的计算</data>
</edge>
<edge source="并发性" target="计算机">
  <data key="d2">extends</data>
  <data key="d3">分布式系统将并发性的思想扩展到了多台由网络连接的计算机</data>
</edge>
<edge source="并发性" target="网络">
  <data key="d2">extends</data>
  <data key="d3">分布式系统将并发性的思想扩展到了多台由网络连接的计算机</data>
</edge>
<edge source="并发性" target="网络连接">
  <data key="d2">extends</data>
  <data key="d3">分布式系统将并发性的思想扩展到了多台由网络连接的计算机</data>
</edge>
<edge source="concurrency" target="系统">
  <data key="d2">is_a</data>
  <data key="d3">并发性（concurrency）是系统的一种性质，这类系统可以同时执行多个可能互相交互的计算</data>
</edge>
<edge source="concurrency" target="性质">
  <data key="d2">is_a</data>
  <data key="d3">并发性（concurrency）是系统的一种性质，这类系统可以同时执行多个可能互相交互的计算</data>
</edge>
<edge source="Petri网" target="通用">
  <data key="d2">used_for</data>
  <data key="d3">一些数学模型，如Petri网进程演算和PRAM模型，被建立以用于通用并发计算</data>
</edge>
<edge source="加密" target="复杂性">
  <data key="d2">based_on</data>
  <data key="d3">现代密码学主要跟计算机科学相关，很多加密和解密算法都是基于它们的计算复杂性</data>
</edge>
<edge source="电机工程学" target="科学">
  <data key="d2">is_a</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="电机工程学" target="物理">
  <data key="d2">is_a</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="电机工程学" target="智能">
  <data key="d2">used_for</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="37" target="研究">
  <data key="d2">implements</data>
  <data key="d3">37 软件工程是对于设计实现和修改软件的研究，以确保软件的高质量适中的价格可维护性，以及能够快速构建</data>
</edge>
<edge source="37" target="设计">
  <data key="d2">is_a</data>
  <data key="d3">37 软件工程是对于设计实现和修改软件的研究，以确保软件的高质量适中的价格可维护性，以及能够快速构建</data>
</edge>
<edge source="37" target="高质量">
  <data key="d2">implements</data>
  <data key="d3">37 软件工程是对于设计实现和修改软件的研究，以确保软件的高质量适中的价格可维护性，以及能够快速构建</data>
</edge>
<edge source="2010年10月" target="档案馆">
  <data key="d2">composed_of</data>
  <data key="d3">2010年10月由ACM（页面存档备份，存于互联网档案馆）和计算机科学教师协会（CSTA）（页面存档备份，存于互联网档案馆）共同发表了一篇名为Running on Empty: The Failure to Teach K12 Computer Science in the Digital Age的报告，文中揭示了仅有14个州通过了有意义的高中计算机科学教育标准</data>
</edge>
<edge source="2010年10月" target="档案">
  <data key="d2">composed_of</data>
  <data key="d3">2010年10月由ACM（页面存档备份，存于互联网档案馆）和计算机科学教师协会（CSTA）（页面存档备份，存于互联网档案馆）共同发表了一篇名为Running on Empty: The Failure to Teach K12 Computer Science in the Digital Age的报告，文中揭示了仅有14个州通过了有意义的高中计算机科学教育标准</data>
</edge>
<edge source="2010年10月" target="页面">
  <data key="d2">composed_of</data>
  <data key="d3">2010年10月由ACM（页面存档备份，存于互联网档案馆）和计算机科学教师协会（CSTA）（页面存档备份，存于互联网档案馆）共同发表了一篇名为Running on Empty: The Failure to Teach K12 Computer Science in the Digital Age的报告，文中揭示了仅有14个州通过了有意义的高中计算机科学教育标准</data>
</edge>
<edge source="2010年10月" target="备份">
  <data key="d2">composed_of</data>
  <data key="d3">2010年10月由ACM（页面存档备份，存于互联网档案馆）和计算机科学教师协会（CSTA）（页面存档备份，存于互联网档案馆）共同发表了一篇名为Running on Empty: The Failure to Teach K12 Computer Science in the Digital Age的报告，文中揭示了仅有14个州通过了有意义的高中计算机科学教育标准</data>
</edge>
<edge source="2010年10月" target="互联网">
  <data key="d2">composed_of</data>
  <data key="d3">2010年10月由ACM（页面存档备份，存于互联网档案馆）和计算机科学教师协会（CSTA）（页面存档备份，存于互联网档案馆）共同发表了一篇名为Running on Empty: The Failure to Teach K12 Computer Science in the Digital Age的报告，文中揭示了仅有14个州通过了有意义的高中计算机科学教育标准</data>
</edge>
<edge source="2010年10月" target="ACM">
  <data key="d2">composed_of</data>
  <data key="d3">2010年10月由ACM（页面存档备份，存于互联网档案馆）和计算机科学教师协会（CSTA）（页面存档备份，存于互联网档案馆）共同发表了一篇名为Running on Empty: The Failure to Teach K12 Computer Science in the Digital Age的报告，文中揭示了仅有14个州通过了有意义的高中计算机科学教育标准</data>
</edge>
<edge source="2010年10月" target="页面存档备份，存于互联网档案馆">
  <data key="d2">composed_of</data>
  <data key="d3">2010年10月由ACM（页面存档备份，存于互联网档案馆）和计算机科学教师协会（CSTA）（页面存档备份，存于互联网档案馆）共同发表了一篇名为Running on Empty: The Failure to Teach K12 Computer Science in the Digital Age的报告，文中揭示了仅有14个州通过了有意义的高中计算机科学教育标准</data>
</edge>
<edge source="档案馆" target="教师">
  <data key="d2">supports</data>
  <data key="d3">配合Running on Empty这篇文章，一个新的无党派宣传联盟：Computing in the Core（CinC）被建立，以影响联邦和政府政策，比如Computer Science Education Act（页面存档备份，存于互联网档案馆）要求政府拨款以制定计划完善计算机科学教育及支持计算机科学教师</data>
</edge>
<edge source="Computing" target="for Computing Machinery">
  <data key="d2">composed_of</data>
  <data key="d3">3233 CSAB（以前被叫做Computing Sciences Accreditation Board），由Association for Computing Machinery（ACM）和IEEE计算机协会（英语：IEEE Computer Society）（IEEECS）的代表组成34，确立了计算机科学学科的4个主要领域：计算理论，算法与数据结构，编程方法与编程语言，以及计算机组成与架构</data>
</edge>
<edge source="Computing" target="影响">
  <data key="d2">affects</data>
  <data key="d3">配合Running on Empty这篇文章，一个新的无党派宣传联盟：Computing in the Core（CinC）被建立，以影响联邦和政府政策，比如Computer Science Education Act（页面存档备份，存于互联网档案馆）要求政府拨款以制定计划完善计算机科学教育及支持计算机科学教师</data>
</edge>
<edge source="Computing" target="联邦">
  <data key="d2">affects</data>
  <data key="d3">配合Running on Empty这篇文章，一个新的无党派宣传联盟：Computing in the Core（CinC）被建立，以影响联邦和政府政策，比如Computer Science Education Act（页面存档备份，存于互联网档案馆）要求政府拨款以制定计划完善计算机科学教育及支持计算机科学教师</data>
</edge>
<edge source="Computing" target="政府">
  <data key="d2">affects</data>
  <data key="d3">配合Running on Empty这篇文章，一个新的无党派宣传联盟：Computing in the Core（CinC）被建立，以影响联邦和政府政策，比如Computer Science Education Act（页面存档备份，存于互联网档案馆）要求政府拨款以制定计划完善计算机科学教育及支持计算机科学教师</data>
</edge>
<edge source="Computing" target="政策">
  <data key="d2">affects</data>
  <data key="d3">配合Running on Empty这篇文章，一个新的无党派宣传联盟：Computing in the Core（CinC）被建立，以影响联邦和政府政策，比如Computer Science Education Act（页面存档备份，存于互联网档案馆）要求政府拨款以制定计划完善计算机科学教育及支持计算机科学教师</data>
</edge>
<edge source="Computing" target="教师">
  <data key="d2">supports</data>
  <data key="d3">配合Running on Empty这篇文章，一个新的无党派宣传联盟：Computing in the Core（CinC）被建立，以影响联邦和政府政策，比如Computer Science Education Act（页面存档备份，存于互联网档案馆）要求政府拨款以制定计划完善计算机科学教育及支持计算机科学教师</data>
</edge>
<edge source="CinC" target="影响">
  <data key="d2">affects</data>
  <data key="d3">配合Running on Empty这篇文章，一个新的无党派宣传联盟：Computing in the Core（CinC）被建立，以影响联邦和政府政策，比如Computer Science Education Act（页面存档备份，存于互联网档案馆）要求政府拨款以制定计划完善计算机科学教育及支持计算机科学教师</data>
</edge>
<edge source="CinC" target="联邦">
  <data key="d2">affects</data>
  <data key="d3">配合Running on Empty这篇文章，一个新的无党派宣传联盟：Computing in the Core（CinC）被建立，以影响联邦和政府政策，比如Computer Science Education Act（页面存档备份，存于互联网档案馆）要求政府拨款以制定计划完善计算机科学教育及支持计算机科学教师</data>
</edge>
<edge source="CinC" target="政府">
  <data key="d2">affects</data>
  <data key="d3">配合Running on Empty这篇文章，一个新的无党派宣传联盟：Computing in the Core（CinC）被建立，以影响联邦和政府政策，比如Computer Science Education Act（页面存档备份，存于互联网档案馆）要求政府拨款以制定计划完善计算机科学教育及支持计算机科学教师</data>
</edge>
<edge source="CinC" target="政策">
  <data key="d2">affects</data>
  <data key="d3">配合Running on Empty这篇文章，一个新的无党派宣传联盟：Computing in the Core（CinC）被建立，以影响联邦和政府政策，比如Computer Science Education Act（页面存档备份，存于互联网档案馆）要求政府拨款以制定计划完善计算机科学教育及支持计算机科学教师</data>
</edge>
<edge source="CinC" target="教师">
  <data key="d2">supports</data>
  <data key="d3">配合Running on Empty这篇文章，一个新的无党派宣传联盟：Computing in the Core（CinC）被建立，以影响联邦和政府政策，比如Computer Science Education Act（页面存档备份，存于互联网档案馆）要求政府拨款以制定计划完善计算机科学教育及支持计算机科学教师</data>
</edge>
<edge source="计算机科学" target="系统性">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="计算机科学" target="研究">
  <data key="d2">extends</data>
  <data key="d3">17计算机的概念变得更加清晰，它不仅仅用于数学运算，总的来说计算机科学的领域也扩展到了对于计算的研究</data>
</edge>
<edge source="计算机科学" target="信息">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="计算机科学" target="理论">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="计算机科学" target="基础">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="计算机科学" target="计算机系统">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="计算机科学" target="系统">
  <data key="d2">implements</data>
  <data key="d3">Eden提议了三种范式应用于计算机科学的各个领域：31 作为一个学科，计算机科学涵盖了从算法的理论研究和计算的极限，到如何通过硬件和软件实现计算系统</data>
</edge>
<edge source="计算机科学" target="问题">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="计算机科学" target="性质">
  <data key="d2">implements</data>
  <data key="d3">其实计算机科学所关注的，不仅仅是去理解实现类似游戏浏览器这些软件的程序的性质，更要通过现有的知识创造新的程序或者改进已有的程序</data>
</edge>
<edge source="计算机科学" target="复杂性">
  <data key="d2">based_on</data>
  <data key="d3">现代密码学主要跟计算机科学相关，很多加密和解密算法都是基于它们的计算复杂性</data>
</edge>
<edge source="计算机科学" target="事业">
  <data key="d2">is_a</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="计算机科学" target="信息技术">
  <data key="d2">is_a</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="计算机科学" target="技术">
  <data key="d2">implements</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="计算机科学" target="比如信息技术">
  <data key="d2">is_a</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="计算机科学" target="游戏">
  <data key="d2">uses</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="计算机科学" target="浏览器">
  <data key="d2">implements</data>
  <data key="d3">其实计算机科学所关注的，不仅仅是去理解实现类似游戏浏览器这些软件的程序的性质，更要通过现有的知识创造新的程序或者改进已有的程序</data>
</edge>
<edge source="计算机科学" target="软件">
  <data key="d2">implements</data>
  <data key="d3">其实计算机科学所关注的，不仅仅是去理解实现类似游戏浏览器这些软件的程序的性质，更要通过现有的知识创造新的程序或者改进已有的程序</data>
</edge>
<edge source="计算机科学" target="程序">
  <data key="d2">implements</data>
  <data key="d3">其实计算机科学所关注的，不仅仅是去理解实现类似游戏浏览器这些软件的程序的性质，更要通过现有的知识创造新的程序或者改进已有的程序</data>
</edge>
<edge source="计算机科学" target="天文学">
  <data key="d2">is_a</data>
  <data key="d3">著名计算机科学家艾兹赫尔戴克斯特拉曾经指出：计算机科学并不只是关于计算机，就像天文学并不只是关于望远镜一样</data>
</edge>
<edge source="计算机科学" target="望远镜">
  <data key="d2">is_a</data>
  <data key="d3">著名计算机科学家艾兹赫尔戴克斯特拉曾经指出：计算机科学并不只是关于计算机，就像天文学并不只是关于望远镜一样</data>
</edge>
<edge source="计算机科学" target="事情">
  <data key="d2">is_a</data>
  <data key="d3">2020世纪50年代后期，计算机科学学科還在发展階段，这種問題在当时是一件很常見的事情</data>
</edge>
<edge source="计算机科学" target="資訊革命">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="计算机科学" target="时代">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="计算机科学" target="革命">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="计算机科学" target="信息时代">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="计算机科学" target="奠基">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="计算机科学" target="資訊">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="计算机科学" target="驱动力">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="计算机科学" target="科学技术">
  <data key="d2">is_a</data>
  <data key="d3">35算法是计算机科学研究的一个重要领域，也是许多其他计算机科学技术的基础</data>
</edge>
<edge source="计算机科学" target="自动">
  <data key="d2">is_a</data>
  <data key="d3">Denning的说法，计算机科学的最根本问题是什么能够被有效地自动化</data>
</edge>
<edge source="计算机科学" target="领域">
  <data key="d2">contains</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="计算机科学" target="期刊">
  <data key="d2">is_a</data>
  <data key="d3">它是公认的计算机科学分支，同时也是活跃的研究领域，研究成果被发表在众多学术期刊，计算机科学以及工程出版物</data>
</edge>
<edge source="计算机科学" target="研究成果">
  <data key="d2">is_a</data>
  <data key="d3">它是公认的计算机科学分支，同时也是活跃的研究领域，研究成果被发表在众多学术期刊，计算机科学以及工程出版物</data>
</edge>
<edge source="计算机科学" target="学术">
  <data key="d2">is_a</data>
  <data key="d3">它是公认的计算机科学分支，同时也是活跃的研究领域，研究成果被发表在众多学术期刊，计算机科学以及工程出版物</data>
</edge>
<edge source="计算机科学" target="活跃">
  <data key="d2">is_a</data>
  <data key="d3">它是公认的计算机科学分支，同时也是活跃的研究领域，研究成果被发表在众多学术期刊，计算机科学以及工程出版物</data>
</edge>
<edge source="计算机科学" target="学术期刊">
  <data key="d2">is_a</data>
  <data key="d3">它是公认的计算机科学分支，同时也是活跃的研究领域，研究成果被发表在众多学术期刊，计算机科学以及工程出版物</data>
</edge>
<edge source="计算机科学" target="逻辑">
  <data key="d2">includes</data>
  <data key="d3">广义的理论计算机科学包括经典的计算理论和其它專注于更抽象逻辑与数学方面的计算</data>
</edge>
<edge source="计算机科学" target="动机">
  <data key="d2">is_a</data>
  <data key="d3">对于形式化方法的最佳形容是各种理论计算机科学基础种类的应用，特别是计算机逻辑演算，形式语言，自动机理论和形式语义学，此外还有类型系统代数数据类型，以及软件和硬件规范和验证中的一些问题</data>
</edge>
<edge source="计算机科学" target="自动机">
  <data key="d2">is_a</data>
  <data key="d3">对于形式化方法的最佳形容是各种理论计算机科学基础种类的应用，特别是计算机逻辑演算，形式语言，自动机理论和形式语义学，此外还有类型系统代数数据类型，以及软件和硬件规范和验证中的一些问题</data>
</edge>
<edge source="计算机科学" target="争议">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学和软件工程的关系是一个有争议的话题，随后关于什么是软件工程，计算机科学又该如何定义的争论使得情况更加混乱</data>
</edge>
<edge source="计算机科学" target="话题">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学和软件工程的关系是一个有争议的话题，随后关于什么是软件工程，计算机科学又该如何定义的争论使得情况更加混乱</data>
</edge>
<edge source="计算机科学" target="算法">
  <data key="d2">is_a</data>
  <data key="d3">的计算机科学课程则主要侧重于训练高级编程，而不是算法和计算理论</data>
</edge>
<edge source="计算机科学" target="计算理论">
  <data key="d2">includes</data>
  <data key="d3">广义的理论计算机科学包括经典的计算理论和其它專注于更抽象逻辑与数学方面的计算</data>
</edge>
<edge source="计算机科学" target="12">
  <data key="d2">is_a</data>
  <data key="d3">然而，尽管计算机科学专业日益推动着美国经济，但是计算机科学教育依然不存在大多数美国K12课程中</data>
</edge>
<edge source="计算机科学" target="课程">
  <data key="d2">is_a</data>
  <data key="d3">然而，尽管计算机科学专业日益推动着美国经济，但是计算机科学教育依然不存在大多数美国K12课程中</data>
</edge>
<edge source="计算机科学" target="教育">
  <data key="d2">is_a</data>
  <data key="d3">然而，尽管计算机科学专业日益推动着美国经济，但是计算机科学教育依然不存在大多数美国K12课程中</data>
</edge>
<edge source="计算机科学" target="专业">
  <data key="d2">is_a</data>
  <data key="d3">在中国，计算机科学或计算机科学与技术是工科（一级门类）下的二级专业</data>
</edge>
<edge source="计算机科学" target="工科">
  <data key="d2">is_a</data>
  <data key="d3">在中国，计算机科学或计算机科学与技术是工科（一级门类）下的二级专业</data>
</edge>
<edge source="计算机科学" target="门类">
  <data key="d2">is_a</data>
  <data key="d3">在中国，计算机科学或计算机科学与技术是工科（一级门类）下的二级专业</data>
</edge>
<edge source="计算机科学" target="一级门类">
  <data key="d2">is_a</data>
  <data key="d3">在中国，计算机科学或计算机科学与技术是工科（一级门类）下的二级专业</data>
</edge>
<edge source="计算机科学" target="專注于">
  <data key="d2">includes</data>
  <data key="d3">广义的理论计算机科学包括经典的计算理论和其它專注于更抽象逻辑与数学方面的计算</data>
</edge>
<edge source="计算机科学" target="数学">
  <data key="d2">affects</data>
  <data key="d3">它属于计算机科学学科，既受影响于也影响着数学软件工程和语言学</data>
</edge>
<edge source="计算机科学" target="经典">
  <data key="d2">includes</data>
  <data key="d3">广义的理论计算机科学包括经典的计算理论和其它專注于更抽象逻辑与数学方面的计算</data>
</edge>
<edge source="计算机科学" target="视觉">
  <data key="d2">includes</data>
  <data key="d3">它跟计算机科学的许多其它领域密切相关，包括计算机视觉图像处理计算几何与可视化，同时也被大量运用在特效和电子游戏</data>
</edge>
<edge source="计算机科学" target="图像">
  <data key="d2">includes</data>
  <data key="d3">它跟计算机科学的许多其它领域密切相关，包括计算机视觉图像处理计算几何与可视化，同时也被大量运用在特效和电子游戏</data>
</edge>
<edge source="计算机科学" target="图像处理">
  <data key="d2">includes</data>
  <data key="d3">它跟计算机科学的许多其它领域密切相关，包括计算机视觉图像处理计算几何与可视化，同时也被大量运用在特效和电子游戏</data>
</edge>
<edge source="计算机科学" target="可视化">
  <data key="d2">includes</data>
  <data key="d3">它跟计算机科学的许多其它领域密切相关，包括计算机视觉图像处理计算几何与可视化，同时也被大量运用在特效和电子游戏</data>
</edge>
<edge source="计算机科学" target="分支">
  <data key="d2">contains</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="计算机科学" target="结果">
  <data key="d2">contains</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="计算机科学" target="数量">
  <data key="d2">contains</data>
  <data key="d3">9 尽管计算机科学（computer science）的名字里包含计算机这几个字，但实际上计算机科学相当数量的领域都不涉及计算机本身的研究</data>
</edge>
<edge source="计算机科学" target="实际">
  <data key="d2">contains</data>
  <data key="d3">9 尽管计算机科学（computer science）的名字里包含计算机这几个字，但实际上计算机科学相当数量的领域都不涉及计算机本身的研究</data>
</edge>
<edge source="计算机科学" target="普渡大学">
  <data key="d2">composed_of</data>
  <data key="d3">18 世界上第一个计算机科学学位点由普渡大学在1962年设立</data>
</edge>
<edge source="计算机科学" target="1962年">
  <data key="d2">composed_of</data>
  <data key="d3">18 世界上第一个计算机科学学位点由普渡大学在1962年设立</data>
</edge>
<edge source="计算机科学" target="19">
  <data key="d2">composed_of</data>
  <data key="d3">18 世界上第一个计算机科学学位点由普渡大学在1962年设立</data>
</edge>
<edge source="计算机科学" target="大学">
  <data key="d2">composed_of</data>
  <data key="d3">18 世界上第一个计算机科学学位点由普渡大学在1962年设立</data>
</edge>
<edge source="计算机科学" target="英语">
  <data key="d2">affects</data>
  <data key="d3">12 早期计算机科学受数学研究成果的影响很大，如库尔特哥德尔艾伦图灵路莎彼得（英语：Rózsa Péter），阿隆佐邱奇等数学家的研究，这两个领域在某些学科，例如数理逻辑范畴论域理论和代数，也不断有有益的思想交流</data>
</edge>
<edge source="计算机科学" target="艾伦">
  <data key="d2">affects</data>
  <data key="d3">12 早期计算机科学受数学研究成果的影响很大，如库尔特哥德尔艾伦图灵路莎彼得（英语：Rózsa Péter），阿隆佐邱奇等数学家的研究，这两个领域在某些学科，例如数理逻辑范畴论域理论和代数，也不断有有益的思想交流</data>
</edge>
<edge source="计算机科学" target="影响">
  <data key="d2">affects</data>
  <data key="d3">12 早期计算机科学受数学研究成果的影响很大，如库尔特哥德尔艾伦图灵路莎彼得（英语：Rózsa Péter），阿隆佐邱奇等数学家的研究，这两个领域在某些学科，例如数理逻辑范畴论域理论和代数，也不断有有益的思想交流</data>
</edge>
<edge source="计算机科学" target="哥德尔">
  <data key="d2">affects</data>
  <data key="d3">12 早期计算机科学受数学研究成果的影响很大，如库尔特哥德尔艾伦图灵路莎彼得（英语：Rózsa Péter），阿隆佐邱奇等数学家的研究，这两个领域在某些学科，例如数理逻辑范畴论域理论和代数，也不断有有益的思想交流</data>
</edge>
<edge source="计算机科学" target="图灵">
  <data key="d2">affects</data>
  <data key="d3">12 早期计算机科学受数学研究成果的影响很大，如库尔特哥德尔艾伦图灵路莎彼得（英语：Rózsa Péter），阿隆佐邱奇等数学家的研究，这两个领域在某些学科，例如数理逻辑范畴论域理论和代数，也不断有有益的思想交流</data>
</edge>
<edge source="计算机科学" target="英语：Rózsa Péter">
  <data key="d2">affects</data>
  <data key="d3">12 早期计算机科学受数学研究成果的影响很大，如库尔特哥德尔艾伦图灵路莎彼得（英语：Rózsa Péter），阿隆佐邱奇等数学家的研究，这两个领域在某些学科，例如数理逻辑范畴论域理论和代数，也不断有有益的思想交流</data>
</edge>
<edge source="计算机科学" target="工程">
  <data key="d2">affects</data>
  <data key="d3">它属于计算机科学学科，既受影响于也影响着数学软件工程和语言学</data>
</edge>
<edge source="计算机科学" target="语言学">
  <data key="d2">affects</data>
  <data key="d3">它属于计算机科学学科，既受影响于也影响着数学软件工程和语言学</data>
</edge>
<edge source="计算机科学" target="教师">
  <data key="d2">supports</data>
  <data key="d3">配合Running on Empty这篇文章，一个新的无党派宣传联盟：Computing in the Core（CinC）被建立，以影响联邦和政府政策，比如Computer Science Education Act（页面存档备份，存于互联网档案馆）要求政府拨款以制定计划完善计算机科学教育及支持计算机科学教师</data>
</edge>
<edge source="计算机科学" target="实用技术">
  <data key="d2">implements</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="计算机科学" target="学科">
  <data key="d2">implements</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="计算机科学" target="程式">
  <data key="d2">implements</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="计算机科学" target="語言">
  <data key="d2">implements</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="计算机科学" target="理論">
  <data key="d2">implements</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="计算机科学" target="方法">
  <data key="d2">implements</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="计算机科学" target="分析">
  <data key="d2">implements</data>
  <data key="d3">编程语言理论是计算机科学的一个分支，主要处理编程语言的设计实现分析描述和分类，以及它们的个体特性</data>
</edge>
<edge source="计算机科学" target="分类">
  <data key="d2">implements</data>
  <data key="d3">编程语言理论是计算机科学的一个分支，主要处理编程语言的设计实现分析描述和分类，以及它们的个体特性</data>
</edge>
<edge source="计算机科学" target="个体">
  <data key="d2">implements</data>
  <data key="d3">编程语言理论是计算机科学的一个分支，主要处理编程语言的设计实现分析描述和分类，以及它们的个体特性</data>
</edge>
<edge source="计算机科学" target="特性">
  <data key="d2">implements</data>
  <data key="d3">编程语言理论是计算机科学的一个分支，主要处理编程语言的设计实现分析描述和分类，以及它们的个体特性</data>
</edge>
<edge source="计算机科学" target="经验">
  <data key="d2">uses</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="计算机科学" target="有关">
  <data key="d2">uses</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="计算机科学" target="玩游戏">
  <data key="d2">uses</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="计算机科学" target="文字">
  <data key="d2">uses</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="计算机系统" target="计算机科学">
  <data key="d2">is_a</data>
  <data key="d3">"）设计部署计算机和计算机系统通常被认为是非计算机科学学科的领域</data>
</edge>
<edge source="计算机系统" target="学科">
  <data key="d2">implements</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="计算机系统" target="领域">
  <data key="d2">is_a</data>
  <data key="d3">"）设计部署计算机和计算机系统通常被认为是非计算机科学学科的领域</data>
</edge>
<edge source="计算机系统" target="科学">
  <data key="d2">is_a</data>
  <data key="d3">"）设计部署计算机和计算机系统通常被认为是非计算机科学学科的领域</data>
</edge>
<edge source="计算机系统" target="设计">
  <data key="d2">is_a</data>
  <data key="d3">计算机系统结构，或者数字计算机组织，是一个计算机系统的概念设计和根本运作结构</data>
</edge>
<edge source="计算机系统" target="概念">
  <data key="d2">is_a</data>
  <data key="d3">计算机系统结构，或者数字计算机组织，是一个计算机系统的概念设计和根本运作结构</data>
</edge>
<edge source="计算机系统" target="概念设计">
  <data key="d2">is_a</data>
  <data key="d3">计算机系统结构，或者数字计算机组织，是一个计算机系统的概念设计和根本运作结构</data>
</edge>
<edge source="计算机系统" target="运作">
  <data key="d2">is_a</data>
  <data key="d3">计算机系统结构，或者数字计算机组织，是一个计算机系统的概念设计和根本运作结构</data>
</edge>
<edge source="计算机系统" target="实用技术">
  <data key="d2">implements</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="计算机系统" target="技术">
  <data key="d2">implements</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="形容" target="计算机科学">
  <data key="d2">is_a</data>
  <data key="d3">对于形式化方法的最佳形容是各种理论计算机科学基础种类的应用，特别是计算机逻辑演算，形式语言，自动机理论和形式语义学，此外还有类型系统代数数据类型，以及软件和硬件规范和验证中的一些问题</data>
</edge>
<edge source="形容" target="理论">
  <data key="d2">is_a</data>
  <data key="d3">对于形式化方法的最佳形容是各种理论计算机科学基础种类的应用，特别是计算机逻辑演算，形式语言，自动机理论和形式语义学，此外还有类型系统代数数据类型，以及软件和硬件规范和验证中的一些问题</data>
</edge>
<edge source="形容" target="基础">
  <data key="d2">is_a</data>
  <data key="d3">对于形式化方法的最佳形容是各种理论计算机科学基础种类的应用，特别是计算机逻辑演算，形式语言，自动机理论和形式语义学，此外还有类型系统代数数据类型，以及软件和硬件规范和验证中的一些问题</data>
</edge>
<edge source="形容" target="计算机">
  <data key="d2">is_a</data>
  <data key="d3">对于形式化方法的最佳形容是各种理论计算机科学基础种类的应用，特别是计算机逻辑演算，形式语言，自动机理论和形式语义学，此外还有类型系统代数数据类型，以及软件和硬件规范和验证中的一些问题</data>
</edge>
<edge source="形容" target="科学">
  <data key="d2">is_a</data>
  <data key="d3">对于形式化方法的最佳形容是各种理论计算机科学基础种类的应用，特别是计算机逻辑演算，形式语言，自动机理论和形式语义学，此外还有类型系统代数数据类型，以及软件和硬件规范和验证中的一些问题</data>
</edge>
<edge source="形容" target="种类">
  <data key="d2">is_a</data>
  <data key="d3">对于形式化方法的最佳形容是各种理论计算机科学基础种类的应用，特别是计算机逻辑演算，形式语言，自动机理论和形式语义学，此外还有类型系统代数数据类型，以及软件和硬件规范和验证中的一些问题</data>
</edge>
<edge source="图形学" target="理论">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="图形学" target="问题">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="图形学" target="性质">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="图形学" target="复杂性">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="图形学" target="研究">
  <data key="d2">implements</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="图形学" target="数据">
  <data key="d2">is_a</data>
  <data key="d3">计算机图形学是对于数字视觉内容的研究，涉及图像数据的合成和操作</data>
</edge>
<edge source="图形学" target="数字">
  <data key="d2">is_a</data>
  <data key="d3">计算机图形学是对于数字视觉内容的研究，涉及图像数据的合成和操作</data>
</edge>
<edge source="图形学" target="视觉">
  <data key="d2">is_a</data>
  <data key="d3">计算机图形学是对于数字视觉内容的研究，涉及图像数据的合成和操作</data>
</edge>
<edge source="图形学" target="内容">
  <data key="d2">is_a</data>
  <data key="d3">计算机图形学是对于数字视觉内容的研究，涉及图像数据的合成和操作</data>
</edge>
<edge source="图形学" target="图像">
  <data key="d2">is_a</data>
  <data key="d3">计算机图形学是对于数字视觉内容的研究，涉及图像数据的合成和操作</data>
</edge>
<edge source="图形学" target="程式">
  <data key="d2">implements</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="图形学" target="語言">
  <data key="d2">implements</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="图形学" target="理論">
  <data key="d2">implements</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="图形学" target="方法">
  <data key="d2">implements</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="复杂性" target="研究">
  <data key="d2">implements</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="复杂性" target="方法">
  <data key="d2">implements</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="复杂性" target="程式设计">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="复杂性" target="设计">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="复杂性" target="第二">
  <data key="d2">used_for</data>
  <data key="d3">而计算复杂性理论则被用于回答第二个问题，研究解决一个不同目的的计算问题的时间与空间消耗</data>
</edge>
<edge source="复杂性" target="问题">
  <data key="d2">used_for</data>
  <data key="d3">而计算复杂性理论则被用于回答第二个问题，研究解决一个不同目的的计算问题的时间与空间消耗</data>
</edge>
<edge source="复杂性" target="目的">
  <data key="d2">used_for</data>
  <data key="d3">而计算复杂性理论则被用于回答第二个问题，研究解决一个不同目的的计算问题的时间与空间消耗</data>
</edge>
<edge source="复杂性" target="程式">
  <data key="d2">implements</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="复杂性" target="語言">
  <data key="d2">implements</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="复杂性" target="理論">
  <data key="d2">implements</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="語言" target="研究">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="語言" target="方法">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="語言" target="程式设计">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="語言" target="设计">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="理論" target="研究">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="理論" target="方法">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="理論" target="程式设计">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="理論" target="设计">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学包含很多分支领域；有些强调特定结果的计算，比如计算机图形学；而有些是探討计算问题的性质，比如计算复杂性理论；还有一些领域專注于怎样实现计算，比如程式語言理論是研究描述计算的方法，而程式设计是应用特定的程式語言解决特定的计算问题，人机交互则是專注于怎样使计算机和计算变得有用好用，以及随时随地为人所用</data>
</edge>
<edge source="事业" target="经验">
  <data key="d2">uses</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="事业" target="有关">
  <data key="d2">uses</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="事业" target="玩游戏">
  <data key="d2">uses</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="事业" target="游戏">
  <data key="d2">uses</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="事业" target="文字">
  <data key="d2">uses</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="信息技术" target="经验">
  <data key="d2">uses</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="信息技术" target="有关">
  <data key="d2">uses</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="信息技术" target="玩游戏">
  <data key="d2">uses</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="信息技术" target="游戏">
  <data key="d2">uses</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="信息技术" target="文字">
  <data key="d2">uses</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="软件" target="数学">
  <data key="d2">uses</data>
  <data key="d3">在软件和硬件设计方面，形式化方法的使用动机，如同其它工程学科，是通过适当的数学分析便有助于设计的可靠性和健壮性的期望</data>
</edge>
<edge source="软件" target="分析">
  <data key="d2">uses</data>
  <data key="d3">在软件和硬件设计方面，形式化方法的使用动机，如同其它工程学科，是通过适当的数学分析便有助于设计的可靠性和健壮性的期望</data>
</edge>
<edge source="软件" target="可靠性">
  <data key="d2">is_a</data>
  <data key="d3">在软件和硬件设计方面，形式化方法的使用动机，如同其它工程学科，是通过适当的数学分析便有助于设计的可靠性和健壮性的期望</data>
</edge>
<edge source="软件" target="健壮性">
  <data key="d2">is_a</data>
  <data key="d3">在软件和硬件设计方面，形式化方法的使用动机，如同其它工程学科，是通过适当的数学分析便有助于设计的可靠性和健壮性的期望</data>
</edge>
<edge source="软件" target="核心">
  <data key="d2">is_a</data>
  <data key="d3">操作系统是管理电脑硬件与软件资源的电脑程式，同时也是电脑系统的核心与基石</data>
</edge>
<edge source="软件" target="基石">
  <data key="d2">is_a</data>
  <data key="d3">操作系统是管理电脑硬件与软件资源的电脑程式，同时也是电脑系统的核心与基石</data>
</edge>
<edge source="软件" target="研究">
  <data key="d2">implements</data>
  <data key="d3">37 软件工程是对于设计实现和修改软件的研究，以确保软件的高质量适中的价格可维护性，以及能够快速构建</data>
</edge>
<edge source="软件" target="设计">
  <data key="d2">is_a</data>
  <data key="d3">37 软件工程是对于设计实现和修改软件的研究，以确保软件的高质量适中的价格可维护性，以及能够快速构建</data>
</edge>
<edge source="软件" target="争议">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学和软件工程的关系是一个有争议的话题，随后关于什么是软件工程，计算机科学又该如何定义的争论使得情况更加混乱</data>
</edge>
<edge source="软件" target="话题">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学和软件工程的关系是一个有争议的话题，随后关于什么是软件工程，计算机科学又该如何定义的争论使得情况更加混乱</data>
</edge>
<edge source="软件" target="目的">
  <data key="d2">is_a</data>
  <data key="d3">David Parnas从其它工程和科学学科之间的关系得到启示，宣称计算机科学的主要重点总的来说是研究计算的性质，而软件工程的主要重点是具体的计算设计，以达到实用的目的，这样便构成了两个独立但又互补的学科</data>
</edge>
<edge source="软件" target="系统">
  <data key="d2">implements</data>
  <data key="d3">Eden提议了三种范式应用于计算机科学的各个领域：31 作为一个学科，计算机科学涵盖了从算法的理论研究和计算的极限，到如何通过硬件和软件实现计算系统</data>
</edge>
<edge source="软件" target="高质量">
  <data key="d2">implements</data>
  <data key="d3">37 软件工程是对于设计实现和修改软件的研究，以确保软件的高质量适中的价格可维护性，以及能够快速构建</data>
</edge>
<edge source="软件" target="学科">
  <data key="d2">uses</data>
  <data key="d3">在软件和硬件设计方面，形式化方法的使用动机，如同其它工程学科，是通过适当的数学分析便有助于设计的可靠性和健壮性的期望</data>
</edge>
<edge source="软件" target="工程">
  <data key="d2">uses</data>
  <data key="d3">在软件和硬件设计方面，形式化方法的使用动机，如同其它工程学科，是通过适当的数学分析便有助于设计的可靠性和健壮性的期望</data>
</edge>
<edge source="软件" target="工程学">
  <data key="d2">uses</data>
  <data key="d3">在软件和硬件设计方面，形式化方法的使用动机，如同其它工程学科，是通过适当的数学分析便有助于设计的可靠性和健壮性的期望</data>
</edge>
<edge source="软件" target="动机">
  <data key="d2">uses</data>
  <data key="d3">在软件和硬件设计方面，形式化方法的使用动机，如同其它工程学科，是通过适当的数学分析便有助于设计的可靠性和健壮性的期望</data>
</edge>
<edge source="程序" target="计算机科学">
  <data key="d2">supports</data>
  <data key="d3">通常也教授程序设计，但仅仅将它看作是支持计算机科学其它领域的媒介，而不是高级研究的重心</data>
</edge>
<edge source="程序" target="研究">
  <data key="d2">supports</data>
  <data key="d3">通常也教授程序设计，但仅仅将它看作是支持计算机科学其它领域的媒介，而不是高级研究的重心</data>
</edge>
<edge source="程序" target="领域">
  <data key="d2">supports</data>
  <data key="d3">通常也教授程序设计，但仅仅将它看作是支持计算机科学其它领域的媒介，而不是高级研究的重心</data>
</edge>
<edge source="程序" target="计算机">
  <data key="d2">supports</data>
  <data key="d3">通常也教授程序设计，但仅仅将它看作是支持计算机科学其它领域的媒介，而不是高级研究的重心</data>
</edge>
<edge source="程序" target="科学">
  <data key="d2">supports</data>
  <data key="d3">通常也教授程序设计，但仅仅将它看作是支持计算机科学其它领域的媒介，而不是高级研究的重心</data>
</edge>
<edge source="程序" target="媒介">
  <data key="d2">supports</data>
  <data key="d3">通常也教授程序设计，但仅仅将它看作是支持计算机科学其它领域的媒介，而不是高级研究的重心</data>
</edge>
<edge source="重点" target="研究">
  <data key="d2">is_a</data>
  <data key="d3">David Parnas从其它工程和科学学科之间的关系得到启示，宣称计算机科学的主要重点总的来说是研究计算的性质，而软件工程的主要重点是具体的计算设计，以达到实用的目的，这样便构成了两个独立但又互补的学科</data>
</edge>
<edge source="重点" target="性质">
  <data key="d2">is_a</data>
  <data key="d3">David Parnas从其它工程和科学学科之间的关系得到启示，宣称计算机科学的主要重点总的来说是研究计算的性质，而软件工程的主要重点是具体的计算设计，以达到实用的目的，这样便构成了两个独立但又互补的学科</data>
</edge>
<edge source="重点" target="软件">
  <data key="d2">is_a</data>
  <data key="d3">David Parnas从其它工程和科学学科之间的关系得到启示，宣称计算机科学的主要重点总的来说是研究计算的性质，而软件工程的主要重点是具体的计算设计，以达到实用的目的，这样便构成了两个独立但又互补的学科</data>
</edge>
<edge source="科学家" target="计算机">
  <data key="d2">is_a</data>
  <data key="d3">丹麦科学家彼得諾爾建议使用术语"datalogy"，以反映这一事实，即科学学科是围绕着数据和数据处理，而不一定要涉及计算机</data>
</edge>
<edge source="科学家" target="数据">
  <data key="d2">is_a</data>
  <data key="d3">丹麦科学家彼得諾爾建议使用术语"datalogy"，以反映这一事实，即科学学科是围绕着数据和数据处理，而不一定要涉及计算机</data>
</edge>
<edge source="科学家" target="数据处理">
  <data key="d2">is_a</data>
  <data key="d3">丹麦科学家彼得諾爾建议使用术语"datalogy"，以反映这一事实，即科学学科是围绕着数据和数据处理，而不一定要涉及计算机</data>
</edge>
<edge source="科学家" target="天文学">
  <data key="d2">is_a</data>
  <data key="d3">著名计算机科学家艾兹赫尔戴克斯特拉曾经指出：计算机科学并不只是关于计算机，就像天文学并不只是关于望远镜一样</data>
</edge>
<edge source="科学家" target="望远镜">
  <data key="d2">is_a</data>
  <data key="d3">著名计算机科学家艾兹赫尔戴克斯特拉曾经指出：计算机科学并不只是关于计算机，就像天文学并不只是关于望远镜一样</data>
</edge>
<edge source="科学家" target="术语">
  <data key="d2">uses</data>
  <data key="d3">丹麦科学家彼得諾爾建议使用术语"datalogy"，以反映这一事实，即科学学科是围绕着数据和数据处理，而不一定要涉及计算机</data>
</edge>
<edge source="科学家" target="事实">
  <data key="d2">uses</data>
  <data key="d3">丹麦科学家彼得諾爾建议使用术语"datalogy"，以反映这一事实，即科学学科是围绕着数据和数据处理，而不一定要涉及计算机</data>
</edge>
<edge source="科学家" target="datalogy">
  <data key="d2">uses</data>
  <data key="d3">丹麦科学家彼得諾爾建议使用术语"datalogy"，以反映这一事实，即科学学科是围绕着数据和数据处理，而不一定要涉及计算机</data>
</edge>
<edge source="建议" target="计算机">
  <data key="d2">is_a</data>
  <data key="d3">丹麦科学家彼得諾爾建议使用术语"datalogy"，以反映这一事实，即科学学科是围绕着数据和数据处理，而不一定要涉及计算机</data>
</edge>
<edge source="建议" target="数据">
  <data key="d2">is_a</data>
  <data key="d3">丹麦科学家彼得諾爾建议使用术语"datalogy"，以反映这一事实，即科学学科是围绕着数据和数据处理，而不一定要涉及计算机</data>
</edge>
<edge source="建议" target="数据处理">
  <data key="d2">is_a</data>
  <data key="d3">丹麦科学家彼得諾爾建议使用术语"datalogy"，以反映这一事实，即科学学科是围绕着数据和数据处理，而不一定要涉及计算机</data>
</edge>
<edge source="建议" target="术语">
  <data key="d2">uses</data>
  <data key="d3">丹麦科学家彼得諾爾建议使用术语"datalogy"，以反映这一事实，即科学学科是围绕着数据和数据处理，而不一定要涉及计算机</data>
</edge>
<edge source="建议" target="事实">
  <data key="d2">uses</data>
  <data key="d3">丹麦科学家彼得諾爾建议使用术语"datalogy"，以反映这一事实，即科学学科是围绕着数据和数据处理，而不一定要涉及计算机</data>
</edge>
<edge source="建议" target="datalogy">
  <data key="d2">uses</data>
  <data key="d3">丹麦科学家彼得諾爾建议使用术语"datalogy"，以反映这一事实，即科学学科是围绕着数据和数据处理，而不一定要涉及计算机</data>
</edge>
<edge source="哥本哈根大学" target="教授">
  <data key="d2">is_a</data>
  <data key="d3">第一个使用这个术语的科学机构是哥本哈根大学计算科学系（英语：UCPH Department of Computer Science），该学院成立于1969年，彼得諾爾便是第一任教授</data>
</edge>
<edge source="科学系" target="教授">
  <data key="d2">is_a</data>
  <data key="d3">第一个使用这个术语的科学机构是哥本哈根大学计算科学系（英语：UCPH Department of Computer Science），该学院成立于1969年，彼得諾爾便是第一任教授</data>
</edge>
<edge source="学院" target="教授">
  <data key="d2">is_a</data>
  <data key="d3">第一个使用这个术语的科学机构是哥本哈根大学计算科学系（英语：UCPH Department of Computer Science），该学院成立于1969年，彼得諾爾便是第一任教授</data>
</edge>
<edge source="教授" target="计算机科学">
  <data key="d2">supports</data>
  <data key="d3">通常也教授程序设计，但仅仅将它看作是支持计算机科学其它领域的媒介，而不是高级研究的重心</data>
</edge>
<edge source="教授" target="研究">
  <data key="d2">supports</data>
  <data key="d3">通常也教授程序设计，但仅仅将它看作是支持计算机科学其它领域的媒介，而不是高级研究的重心</data>
</edge>
<edge source="教授" target="领域">
  <data key="d2">supports</data>
  <data key="d3">通常也教授程序设计，但仅仅将它看作是支持计算机科学其它领域的媒介，而不是高级研究的重心</data>
</edge>
<edge source="教授" target="计算机">
  <data key="d2">supports</data>
  <data key="d3">通常也教授程序设计，但仅仅将它看作是支持计算机科学其它领域的媒介，而不是高级研究的重心</data>
</edge>
<edge source="教授" target="科学">
  <data key="d2">supports</data>
  <data key="d3">通常也教授程序设计，但仅仅将它看作是支持计算机科学其它领域的媒介，而不是高级研究的重心</data>
</edge>
<edge source="教授" target="媒介">
  <data key="d2">supports</data>
  <data key="d3">通常也教授程序设计，但仅仅将它看作是支持计算机科学其它领域的媒介，而不是高级研究的重心</data>
</edge>
<edge source="工程" target="数学">
  <data key="d2">is_a</data>
  <data key="d3">在软件和硬件设计方面，形式化方法的使用动机，如同其它工程学科，是通过适当的数学分析便有助于设计的可靠性和健壮性的期望</data>
</edge>
<edge source="工程" target="分析">
  <data key="d2">is_a</data>
  <data key="d3">在软件和硬件设计方面，形式化方法的使用动机，如同其它工程学科，是通过适当的数学分析便有助于设计的可靠性和健壮性的期望</data>
</edge>
<edge source="工程" target="可靠性">
  <data key="d2">is_a</data>
  <data key="d3">在软件和硬件设计方面，形式化方法的使用动机，如同其它工程学科，是通过适当的数学分析便有助于设计的可靠性和健壮性的期望</data>
</edge>
<edge source="工程" target="健壮性">
  <data key="d2">is_a</data>
  <data key="d3">在软件和硬件设计方面，形式化方法的使用动机，如同其它工程学科，是通过适当的数学分析便有助于设计的可靠性和健壮性的期望</data>
</edge>
<edge source="工程" target="科学">
  <data key="d2">is_a</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="工程" target="物理">
  <data key="d2">is_a</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="工程" target="研究">
  <data key="d2">implements</data>
  <data key="d3">37 软件工程是对于设计实现和修改软件的研究，以确保软件的高质量适中的价格可维护性，以及能够快速构建</data>
</edge>
<edge source="工程" target="设计">
  <data key="d2">is_a</data>
  <data key="d3">37 软件工程是对于设计实现和修改软件的研究，以确保软件的高质量适中的价格可维护性，以及能够快速构建</data>
</edge>
<edge source="工程" target="争议">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学和软件工程的关系是一个有争议的话题，随后关于什么是软件工程，计算机科学又该如何定义的争论使得情况更加混乱</data>
</edge>
<edge source="工程" target="话题">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学和软件工程的关系是一个有争议的话题，随后关于什么是软件工程，计算机科学又该如何定义的争论使得情况更加混乱</data>
</edge>
<edge source="工程" target="性质">
  <data key="d2">is_a</data>
  <data key="d3">David Parnas从其它工程和科学学科之间的关系得到启示，宣称计算机科学的主要重点总的来说是研究计算的性质，而软件工程的主要重点是具体的计算设计，以达到实用的目的，这样便构成了两个独立但又互补的学科</data>
</edge>
<edge source="工程" target="软件">
  <data key="d2">is_a</data>
  <data key="d3">David Parnas从其它工程和科学学科之间的关系得到启示，宣称计算机科学的主要重点总的来说是研究计算的性质，而软件工程的主要重点是具体的计算设计，以达到实用的目的，这样便构成了两个独立但又互补的学科</data>
</edge>
<edge source="工程" target="智能">
  <data key="d2">used_for</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="工程" target="高质量">
  <data key="d2">implements</data>
  <data key="d3">37 软件工程是对于设计实现和修改软件的研究，以确保软件的高质量适中的价格可维护性，以及能够快速构建</data>
</edge>
<edge source="赫尔" target="天文学">
  <data key="d2">is_a</data>
  <data key="d3">著名计算机科学家艾兹赫尔戴克斯特拉曾经指出：计算机科学并不只是关于计算机，就像天文学并不只是关于望远镜一样</data>
</edge>
<edge source="赫尔" target="望远镜">
  <data key="d2">is_a</data>
  <data key="d3">著名计算机科学家艾兹赫尔戴克斯特拉曾经指出：计算机科学并不只是关于计算机，就像天文学并不只是关于望远镜一样</data>
</edge>
<edge source="戴克" target="天文学">
  <data key="d2">is_a</data>
  <data key="d3">著名计算机科学家艾兹赫尔戴克斯特拉曾经指出：计算机科学并不只是关于计算机，就像天文学并不只是关于望远镜一样</data>
</edge>
<edge source="戴克" target="望远镜">
  <data key="d2">is_a</data>
  <data key="d3">著名计算机科学家艾兹赫尔戴克斯特拉曾经指出：计算机科学并不只是关于计算机，就像天文学并不只是关于望远镜一样</data>
</edge>
<edge source="天文学" target="望远镜">
  <data key="d2">is_a</data>
  <data key="d3">著名计算机科学家艾兹赫尔戴克斯特拉曾经指出：计算机科学并不只是关于计算机，就像天文学并不只是关于望远镜一样</data>
</edge>
<edge source="部署" target="计算机科学">
  <data key="d2">is_a</data>
  <data key="d3">"）设计部署计算机和计算机系统通常被认为是非计算机科学学科的领域</data>
</edge>
<edge source="部署" target="学科">
  <data key="d2">is_a</data>
  <data key="d3">"）设计部署计算机和计算机系统通常被认为是非计算机科学学科的领域</data>
</edge>
<edge source="部署" target="领域">
  <data key="d2">is_a</data>
  <data key="d3">"）设计部署计算机和计算机系统通常被认为是非计算机科学学科的领域</data>
</edge>
<edge source="部署" target="科学">
  <data key="d2">is_a</data>
  <data key="d3">"）设计部署计算机和计算机系统通常被认为是非计算机科学学科的领域</data>
</edge>
<edge source="计算机硬件" target="计算机系统">
  <data key="d2">is_a</data>
  <data key="d3">例如，研究计算机硬件被看作是计算机工程的一部分，而对于商业计算机系统的研究和部署被称为信息技术或者信息系统</data>
</edge>
<edge source="计算机硬件" target="系统">
  <data key="d2">is_a</data>
  <data key="d3">例如，研究计算机硬件被看作是计算机工程的一部分，而对于商业计算机系统的研究和部署被称为信息技术或者信息系统</data>
</edge>
<edge source="计算机硬件" target="工程">
  <data key="d2">is_a</data>
  <data key="d3">例如，研究计算机硬件被看作是计算机工程的一部分，而对于商业计算机系统的研究和部署被称为信息技术或者信息系统</data>
</edge>
<edge source="计算机硬件" target="商业">
  <data key="d2">is_a</data>
  <data key="d3">例如，研究计算机硬件被看作是计算机工程的一部分，而对于商业计算机系统的研究和部署被称为信息技术或者信息系统</data>
</edge>
<edge source="计算机硬件" target="部分">
  <data key="d2">is_a</data>
  <data key="d3">例如，研究计算机硬件被看作是计算机工程的一部分，而对于商业计算机系统的研究和部署被称为信息技术或者信息系统</data>
</edge>
<edge source="工程学" target="数学">
  <data key="d2">is_a</data>
  <data key="d3">在软件和硬件设计方面，形式化方法的使用动机，如同其它工程学科，是通过适当的数学分析便有助于设计的可靠性和健壮性的期望</data>
</edge>
<edge source="工程学" target="分析">
  <data key="d2">is_a</data>
  <data key="d3">在软件和硬件设计方面，形式化方法的使用动机，如同其它工程学科，是通过适当的数学分析便有助于设计的可靠性和健壮性的期望</data>
</edge>
<edge source="工程学" target="可靠性">
  <data key="d2">is_a</data>
  <data key="d3">在软件和硬件设计方面，形式化方法的使用动机，如同其它工程学科，是通过适当的数学分析便有助于设计的可靠性和健壮性的期望</data>
</edge>
<edge source="工程学" target="健壮性">
  <data key="d2">is_a</data>
  <data key="d3">在软件和硬件设计方面，形式化方法的使用动机，如同其它工程学科，是通过适当的数学分析便有助于设计的可靠性和健壮性的期望</data>
</edge>
<edge source="工程学" target="科学">
  <data key="d2">is_a</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="工程学" target="物理">
  <data key="d2">is_a</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="工程学" target="智能">
  <data key="d2">used_for</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="任务" target="古老">
  <data key="d2">used_for</data>
  <data key="d3">那些计算固定数值任务的机器，比如算盘，自古希腊时期即已存在，而用于加快计算的算法更是在算盘等古老的计算仪器发明之前就已被广泛使用</data>
</edge>
<edge source="任务" target="仪器">
  <data key="d2">used_for</data>
  <data key="d3">那些计算固定数值任务的机器，比如算盘，自古希腊时期即已存在，而用于加快计算的算法更是在算盘等古老的计算仪器发明之前就已被广泛使用</data>
</edge>
<edge source="任务" target="子集">
  <data key="d2">is_a</data>
  <data key="d3">然而以上这些机器都局限在只能完成单个任务，或者充其量是所有可能任务的子集</data>
</edge>
<edge source="任务" target="算法">
  <data key="d2">used_for</data>
  <data key="d3">那些计算固定数值任务的机器，比如算盘，自古希腊时期即已存在，而用于加快计算的算法更是在算盘等古老的计算仪器发明之前就已被广泛使用</data>
</edge>
<edge source="机器" target="古老">
  <data key="d2">used_for</data>
  <data key="d3">那些计算固定数值任务的机器，比如算盘，自古希腊时期即已存在，而用于加快计算的算法更是在算盘等古老的计算仪器发明之前就已被广泛使用</data>
</edge>
<edge source="机器" target="仪器">
  <data key="d2">used_for</data>
  <data key="d3">那些计算固定数值任务的机器，比如算盘，自古希腊时期即已存在，而用于加快计算的算法更是在算盘等古老的计算仪器发明之前就已被广泛使用</data>
</edge>
<edge source="机器" target="子集">
  <data key="d2">is_a</data>
  <data key="d3">然而以上这些机器都局限在只能完成单个任务，或者充其量是所有可能任务的子集</data>
</edge>
<edge source="机器" target="祖先">
  <data key="d2">used_for</data>
  <data key="d3">到了20世纪40年代，随着更新更强大的计算机器(如ABC计算机电子数值积分计算机)被发明，术语计算机开始用于指代那些机器而不是它们的祖先</data>
</edge>
<edge source="机器" target="算法">
  <data key="d2">used_for</data>
  <data key="d3">那些计算固定数值任务的机器，比如算盘，自古希腊时期即已存在，而用于加快计算的算法更是在算盘等古老的计算仪器发明之前就已被广泛使用</data>
</edge>
<edge source="机器" target="指代">
  <data key="d2">used_for</data>
  <data key="d3">到了20世纪40年代，随着更新更强大的计算机器(如ABC计算机电子数值积分计算机)被发明，术语计算机开始用于指代那些机器而不是它们的祖先</data>
</edge>
<edge source="古希腊" target="古老">
  <data key="d2">used_for</data>
  <data key="d3">那些计算固定数值任务的机器，比如算盘，自古希腊时期即已存在，而用于加快计算的算法更是在算盘等古老的计算仪器发明之前就已被广泛使用</data>
</edge>
<edge source="古希腊" target="仪器">
  <data key="d2">used_for</data>
  <data key="d3">那些计算固定数值任务的机器，比如算盘，自古希腊时期即已存在，而用于加快计算的算法更是在算盘等古老的计算仪器发明之前就已被广泛使用</data>
</edge>
<edge source="古希腊" target="算法">
  <data key="d2">used_for</data>
  <data key="d3">那些计算固定数值任务的机器，比如算盘，自古希腊时期即已存在，而用于加快计算的算法更是在算盘等古老的计算仪器发明之前就已被广泛使用</data>
</edge>
<edge source="时期" target="古老">
  <data key="d2">used_for</data>
  <data key="d3">那些计算固定数值任务的机器，比如算盘，自古希腊时期即已存在，而用于加快计算的算法更是在算盘等古老的计算仪器发明之前就已被广泛使用</data>
</edge>
<edge source="时期" target="仪器">
  <data key="d2">used_for</data>
  <data key="d3">那些计算固定数值任务的机器，比如算盘，自古希腊时期即已存在，而用于加快计算的算法更是在算盘等古老的计算仪器发明之前就已被广泛使用</data>
</edge>
<edge source="时期" target="算法">
  <data key="d2">used_for</data>
  <data key="d3">那些计算固定数值任务的机器，比如算盘，自古希腊时期即已存在，而用于加快计算的算法更是在算盘等古老的计算仪器发明之前就已被广泛使用</data>
</edge>
<edge source="计算器" target="第一">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="计算器" target="计算机科学">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="计算器" target="信息">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="计算器" target="理论">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="计算器" target="计算机">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="计算器" target="科学">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="计算器" target="科学家">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="计算器" target="理论家">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="记录" target="第一">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="记录" target="计算机科学">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="记录" target="信息">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="记录" target="理论">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="记录" target="计算机">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="记录" target="科学">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="记录" target="科学家">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="记录" target="理论家">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="时代" target="資訊革命">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="时代" target="公元17501850年">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="时代" target="革命">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="时代" target="資訊">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="时代" target="驱动力">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="时代" target="工业革命">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="时代" target="工业">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="局限" target="子集">
  <data key="d2">is_a</data>
  <data key="d3">然而以上这些机器都局限在只能完成单个任务，或者充其量是所有可能任务的子集</data>
</edge>
<edge source="充其量" target="子集">
  <data key="d2">is_a</data>
  <data key="d3">然而以上这些机器都局限在只能完成单个任务，或者充其量是所有可能任务的子集</data>
</edge>
<edge source="电子" target="祖先">
  <data key="d2">used_for</data>
  <data key="d3">到了20世纪40年代，随着更新更强大的计算机器(如ABC计算机电子数值积分计算机)被发明，术语计算机开始用于指代那些机器而不是它们的祖先</data>
</edge>
<edge source="电子" target="資訊革命">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="电子" target="信息">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="电子" target="时代">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="电子" target="革命">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="电子" target="信息时代">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="电子" target="奠基">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="电子" target="資訊">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="电子" target="驱动力">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="电子" target="指代">
  <data key="d2">used_for</data>
  <data key="d3">到了20世纪40年代，随着更新更强大的计算机器(如ABC计算机电子数值积分计算机)被发明，术语计算机开始用于指代那些机器而不是它们的祖先</data>
</edge>
<edge source="数值积分" target="祖先">
  <data key="d2">used_for</data>
  <data key="d3">到了20世纪40年代，随着更新更强大的计算机器(如ABC计算机电子数值积分计算机)被发明，术语计算机开始用于指代那些机器而不是它们的祖先</data>
</edge>
<edge source="数值积分" target="指代">
  <data key="d2">used_for</data>
  <data key="d3">到了20世纪40年代，随着更新更强大的计算机器(如ABC计算机电子数值积分计算机)被发明，术语计算机开始用于指代那些机器而不是它们的祖先</data>
</edge>
<edge source="指代" target="祖先">
  <data key="d2">is_a</data>
  <data key="d3">到了20世纪40年代，随着更新更强大的计算机器(如ABC计算机电子数值积分计算机)被发明，术语计算机开始用于指代那些机器而不是它们的祖先</data>
</edge>
<edge source="学位点" target="普渡大学">
  <data key="d2">composed_of</data>
  <data key="d3">18 世界上第一个计算机科学学位点由普渡大学在1962年设立</data>
</edge>
<edge source="学位点" target="1962年">
  <data key="d2">composed_of</data>
  <data key="d3">18 世界上第一个计算机科学学位点由普渡大学在1962年设立</data>
</edge>
<edge source="学位点" target="19">
  <data key="d2">composed_of</data>
  <data key="d3">18 世界上第一个计算机科学学位点由普渡大学在1962年设立</data>
</edge>
<edge source="学位点" target="大学">
  <data key="d2">composed_of</data>
  <data key="d3">18 世界上第一个计算机科学学位点由普渡大学在1962年设立</data>
</edge>
<edge source="科学研究" target="50年">
  <data key="d2">is_a</data>
  <data key="d3">虽然最初很多人并不相信计算机可能成为科学研究的领域，但是随后的50年里也逐渐被学术界认可</data>
</edge>
<edge source="科学研究" target="学术">
  <data key="d2">is_a</data>
  <data key="d3">虽然最初很多人并不相信计算机可能成为科学研究的领域，但是随后的50年里也逐渐被学术界认可</data>
</edge>
<edge source="科学研究" target="学术界">
  <data key="d2">is_a</data>
  <data key="d3">虽然最初很多人并不相信计算机可能成为科学研究的领域，但是随后的50年里也逐渐被学术界认可</data>
</edge>
<edge source="科学研究" target="基础">
  <data key="d2">is_a</data>
  <data key="d3">35算法是计算机科学研究的一个重要领域，也是许多其他计算机科学技术的基础</data>
</edge>
<edge source="科学研究" target="科学技术">
  <data key="d2">is_a</data>
  <data key="d3">35算法是计算机科学研究的一个重要领域，也是许多其他计算机科学技术的基础</data>
</edge>
<edge source="科学研究" target="技术">
  <data key="d2">is_a</data>
  <data key="d3">35算法是计算机科学研究的一个重要领域，也是许多其他计算机科学技术的基础</data>
</edge>
<edge source="公司" target="之一">
  <data key="d2">is_a</data>
  <data key="d3">20IBM公司是那段时期计算机科学革命的参与者之一</data>
</edge>
<edge source="公司" target="计算机科学">
  <data key="d2">is_a</data>
  <data key="d3">20IBM公司是那段时期计算机科学革命的参与者之一</data>
</edge>
<edge source="公司" target="计算机">
  <data key="d2">is_a</data>
  <data key="d3">20IBM公司是那段时期计算机科学革命的参与者之一</data>
</edge>
<edge source="公司" target="科学">
  <data key="d2">is_a</data>
  <data key="d3">20IBM公司是那段时期计算机科学革命的参与者之一</data>
</edge>
<edge source="公司" target="时期">
  <data key="d2">is_a</data>
  <data key="d3">20IBM公司是那段时期计算机科学革命的参与者之一</data>
</edge>
<edge source="公司" target="革命">
  <data key="d2">is_a</data>
  <data key="d3">20IBM公司是那段时期计算机科学革命的参与者之一</data>
</edge>
<edge source="公司" target="参与者">
  <data key="d2">is_a</data>
  <data key="d3">20IBM公司是那段时期计算机科学革命的参与者之一</data>
</edge>
<edge source="階段" target="事情">
  <data key="d2">is_a</data>
  <data key="d3">2020世纪50年代后期，计算机科学学科還在发展階段，这種問題在当时是一件很常見的事情</data>
</edge>
<edge source="专业人士" target="用户">
  <data key="d2">uses</data>
  <data key="d3">现代社会见证了计算机从仅仅由专业人士使用到被广大用户接受的重大转变</data>
</edge>
<edge source="根本性" target="資訊革命">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="根本性" target="信息">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="根本性" target="时代">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="根本性" target="革命">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="根本性" target="信息时代">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="根本性" target="奠基">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="根本性" target="資訊">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="根本性" target="驱动力">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="贡献" target="資訊革命">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="贡献" target="信息">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="贡献" target="时代">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="贡献" target="革命">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="贡献" target="信息时代">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="贡献" target="奠基">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="贡献" target="資訊">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="贡献" target="驱动力">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="贡献" target="英语">
  <data key="d2">includes</data>
  <data key="d3">这些贡献包括： Peter Wegner（英语：Peter Wegner）提出计算机科学可以分成三个领域：数学工程学科學</data>
</edge>
<edge source="贡献" target="Peter Wegner">
  <data key="d2">includes</data>
  <data key="d3">这些贡献包括： Peter Wegner（英语：Peter Wegner）提出计算机科学可以分成三个领域：数学工程学科學</data>
</edge>
<edge source="贡献" target="Peter Wegner（英语：Peter Wegner）提出计算机科学可以分成三个领域：数学工程学科學">
  <data key="d2">includes</data>
  <data key="d3">这些贡献包括： Peter Wegner（英语：Peter Wegner）提出计算机科学可以分成三个领域：数学工程学科學</data>
</edge>
<edge source="贡献" target="英语：Peter Wegner">
  <data key="d2">includes</data>
  <data key="d3">这些贡献包括： Peter Wegner（英语：Peter Wegner）提出计算机科学可以分成三个领域：数学工程学科學</data>
</edge>
<edge source="电子学" target="資訊革命">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="电子学" target="信息">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="电子学" target="时代">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="电子学" target="革命">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="电子学" target="信息时代">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="电子学" target="奠基">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="电子学" target="資訊">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="电子学" target="驱动力">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="信息时代" target="資訊革命">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="信息时代" target="公元17501850年">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="信息时代" target="革命">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="信息时代" target="資訊">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="信息时代" target="驱动力">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="信息时代" target="工业革命">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="信息时代" target="工业">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="奠基" target="資訊革命">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="奠基" target="公元17501850年">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="奠基" target="革命">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="奠基" target="資訊">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="奠基" target="驱动力">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="奠基" target="工业革命">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="奠基" target="工业">
  <data key="d2">is_a</data>
  <data key="d3">虽然计算机科学被认定为一门正规学科的历史很短暂，但它对科学和社会做出了许多根本性的贡献ー事实上，计算机科学与电子学一样，是信息时代的奠基科学，也是資訊革命的驱动力，被视为继工业革命（公元17501850年）和新石器革命（公元前80005000年）之后人类技术进步的第三次重大飞跃</data>
</edge>
<edge source="范式" target="计算机科学">
  <data key="d2">applied_to</data>
  <data key="d3">Eden提议了三种范式应用于计算机科学的各个领域：31 作为一个学科，计算机科学涵盖了从算法的理论研究和计算的极限，到如何通过硬件和软件实现计算系统</data>
</edge>
<edge source="范式" target="学科">
  <data key="d2">applied_to</data>
  <data key="d3">Eden提议了三种范式应用于计算机科学的各个领域：31 作为一个学科，计算机科学涵盖了从算法的理论研究和计算的极限，到如何通过硬件和软件实现计算系统</data>
</edge>
<edge source="范式" target="领域">
  <data key="d2">applied_to</data>
  <data key="d3">Eden提议了三种范式应用于计算机科学的各个领域：31 作为一个学科，计算机科学涵盖了从算法的理论研究和计算的极限，到如何通过硬件和软件实现计算系统</data>
</edge>
<edge source="范式" target="计算机">
  <data key="d2">applied_to</data>
  <data key="d3">Eden提议了三种范式应用于计算机科学的各个领域：31 作为一个学科，计算机科学涵盖了从算法的理论研究和计算的极限，到如何通过硬件和软件实现计算系统</data>
</edge>
<edge source="范式" target="科学">
  <data key="d2">applied_to</data>
  <data key="d3">Eden提议了三种范式应用于计算机科学的各个领域：31 作为一个学科，计算机科学涵盖了从算法的理论研究和计算的极限，到如何通过硬件和软件实现计算系统</data>
</edge>
<edge source="范式" target="31 作为一个学科">
  <data key="d2">applied_to</data>
  <data key="d3">Eden提议了三种范式应用于计算机科学的各个领域：31 作为一个学科，计算机科学涵盖了从算法的理论研究和计算的极限，到如何通过硬件和软件实现计算系统</data>
</edge>
<edge source="范式" target="系统">
  <data key="d2">implements</data>
  <data key="d3">Eden提议了三种范式应用于计算机科学的各个领域：31 作为一个学科，计算机科学涵盖了从算法的理论研究和计算的极限，到如何通过硬件和软件实现计算系统</data>
</edge>
<edge source="硬件" target="计算机系统">
  <data key="d2">is_a</data>
  <data key="d3">例如，研究计算机硬件被看作是计算机工程的一部分，而对于商业计算机系统的研究和部署被称为信息技术或者信息系统</data>
</edge>
<edge source="硬件" target="系统">
  <data key="d2">implements</data>
  <data key="d3">Eden提议了三种范式应用于计算机科学的各个领域：31 作为一个学科，计算机科学涵盖了从算法的理论研究和计算的极限，到如何通过硬件和软件实现计算系统</data>
</edge>
<edge source="硬件" target="工程">
  <data key="d2">uses</data>
  <data key="d3">在软件和硬件设计方面，形式化方法的使用动机，如同其它工程学科，是通过适当的数学分析便有助于设计的可靠性和健壮性的期望</data>
</edge>
<edge source="硬件" target="商业">
  <data key="d2">is_a</data>
  <data key="d3">例如，研究计算机硬件被看作是计算机工程的一部分，而对于商业计算机系统的研究和部署被称为信息技术或者信息系统</data>
</edge>
<edge source="硬件" target="部分">
  <data key="d2">is_a</data>
  <data key="d3">例如，研究计算机硬件被看作是计算机工程的一部分，而对于商业计算机系统的研究和部署被称为信息技术或者信息系统</data>
</edge>
<edge source="硬件" target="数学">
  <data key="d2">uses</data>
  <data key="d3">在软件和硬件设计方面，形式化方法的使用动机，如同其它工程学科，是通过适当的数学分析便有助于设计的可靠性和健壮性的期望</data>
</edge>
<edge source="硬件" target="分析">
  <data key="d2">uses</data>
  <data key="d3">在软件和硬件设计方面，形式化方法的使用动机，如同其它工程学科，是通过适当的数学分析便有助于设计的可靠性和健壮性的期望</data>
</edge>
<edge source="硬件" target="可靠性">
  <data key="d2">is_a</data>
  <data key="d3">在软件和硬件设计方面，形式化方法的使用动机，如同其它工程学科，是通过适当的数学分析便有助于设计的可靠性和健壮性的期望</data>
</edge>
<edge source="硬件" target="健壮性">
  <data key="d2">is_a</data>
  <data key="d3">在软件和硬件设计方面，形式化方法的使用动机，如同其它工程学科，是通过适当的数学分析便有助于设计的可靠性和健壮性的期望</data>
</edge>
<edge source="硬件" target="核心">
  <data key="d2">is_a</data>
  <data key="d3">操作系统是管理电脑硬件与软件资源的电脑程式，同时也是电脑系统的核心与基石</data>
</edge>
<edge source="硬件" target="基石">
  <data key="d2">is_a</data>
  <data key="d3">操作系统是管理电脑硬件与软件资源的电脑程式，同时也是电脑系统的核心与基石</data>
</edge>
<edge source="硬件" target="学科">
  <data key="d2">uses</data>
  <data key="d3">在软件和硬件设计方面，形式化方法的使用动机，如同其它工程学科，是通过适当的数学分析便有助于设计的可靠性和健壮性的期望</data>
</edge>
<edge source="硬件" target="工程学">
  <data key="d2">uses</data>
  <data key="d3">在软件和硬件设计方面，形式化方法的使用动机，如同其它工程学科，是通过适当的数学分析便有助于设计的可靠性和健壮性的期望</data>
</edge>
<edge source="硬件" target="动机">
  <data key="d2">uses</data>
  <data key="d3">在软件和硬件设计方面，形式化方法的使用动机，如同其它工程学科，是通过适当的数学分析便有助于设计的可靠性和健壮性的期望</data>
</edge>
<edge source="编程" target="计算机科学">
  <data key="d2">is_a</data>
  <data key="d3">编程语言理论是计算机科学的一个分支，主要处理编程语言的设计实现分析描述和分类，以及它们的个体特性</data>
</edge>
<edge source="编程" target="分支">
  <data key="d2">is_a</data>
  <data key="d3">编程语言理论是计算机科学的一个分支，主要处理编程语言的设计实现分析描述和分类，以及它们的个体特性</data>
</edge>
<edge source="编程" target="计算机">
  <data key="d2">is_a</data>
  <data key="d3">编程语言理论是计算机科学的一个分支，主要处理编程语言的设计实现分析描述和分类，以及它们的个体特性</data>
</edge>
<edge source="编程" target="科学">
  <data key="d2">is_a</data>
  <data key="d3">编程语言理论是计算机科学的一个分支，主要处理编程语言的设计实现分析描述和分类，以及它们的个体特性</data>
</edge>
<edge source="编程" target="设计">
  <data key="d2">is_a</data>
  <data key="d3">编程语言理论是计算机科学的一个分支，主要处理编程语言的设计实现分析描述和分类，以及它们的个体特性</data>
</edge>
<edge source="编程" target="理论">
  <data key="d2">is_a</data>
  <data key="d3">的计算机科学课程则主要侧重于训练高级编程，而不是算法和计算理论</data>
</edge>
<edge source="编程" target="算法">
  <data key="d2">is_a</data>
  <data key="d3">的计算机科学课程则主要侧重于训练高级编程，而不是算法和计算理论</data>
</edge>
<edge source="编程" target="计算理论">
  <data key="d2">is_a</data>
  <data key="d3">的计算机科学课程则主要侧重于训练高级编程，而不是算法和计算理论</data>
</edge>
<edge source="编程" target="分析">
  <data key="d2">implements</data>
  <data key="d3">编程语言理论是计算机科学的一个分支，主要处理编程语言的设计实现分析描述和分类，以及它们的个体特性</data>
</edge>
<edge source="编程" target="分类">
  <data key="d2">implements</data>
  <data key="d3">编程语言理论是计算机科学的一个分支，主要处理编程语言的设计实现分析描述和分类，以及它们的个体特性</data>
</edge>
<edge source="编程" target="个体">
  <data key="d2">implements</data>
  <data key="d3">编程语言理论是计算机科学的一个分支，主要处理编程语言的设计实现分析描述和分类，以及它们的个体特性</data>
</edge>
<edge source="编程" target="特性">
  <data key="d2">implements</data>
  <data key="d3">编程语言理论是计算机科学的一个分支，主要处理编程语言的设计实现分析描述和分类，以及它们的个体特性</data>
</edge>
<edge source="计算机网络" target="计算机科学">
  <data key="d2">is_a</data>
  <data key="d3">计算机网络是管理遍及全球的计算机连接成的网络的计算机科学分支</data>
</edge>
<edge source="计算机网络" target="科学">
  <data key="d2">is_a</data>
  <data key="d3">计算机网络是管理遍及全球的计算机连接成的网络的计算机科学分支</data>
</edge>
<edge source="计算机网络" target="管理">
  <data key="d2">is_a</data>
  <data key="d3">计算机网络是管理遍及全球的计算机连接成的网络的计算机科学分支</data>
</edge>
<edge source="计算机网络" target="全球">
  <data key="d2">is_a</data>
  <data key="d3">计算机网络是管理遍及全球的计算机连接成的网络的计算机科学分支</data>
</edge>
<edge source="计算机网络" target="连接成">
  <data key="d2">is_a</data>
  <data key="d3">计算机网络是管理遍及全球的计算机连接成的网络的计算机科学分支</data>
</edge>
<edge source="方面" target="数学">
  <data key="d2">uses</data>
  <data key="d3">在软件和硬件设计方面，形式化方法的使用动机，如同其它工程学科，是通过适当的数学分析便有助于设计的可靠性和健壮性的期望</data>
</edge>
<edge source="方面" target="分析">
  <data key="d2">uses</data>
  <data key="d3">在软件和硬件设计方面，形式化方法的使用动机，如同其它工程学科，是通过适当的数学分析便有助于设计的可靠性和健壮性的期望</data>
</edge>
<edge source="方面" target="可靠性">
  <data key="d2">is_a</data>
  <data key="d3">在软件和硬件设计方面，形式化方法的使用动机，如同其它工程学科，是通过适当的数学分析便有助于设计的可靠性和健壮性的期望</data>
</edge>
<edge source="方面" target="健壮性">
  <data key="d2">is_a</data>
  <data key="d3">在软件和硬件设计方面，形式化方法的使用动机，如同其它工程学科，是通过适当的数学分析便有助于设计的可靠性和健壮性的期望</data>
</edge>
<edge source="方面" target="学科">
  <data key="d2">uses</data>
  <data key="d3">在软件和硬件设计方面，形式化方法的使用动机，如同其它工程学科，是通过适当的数学分析便有助于设计的可靠性和健壮性的期望</data>
</edge>
<edge source="方面" target="工程">
  <data key="d2">uses</data>
  <data key="d3">在软件和硬件设计方面，形式化方法的使用动机，如同其它工程学科，是通过适当的数学分析便有助于设计的可靠性和健壮性的期望</data>
</edge>
<edge source="方面" target="工程学">
  <data key="d2">uses</data>
  <data key="d3">在软件和硬件设计方面，形式化方法的使用动机，如同其它工程学科，是通过适当的数学分析便有助于设计的可靠性和健壮性的期望</data>
</edge>
<edge source="方面" target="动机">
  <data key="d2">uses</data>
  <data key="d3">在软件和硬件设计方面，形式化方法的使用动机，如同其它工程学科，是通过适当的数学分析便有助于设计的可靠性和健壮性的期望</data>
</edge>
<edge source="大奖" target="理论">
  <data key="d2">is_a</data>
  <data key="d3">问题，千禧年大奖难题之一，36是计算理论的一个开放问题</data>
</edge>
<edge source="大奖" target="计算理论">
  <data key="d2">is_a</data>
  <data key="d3">问题，千禧年大奖难题之一，36是计算理论的一个开放问题</data>
</edge>
<edge source="难题" target="理论">
  <data key="d2">is_a</data>
  <data key="d3">问题，千禧年大奖难题之一，36是计算理论的一个开放问题</data>
</edge>
<edge source="难题" target="计算理论">
  <data key="d2">is_a</data>
  <data key="d3">问题，千禧年大奖难题之一，36是计算理论的一个开放问题</data>
</edge>
<edge source="香农" target="数据">
  <data key="d2">used_for</data>
  <data key="d3">信息论与信息量化相关，由克劳德香农创建，用于寻找信号处理操作的根本极限，比如压缩数据和可靠的数据存储与通讯</data>
</edge>
<edge source="香农" target="信号处理">
  <data key="d2">used_for</data>
  <data key="d3">信息论与信息量化相关，由克劳德香农创建，用于寻找信号处理操作的根本极限，比如压缩数据和可靠的数据存储与通讯</data>
</edge>
<edge source="密码学" target="加密">
  <data key="d2">is_a</data>
  <data key="d3">密码学是对于隐藏（加密）和破译（解密）信息的实践与研究</data>
</edge>
<edge source="密码学" target="信息">
  <data key="d2">is_a</data>
  <data key="d3">密码学是对于隐藏（加密）和破译（解密）信息的实践与研究</data>
</edge>
<edge source="密码学" target="解密">
  <data key="d2">is_a</data>
  <data key="d3">密码学是对于隐藏（加密）和破译（解密）信息的实践与研究</data>
</edge>
<edge source="密码学" target="复杂性">
  <data key="d2">based_on</data>
  <data key="d3">现代密码学主要跟计算机科学相关，很多加密和解密算法都是基于它们的计算复杂性</data>
</edge>
<edge source="密码学" target="网络">
  <data key="d2">used_for</data>
  <data key="d3">编码（code）被用于数据压缩，密码学，前向纠错，近期也被用于网络编码</data>
</edge>
<edge source="动机" target="数学">
  <data key="d2">is_a</data>
  <data key="d3">在软件和硬件设计方面，形式化方法的使用动机，如同其它工程学科，是通过适当的数学分析便有助于设计的可靠性和健壮性的期望</data>
</edge>
<edge source="动机" target="分析">
  <data key="d2">is_a</data>
  <data key="d3">在软件和硬件设计方面，形式化方法的使用动机，如同其它工程学科，是通过适当的数学分析便有助于设计的可靠性和健壮性的期望</data>
</edge>
<edge source="动机" target="可靠性">
  <data key="d2">is_a</data>
  <data key="d3">在软件和硬件设计方面，形式化方法的使用动机，如同其它工程学科，是通过适当的数学分析便有助于设计的可靠性和健壮性的期望</data>
</edge>
<edge source="动机" target="健壮性">
  <data key="d2">is_a</data>
  <data key="d3">在软件和硬件设计方面，形式化方法的使用动机，如同其它工程学科，是通过适当的数学分析便有助于设计的可靠性和健壮性的期望</data>
</edge>
<edge source="成本" target="系统">
  <data key="d2">used_for</data>
  <data key="d3">但是，使用形式化方法会带来很高的成本，意味着它们通常只用于高可靠性系统，这种系统中安全或保安（security）是最重要的</data>
</edge>
<edge source="成本" target="可靠性">
  <data key="d2">used_for</data>
  <data key="d3">但是，使用形式化方法会带来很高的成本，意味着它们通常只用于高可靠性系统，这种系统中安全或保安（security）是最重要的</data>
</edge>
<edge source="成本" target="高可靠性">
  <data key="d2">used_for</data>
  <data key="d3">但是，使用形式化方法会带来很高的成本，意味着它们通常只用于高可靠性系统，这种系统中安全或保安（security）是最重要的</data>
</edge>
<edge source="成本" target="保安">
  <data key="d2">used_for</data>
  <data key="d3">但是，使用形式化方法会带来很高的成本，意味着它们通常只用于高可靠性系统，这种系统中安全或保安（security）是最重要的</data>
</edge>
<edge source="成本" target="security">
  <data key="d2">used_for</data>
  <data key="d3">但是，使用形式化方法会带来很高的成本，意味着它们通常只用于高可靠性系统，这种系统中安全或保安（security）是最重要的</data>
</edge>
<edge source="数字" target="设计">
  <data key="d2">is_a</data>
  <data key="d3">计算机系统结构，或者数字计算机组织，是一个计算机系统的概念设计和根本运作结构</data>
</edge>
<edge source="数字" target="概念">
  <data key="d2">is_a</data>
  <data key="d3">计算机系统结构，或者数字计算机组织，是一个计算机系统的概念设计和根本运作结构</data>
</edge>
<edge source="数字" target="概念设计">
  <data key="d2">is_a</data>
  <data key="d3">计算机系统结构，或者数字计算机组织，是一个计算机系统的概念设计和根本运作结构</data>
</edge>
<edge source="数字" target="运作">
  <data key="d2">is_a</data>
  <data key="d3">计算机系统结构，或者数字计算机组织，是一个计算机系统的概念设计和根本运作结构</data>
</edge>
<edge source="电脑程式" target="核心">
  <data key="d2">is_a</data>
  <data key="d3">操作系统是管理电脑硬件与软件资源的电脑程式，同时也是电脑系统的核心与基石</data>
</edge>
<edge source="电脑程式" target="基石">
  <data key="d2">is_a</data>
  <data key="d3">操作系统是管理电脑硬件与软件资源的电脑程式，同时也是电脑系统的核心与基石</data>
</edge>
<edge source="作业系统" target="电脑">
  <data key="d2">uses</data>
  <data key="d3">作业系统也提供一个让使用者与各电脑设备互动的操作介面</data>
</edge>
<edge source="作业系统" target="使用者">
  <data key="d2">uses</data>
  <data key="d3">作业系统也提供一个让使用者与各电脑设备互动的操作介面</data>
</edge>
<edge source="作业系统" target="电脑设备">
  <data key="d2">uses</data>
  <data key="d3">作业系统也提供一个让使用者与各电脑设备互动的操作介面</data>
</edge>
<edge source="作业系统" target="介面">
  <data key="d2">uses</data>
  <data key="d3">作业系统也提供一个让使用者与各电脑设备互动的操作介面</data>
</edge>
<edge source="数学模型" target="通用">
  <data key="d2">used_for</data>
  <data key="d3">一些数学模型，如Petri网进程演算和PRAM模型，被建立以用于通用并发计算</data>
</edge>
<edge source="计算机技术" target="信息">
  <data key="d2">includes</data>
  <data key="d3">计算机安全是计算机技术的一个分支，其目标包括保护信息免受未经授权的访问中断和修改，同时为系统的预期用户保持系统的可访问性和可用性</data>
</edge>
<edge source="计算机技术" target="中断">
  <data key="d2">includes</data>
  <data key="d3">计算机安全是计算机技术的一个分支，其目标包括保护信息免受未经授权的访问中断和修改，同时为系统的预期用户保持系统的可访问性和可用性</data>
</edge>
<edge source="解密" target="复杂性">
  <data key="d2">based_on</data>
  <data key="d3">现代密码学主要跟计算机科学相关，很多加密和解密算法都是基于它们的计算复杂性</data>
</edge>
<edge source="图像" target="用户">
  <data key="d2">uses</data>
  <data key="d3">多媒体技术是指通过计算机对文字数据图形图像动画声音等多种媒体信息进行综合处理和管理，使用户可以通过多种感官与计算机进行实时信息交互的技术，又称为计算机多媒体技术</data>
</edge>
<edge source="图像" target="感官">
  <data key="d2">uses</data>
  <data key="d3">多媒体技术是指通过计算机对文字数据图形图像动画声音等多种媒体信息进行综合处理和管理，使用户可以通过多种感官与计算机进行实时信息交互的技术，又称为计算机多媒体技术</data>
</edge>
<edge source="科学计算" target="研究">
  <data key="d2">is_a</data>
  <data key="d3">科学计算（或者计算科学）是关注构建数学模型和量化分析技术的研究领域，同时通过计算机分析和解决科学问题</data>
</edge>
<edge source="科学计算" target="领域">
  <data key="d2">is_a</data>
  <data key="d3">科学计算（或者计算科学）是关注构建数学模型和量化分析技术的研究领域，同时通过计算机分析和解决科学问题</data>
</edge>
<edge source="科学计算" target="数学">
  <data key="d2">is_a</data>
  <data key="d3">科学计算（或者计算科学）是关注构建数学模型和量化分析技术的研究领域，同时通过计算机分析和解决科学问题</data>
</edge>
<edge source="科学计算" target="技术">
  <data key="d2">is_a</data>
  <data key="d3">科学计算（或者计算科学）是关注构建数学模型和量化分析技术的研究领域，同时通过计算机分析和解决科学问题</data>
</edge>
<edge source="科学计算" target="模型">
  <data key="d2">is_a</data>
  <data key="d3">科学计算（或者计算科学）是关注构建数学模型和量化分析技术的研究领域，同时通过计算机分析和解决科学问题</data>
</edge>
<edge source="科学计算" target="分析">
  <data key="d2">is_a</data>
  <data key="d3">科学计算（或者计算科学）是关注构建数学模型和量化分析技术的研究领域，同时通过计算机分析和解决科学问题</data>
</edge>
<edge source="科学计算" target="数学模型">
  <data key="d2">is_a</data>
  <data key="d3">科学计算（或者计算科学）是关注构建数学模型和量化分析技术的研究领域，同时通过计算机分析和解决科学问题</data>
</edge>
<edge source="多媒体技术" target="计算机">
  <data key="d2">is_a</data>
  <data key="d3">多媒体技术是指通过计算机对文字数据图形图像动画声音等多种媒体信息进行综合处理和管理，使用户可以通过多种感官与计算机进行实时信息交互的技术，又称为计算机多媒体技术</data>
</edge>
<edge source="多媒体技术" target="数据">
  <data key="d2">is_a</data>
  <data key="d3">多媒体技术是指通过计算机对文字数据图形图像动画声音等多种媒体信息进行综合处理和管理，使用户可以通过多种感官与计算机进行实时信息交互的技术，又称为计算机多媒体技术</data>
</edge>
<edge source="多媒体技术" target="图像">
  <data key="d2">is_a</data>
  <data key="d3">多媒体技术是指通过计算机对文字数据图形图像动画声音等多种媒体信息进行综合处理和管理，使用户可以通过多种感官与计算机进行实时信息交互的技术，又称为计算机多媒体技术</data>
</edge>
<edge source="多媒体技术" target="文字">
  <data key="d2">is_a</data>
  <data key="d3">多媒体技术是指通过计算机对文字数据图形图像动画声音等多种媒体信息进行综合处理和管理，使用户可以通过多种感官与计算机进行实时信息交互的技术，又称为计算机多媒体技术</data>
</edge>
<edge source="多媒体技术" target="图形图像">
  <data key="d2">is_a</data>
  <data key="d3">多媒体技术是指通过计算机对文字数据图形图像动画声音等多种媒体信息进行综合处理和管理，使用户可以通过多种感官与计算机进行实时信息交互的技术，又称为计算机多媒体技术</data>
</edge>
<edge source="多媒体技术" target="动画">
  <data key="d2">is_a</data>
  <data key="d3">多媒体技术是指通过计算机对文字数据图形图像动画声音等多种媒体信息进行综合处理和管理，使用户可以通过多种感官与计算机进行实时信息交互的技术，又称为计算机多媒体技术</data>
</edge>
<edge source="多媒体技术" target="声音">
  <data key="d2">is_a</data>
  <data key="d3">多媒体技术是指通过计算机对文字数据图形图像动画声音等多种媒体信息进行综合处理和管理，使用户可以通过多种感官与计算机进行实时信息交互的技术，又称为计算机多媒体技术</data>
</edge>
<edge source="多媒体技术" target="用户">
  <data key="d2">uses</data>
  <data key="d3">多媒体技术是指通过计算机对文字数据图形图像动画声音等多种媒体信息进行综合处理和管理，使用户可以通过多种感官与计算机进行实时信息交互的技术，又称为计算机多媒体技术</data>
</edge>
<edge source="多媒体技术" target="感官">
  <data key="d2">uses</data>
  <data key="d3">多媒体技术是指通过计算机对文字数据图形图像动画声音等多种媒体信息进行综合处理和管理，使用户可以通过多种感官与计算机进行实时信息交互的技术，又称为计算机多媒体技术</data>
</edge>
<edge source="图形图像" target="用户">
  <data key="d2">uses</data>
  <data key="d3">多媒体技术是指通过计算机对文字数据图形图像动画声音等多种媒体信息进行综合处理和管理，使用户可以通过多种感官与计算机进行实时信息交互的技术，又称为计算机多媒体技术</data>
</edge>
<edge source="图形图像" target="感官">
  <data key="d2">uses</data>
  <data key="d3">多媒体技术是指通过计算机对文字数据图形图像动画声音等多种媒体信息进行综合处理和管理，使用户可以通过多种感官与计算机进行实时信息交互的技术，又称为计算机多媒体技术</data>
</edge>
<edge source="动画" target="用户">
  <data key="d2">uses</data>
  <data key="d3">多媒体技术是指通过计算机对文字数据图形图像动画声音等多种媒体信息进行综合处理和管理，使用户可以通过多种感官与计算机进行实时信息交互的技术，又称为计算机多媒体技术</data>
</edge>
<edge source="动画" target="感官">
  <data key="d2">uses</data>
  <data key="d3">多媒体技术是指通过计算机对文字数据图形图像动画声音等多种媒体信息进行综合处理和管理，使用户可以通过多种感官与计算机进行实时信息交互的技术，又称为计算机多媒体技术</data>
</edge>
<edge source="声音" target="用户">
  <data key="d2">uses</data>
  <data key="d3">多媒体技术是指通过计算机对文字数据图形图像动画声音等多种媒体信息进行综合处理和管理，使用户可以通过多种感官与计算机进行实时信息交互的技术，又称为计算机多媒体技术</data>
</edge>
<edge source="声音" target="感官">
  <data key="d2">uses</data>
  <data key="d3">多媒体技术是指通过计算机对文字数据图形图像动画声音等多种媒体信息进行综合处理和管理，使用户可以通过多种感官与计算机进行实时信息交互的技术，又称为计算机多媒体技术</data>
</edge>
<edge source="媒体" target="计算机">
  <data key="d2">is_a</data>
  <data key="d3">多媒体技术是指通过计算机对文字数据图形图像动画声音等多种媒体信息进行综合处理和管理，使用户可以通过多种感官与计算机进行实时信息交互的技术，又称为计算机多媒体技术</data>
</edge>
<edge source="媒体" target="数据">
  <data key="d2">is_a</data>
  <data key="d3">多媒体技术是指通过计算机对文字数据图形图像动画声音等多种媒体信息进行综合处理和管理，使用户可以通过多种感官与计算机进行实时信息交互的技术，又称为计算机多媒体技术</data>
</edge>
<edge source="媒体" target="图像">
  <data key="d2">is_a</data>
  <data key="d3">多媒体技术是指通过计算机对文字数据图形图像动画声音等多种媒体信息进行综合处理和管理，使用户可以通过多种感官与计算机进行实时信息交互的技术，又称为计算机多媒体技术</data>
</edge>
<edge source="媒体" target="文字">
  <data key="d2">is_a</data>
  <data key="d3">多媒体技术是指通过计算机对文字数据图形图像动画声音等多种媒体信息进行综合处理和管理，使用户可以通过多种感官与计算机进行实时信息交互的技术，又称为计算机多媒体技术</data>
</edge>
<edge source="媒体" target="图形图像">
  <data key="d2">is_a</data>
  <data key="d3">多媒体技术是指通过计算机对文字数据图形图像动画声音等多种媒体信息进行综合处理和管理，使用户可以通过多种感官与计算机进行实时信息交互的技术，又称为计算机多媒体技术</data>
</edge>
<edge source="媒体" target="动画">
  <data key="d2">is_a</data>
  <data key="d3">多媒体技术是指通过计算机对文字数据图形图像动画声音等多种媒体信息进行综合处理和管理，使用户可以通过多种感官与计算机进行实时信息交互的技术，又称为计算机多媒体技术</data>
</edge>
<edge source="媒体" target="声音">
  <data key="d2">is_a</data>
  <data key="d3">多媒体技术是指通过计算机对文字数据图形图像动画声音等多种媒体信息进行综合处理和管理，使用户可以通过多种感官与计算机进行实时信息交互的技术，又称为计算机多媒体技术</data>
</edge>
<edge source="媒体" target="用户">
  <data key="d2">uses</data>
  <data key="d3">多媒体技术是指通过计算机对文字数据图形图像动画声音等多种媒体信息进行综合处理和管理，使用户可以通过多种感官与计算机进行实时信息交互的技术，又称为计算机多媒体技术</data>
</edge>
<edge source="媒体" target="感官">
  <data key="d2">uses</data>
  <data key="d3">多媒体技术是指通过计算机对文字数据图形图像动画声音等多种媒体信息进行综合处理和管理，使用户可以通过多种感官与计算机进行实时信息交互的技术，又称为计算机多媒体技术</data>
</edge>
<edge source="综合" target="科学">
  <data key="d2">is_a</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="综合" target="物理">
  <data key="d2">is_a</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="综合" target="智能">
  <data key="d2">used_for</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="综合" target="用户">
  <data key="d2">uses</data>
  <data key="d3">多媒体技术是指通过计算机对文字数据图形图像动画声音等多种媒体信息进行综合处理和管理，使用户可以通过多种感官与计算机进行实时信息交互的技术，又称为计算机多媒体技术</data>
</edge>
<edge source="综合" target="感官">
  <data key="d2">uses</data>
  <data key="d3">多媒体技术是指通过计算机对文字数据图形图像动画声音等多种媒体信息进行综合处理和管理，使用户可以通过多种感官与计算机进行实时信息交互的技术，又称为计算机多媒体技术</data>
</edge>
<edge source="研究者" target="科学">
  <data key="d2">is_a</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="研究者" target="物理">
  <data key="d2">is_a</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="研究者" target="智能">
  <data key="d2">used_for</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="专长" target="科学">
  <data key="d2">is_a</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="专长" target="物理">
  <data key="d2">is_a</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="专长" target="智能">
  <data key="d2">used_for</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="符号学" target="科学">
  <data key="d2">is_a</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="符号学" target="物理">
  <data key="d2">is_a</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="符号学" target="智能">
  <data key="d2">used_for</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="电机" target="科学">
  <data key="d2">is_a</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="电机" target="物理">
  <data key="d2">is_a</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="电机" target="智能">
  <data key="d2">used_for</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="精神" target="科学">
  <data key="d2">is_a</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="精神" target="物理">
  <data key="d2">is_a</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="精神" target="智能">
  <data key="d2">used_for</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="神经" target="科学">
  <data key="d2">is_a</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="神经" target="物理">
  <data key="d2">is_a</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="神经" target="智能">
  <data key="d2">used_for</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="生理学" target="科学">
  <data key="d2">is_a</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="生理学" target="物理">
  <data key="d2">is_a</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="生理学" target="智能">
  <data key="d2">used_for</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="智力" target="科学">
  <data key="d2">is_a</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="智力" target="物理">
  <data key="d2">is_a</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="智力" target="智能">
  <data key="d2">used_for</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="金融" target="科学">
  <data key="d2">is_a</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="金融" target="物理">
  <data key="d2">is_a</data>
  <data key="d3">无论是在理论还是应用上，都要求研究者在多个学科领域具备细致的综合的专长，比如应用数学，逻辑，符号学，电机工程学，精神哲学，神经生理学和社会智力，用于推动智能研究领域，或者被应用到其它需要计算理解与建模的学科领域，如金融或是物理科学</data>
</edge>
<edge source="争议" target="定义">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学和软件工程的关系是一个有争议的话题，随后关于什么是软件工程，计算机科学又该如何定义的争论使得情况更加混乱</data>
</edge>
<edge source="话题" target="定义">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学和软件工程的关系是一个有争议的话题，随后关于什么是软件工程，计算机科学又该如何定义的争论使得情况更加混乱</data>
</edge>
<edge source="程序设计" target="计算机科学">
  <data key="d2">supports</data>
  <data key="d3">通常也教授程序设计，但仅仅将它看作是支持计算机科学其它领域的媒介，而不是高级研究的重心</data>
</edge>
<edge source="程序设计" target="研究">
  <data key="d2">supports</data>
  <data key="d3">通常也教授程序设计，但仅仅将它看作是支持计算机科学其它领域的媒介，而不是高级研究的重心</data>
</edge>
<edge source="程序设计" target="领域">
  <data key="d2">supports</data>
  <data key="d3">通常也教授程序设计，但仅仅将它看作是支持计算机科学其它领域的媒介，而不是高级研究的重心</data>
</edge>
<edge source="程序设计" target="计算机">
  <data key="d2">supports</data>
  <data key="d3">通常也教授程序设计，但仅仅将它看作是支持计算机科学其它领域的媒介，而不是高级研究的重心</data>
</edge>
<edge source="程序设计" target="科学">
  <data key="d2">supports</data>
  <data key="d3">通常也教授程序设计，但仅仅将它看作是支持计算机科学其它领域的媒介，而不是高级研究的重心</data>
</edge>
<edge source="程序设计" target="媒介">
  <data key="d2">supports</data>
  <data key="d3">通常也教授程序设计，但仅仅将它看作是支持计算机科学其它领域的媒介，而不是高级研究的重心</data>
</edge>
<edge source="媒介" target="研究">
  <data key="d2">is_a</data>
  <data key="d3">通常也教授程序设计，但仅仅将它看作是支持计算机科学其它领域的媒介，而不是高级研究的重心</data>
</edge>
<edge source="课程" target="理论">
  <data key="d2">is_a</data>
  <data key="d3">的计算机科学课程则主要侧重于训练高级编程，而不是算法和计算理论</data>
</edge>
<edge source="课程" target="算法">
  <data key="d2">is_a</data>
  <data key="d3">的计算机科学课程则主要侧重于训练高级编程，而不是算法和计算理论</data>
</edge>
<edge source="课程" target="计算理论">
  <data key="d2">is_a</data>
  <data key="d3">的计算机科学课程则主要侧重于训练高级编程，而不是算法和计算理论</data>
</edge>
<edge source="日益" target="12">
  <data key="d2">is_a</data>
  <data key="d3">然而，尽管计算机科学专业日益推动着美国经济，但是计算机科学教育依然不存在大多数美国K12课程中</data>
</edge>
<edge source="日益" target="课程">
  <data key="d2">is_a</data>
  <data key="d3">然而，尽管计算机科学专业日益推动着美国经济，但是计算机科学教育依然不存在大多数美国K12课程中</data>
</edge>
<edge source="日益" target="教育">
  <data key="d2">is_a</data>
  <data key="d3">然而，尽管计算机科学专业日益推动着美国经济，但是计算机科学教育依然不存在大多数美国K12课程中</data>
</edge>
<edge source="经济" target="12">
  <data key="d2">is_a</data>
  <data key="d3">然而，尽管计算机科学专业日益推动着美国经济，但是计算机科学教育依然不存在大多数美国K12课程中</data>
</edge>
<edge source="经济" target="课程">
  <data key="d2">is_a</data>
  <data key="d3">然而，尽管计算机科学专业日益推动着美国经济，但是计算机科学教育依然不存在大多数美国K12课程中</data>
</edge>
<edge source="经济" target="教育">
  <data key="d2">is_a</data>
  <data key="d3">然而，尽管计算机科学专业日益推动着美国经济，但是计算机科学教育依然不存在大多数美国K12课程中</data>
</edge>
<edge source="页面" target="教师">
  <data key="d2">supports</data>
  <data key="d3">配合Running on Empty这篇文章，一个新的无党派宣传联盟：Computing in the Core（CinC）被建立，以影响联邦和政府政策，比如Computer Science Education Act（页面存档备份，存于互联网档案馆）要求政府拨款以制定计划完善计算机科学教育及支持计算机科学教师</data>
</edge>
<edge source="备份" target="教师">
  <data key="d2">supports</data>
  <data key="d3">配合Running on Empty这篇文章，一个新的无党派宣传联盟：Computing in the Core（CinC）被建立，以影响联邦和政府政策，比如Computer Science Education Act（页面存档备份，存于互联网档案馆）要求政府拨款以制定计划完善计算机科学教育及支持计算机科学教师</data>
</edge>
<edge source="互联网" target="教师">
  <data key="d2">supports</data>
  <data key="d3">配合Running on Empty这篇文章，一个新的无党派宣传联盟：Computing in the Core（CinC）被建立，以影响联邦和政府政策，比如Computer Science Education Act（页面存档备份，存于互联网档案馆）要求政府拨款以制定计划完善计算机科学教育及支持计算机科学教师</data>
</edge>
<edge source="篇文章" target="影响">
  <data key="d2">affects</data>
  <data key="d3">配合Running on Empty这篇文章，一个新的无党派宣传联盟：Computing in the Core（CinC）被建立，以影响联邦和政府政策，比如Computer Science Education Act（页面存档备份，存于互联网档案馆）要求政府拨款以制定计划完善计算机科学教育及支持计算机科学教师</data>
</edge>
<edge source="篇文章" target="联邦">
  <data key="d2">affects</data>
  <data key="d3">配合Running on Empty这篇文章，一个新的无党派宣传联盟：Computing in the Core（CinC）被建立，以影响联邦和政府政策，比如Computer Science Education Act（页面存档备份，存于互联网档案馆）要求政府拨款以制定计划完善计算机科学教育及支持计算机科学教师</data>
</edge>
<edge source="篇文章" target="政府">
  <data key="d2">affects</data>
  <data key="d3">配合Running on Empty这篇文章，一个新的无党派宣传联盟：Computing in the Core（CinC）被建立，以影响联邦和政府政策，比如Computer Science Education Act（页面存档备份，存于互联网档案馆）要求政府拨款以制定计划完善计算机科学教育及支持计算机科学教师</data>
</edge>
<edge source="篇文章" target="政策">
  <data key="d2">affects</data>
  <data key="d3">配合Running on Empty这篇文章，一个新的无党派宣传联盟：Computing in the Core（CinC）被建立，以影响联邦和政府政策，比如Computer Science Education Act（页面存档备份，存于互联网档案馆）要求政府拨款以制定计划完善计算机科学教育及支持计算机科学教师</data>
</edge>
<edge source="篇文章" target="教师">
  <data key="d2">supports</data>
  <data key="d3">配合Running on Empty这篇文章，一个新的无党派宣传联盟：Computing in the Core（CinC）被建立，以影响联邦和政府政策，比如Computer Science Education Act（页面存档备份，存于互联网档案馆）要求政府拨款以制定计划完善计算机科学教育及支持计算机科学教师</data>
</edge>
<edge source="无党派" target="影响">
  <data key="d2">affects</data>
  <data key="d3">配合Running on Empty这篇文章，一个新的无党派宣传联盟：Computing in the Core（CinC）被建立，以影响联邦和政府政策，比如Computer Science Education Act（页面存档备份，存于互联网档案馆）要求政府拨款以制定计划完善计算机科学教育及支持计算机科学教师</data>
</edge>
<edge source="无党派" target="联邦">
  <data key="d2">affects</data>
  <data key="d3">配合Running on Empty这篇文章，一个新的无党派宣传联盟：Computing in the Core（CinC）被建立，以影响联邦和政府政策，比如Computer Science Education Act（页面存档备份，存于互联网档案馆）要求政府拨款以制定计划完善计算机科学教育及支持计算机科学教师</data>
</edge>
<edge source="无党派" target="政府">
  <data key="d2">affects</data>
  <data key="d3">配合Running on Empty这篇文章，一个新的无党派宣传联盟：Computing in the Core（CinC）被建立，以影响联邦和政府政策，比如Computer Science Education Act（页面存档备份，存于互联网档案馆）要求政府拨款以制定计划完善计算机科学教育及支持计算机科学教师</data>
</edge>
<edge source="无党派" target="政策">
  <data key="d2">affects</data>
  <data key="d3">配合Running on Empty这篇文章，一个新的无党派宣传联盟：Computing in the Core（CinC）被建立，以影响联邦和政府政策，比如Computer Science Education Act（页面存档备份，存于互联网档案馆）要求政府拨款以制定计划完善计算机科学教育及支持计算机科学教师</data>
</edge>
<edge source="无党派" target="教师">
  <data key="d2">supports</data>
  <data key="d3">配合Running on Empty这篇文章，一个新的无党派宣传联盟：Computing in the Core（CinC）被建立，以影响联邦和政府政策，比如Computer Science Education Act（页面存档备份，存于互联网档案馆）要求政府拨款以制定计划完善计算机科学教育及支持计算机科学教师</data>
</edge>
<edge source="宣传" target="影响">
  <data key="d2">affects</data>
  <data key="d3">配合Running on Empty这篇文章，一个新的无党派宣传联盟：Computing in the Core（CinC）被建立，以影响联邦和政府政策，比如Computer Science Education Act（页面存档备份，存于互联网档案馆）要求政府拨款以制定计划完善计算机科学教育及支持计算机科学教师</data>
</edge>
<edge source="宣传" target="联邦">
  <data key="d2">affects</data>
  <data key="d3">配合Running on Empty这篇文章，一个新的无党派宣传联盟：Computing in the Core（CinC）被建立，以影响联邦和政府政策，比如Computer Science Education Act（页面存档备份，存于互联网档案馆）要求政府拨款以制定计划完善计算机科学教育及支持计算机科学教师</data>
</edge>
<edge source="宣传" target="政府">
  <data key="d2">affects</data>
  <data key="d3">配合Running on Empty这篇文章，一个新的无党派宣传联盟：Computing in the Core（CinC）被建立，以影响联邦和政府政策，比如Computer Science Education Act（页面存档备份，存于互联网档案馆）要求政府拨款以制定计划完善计算机科学教育及支持计算机科学教师</data>
</edge>
<edge source="宣传" target="政策">
  <data key="d2">affects</data>
  <data key="d3">配合Running on Empty这篇文章，一个新的无党派宣传联盟：Computing in the Core（CinC）被建立，以影响联邦和政府政策，比如Computer Science Education Act（页面存档备份，存于互联网档案馆）要求政府拨款以制定计划完善计算机科学教育及支持计算机科学教师</data>
</edge>
<edge source="宣传" target="教师">
  <data key="d2">supports</data>
  <data key="d3">配合Running on Empty这篇文章，一个新的无党派宣传联盟：Computing in the Core（CinC）被建立，以影响联邦和政府政策，比如Computer Science Education Act（页面存档备份，存于互联网档案馆）要求政府拨款以制定计划完善计算机科学教育及支持计算机科学教师</data>
</edge>
<edge source="联邦" target="教师">
  <data key="d2">supports</data>
  <data key="d3">配合Running on Empty这篇文章，一个新的无党派宣传联盟：Computing in the Core（CinC）被建立，以影响联邦和政府政策，比如Computer Science Education Act（页面存档备份，存于互联网档案馆）要求政府拨款以制定计划完善计算机科学教育及支持计算机科学教师</data>
</edge>
<edge source="政府" target="教师">
  <data key="d2">supports</data>
  <data key="d3">配合Running on Empty这篇文章，一个新的无党派宣传联盟：Computing in the Core（CinC）被建立，以影响联邦和政府政策，比如Computer Science Education Act（页面存档备份，存于互联网档案馆）要求政府拨款以制定计划完善计算机科学教育及支持计算机科学教师</data>
</edge>
<edge source="政策" target="教师">
  <data key="d2">supports</data>
  <data key="d3">配合Running on Empty这篇文章，一个新的无党派宣传联盟：Computing in the Core（CinC）被建立，以影响联邦和政府政策，比如Computer Science Education Act（页面存档备份，存于互联网档案馆）要求政府拨款以制定计划完善计算机科学教育及支持计算机科学教师</data>
</edge>
<edge source="计划" target="教师">
  <data key="d2">supports</data>
  <data key="d3">配合Running on Empty这篇文章，一个新的无党派宣传联盟：Computing in the Core（CinC）被建立，以影响联邦和政府政策，比如Computer Science Education Act（页面存档备份，存于互联网档案馆）要求政府拨款以制定计划完善计算机科学教育及支持计算机科学教师</data>
</edge>
<edge source="datalogy" target="计算机">
  <data key="d2">is_a</data>
  <data key="d3">丹麦科学家彼得諾爾建议使用术语"datalogy"，以反映这一事实，即科学学科是围绕着数据和数据处理，而不一定要涉及计算机</data>
</edge>
<edge source="datalogy" target="数据">
  <data key="d2">is_a</data>
  <data key="d3">丹麦科学家彼得諾爾建议使用术语"datalogy"，以反映这一事实，即科学学科是围绕着数据和数据处理，而不一定要涉及计算机</data>
</edge>
<edge source="datalogy" target="数据处理">
  <data key="d2">is_a</data>
  <data key="d3">丹麦科学家彼得諾爾建议使用术语"datalogy"，以反映这一事实，即科学学科是围绕着数据和数据处理，而不一定要涉及计算机</data>
</edge>
<edge source="Computer science" target="系统性">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="Computer science" target="研究">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="Computer science" target="信息">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="Computer science" target="理论">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="Computer science" target="基础">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="Computer science" target="计算机系统">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="Computer science" target="系统">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="Computer science" target="实用技术">
  <data key="d2">implements</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="Computer science" target="学科">
  <data key="d2">implements</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="Computer science" target="技术">
  <data key="d2">implements</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="UCPH Department of Computer Science）" target="教授">
  <data key="d2">is_a</data>
  <data key="d3">第一个使用这个术语的科学机构是哥本哈根大学计算科学系（英语：UCPH Department of Computer Science），该学院成立于1969年，彼得諾爾便是第一任教授</data>
</edge>
<edge source="计算机科学并不只是关于计算机" target="望远镜">
  <data key="d2">is_a</data>
  <data key="d3">著名计算机科学家艾兹赫尔戴克斯特拉曾经指出：计算机科学并不只是关于计算机，就像天文学并不只是关于望远镜一样</data>
</edge>
<edge source="Stepped reckoner）的建造工作并于1694年竣工" target="第一">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="Stepped reckoner）的建造工作并于1694年竣工" target="计算机科学">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="Stepped reckoner）的建造工作并于1694年竣工" target="信息">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="Stepped reckoner）的建造工作并于1694年竣工" target="理论">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="Stepped reckoner）的建造工作并于1694年竣工" target="计算机">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="Stepped reckoner）的建造工作并于1694年竣工" target="科学">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="Stepped reckoner）的建造工作并于1694年竣工" target="科学家">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="Stepped reckoner）的建造工作并于1694年竣工" target="理论家">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="31 作为一个学科" target="系统">
  <data key="d2">implements</data>
  <data key="d3">Eden提议了三种范式应用于计算机科学的各个领域：31 作为一个学科，计算机科学涵盖了从算法的理论研究和计算的极限，到如何通过硬件和软件实现计算系统</data>
</edge>
<edge source="计算理论" target="專注于">
  <data key="d2">is_a</data>
  <data key="d3">12计算理论的研究就是專注于回答这个根本问题，关于什么能够被计算，去实施这些计算又需要用到多少资源</data>
</edge>
<edge source="计算理论" target="问题">
  <data key="d2">is_a</data>
  <data key="d3">12计算理论的研究就是專注于回答这个根本问题，关于什么能够被计算，去实施这些计算又需要用到多少资源</data>
</edge>
<edge source="Computing in the Core（CinC）被建立" target="影响">
  <data key="d2">affects</data>
  <data key="d3">配合Running on Empty这篇文章，一个新的无党派宣传联盟：Computing in the Core（CinC）被建立，以影响联邦和政府政策，比如Computer Science Education Act（页面存档备份，存于互联网档案馆）要求政府拨款以制定计划完善计算机科学教育及支持计算机科学教师</data>
</edge>
<edge source="Computing in the Core（CinC）被建立" target="联邦">
  <data key="d2">affects</data>
  <data key="d3">配合Running on Empty这篇文章，一个新的无党派宣传联盟：Computing in the Core（CinC）被建立，以影响联邦和政府政策，比如Computer Science Education Act（页面存档备份，存于互联网档案馆）要求政府拨款以制定计划完善计算机科学教育及支持计算机科学教师</data>
</edge>
<edge source="Computing in the Core（CinC）被建立" target="政府">
  <data key="d2">affects</data>
  <data key="d3">配合Running on Empty这篇文章，一个新的无党派宣传联盟：Computing in the Core（CinC）被建立，以影响联邦和政府政策，比如Computer Science Education Act（页面存档备份，存于互联网档案馆）要求政府拨款以制定计划完善计算机科学教育及支持计算机科学教师</data>
</edge>
<edge source="Computing in the Core（CinC）被建立" target="政策">
  <data key="d2">affects</data>
  <data key="d3">配合Running on Empty这篇文章，一个新的无党派宣传联盟：Computing in the Core（CinC）被建立，以影响联邦和政府政策，比如Computer Science Education Act（页面存档备份，存于互联网档案馆）要求政府拨款以制定计划完善计算机科学教育及支持计算机科学教师</data>
</edge>
<edge source="Computing in the Core（CinC）被建立" target="教师">
  <data key="d2">supports</data>
  <data key="d3">配合Running on Empty这篇文章，一个新的无党派宣传联盟：Computing in the Core（CinC）被建立，以影响联邦和政府政策，比如Computer Science Education Act（页面存档备份，存于互联网档案馆）要求政府拨款以制定计划完善计算机科学教育及支持计算机科学教师</data>
</edge>
<edge source="英語：Computer science，有时缩写为CS" target="系统性">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="英語：Computer science，有时缩写为CS" target="研究">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="英語：Computer science，有时缩写为CS" target="信息">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="英語：Computer science，有时缩写为CS" target="理论">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="英語：Computer science，有时缩写为CS" target="基础">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="英語：Computer science，有时缩写为CS" target="计算机系统">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="英語：Computer science，有时缩写为CS" target="系统">
  <data key="d2">is_a</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="英語：Computer science，有时缩写为CS" target="实用技术">
  <data key="d2">implements</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="英語：Computer science，有时缩写为CS" target="学科">
  <data key="d2">implements</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="英語：Computer science，有时缩写为CS" target="技术">
  <data key="d2">implements</data>
  <data key="d3">计算机科学（英語：Computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科</data>
</edge>
<edge source="比如信息技术" target="经验">
  <data key="d2">uses</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="比如信息技术" target="有关">
  <data key="d2">uses</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="比如信息技术" target="玩游戏">
  <data key="d2">uses</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="比如信息技术" target="游戏">
  <data key="d2">uses</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="比如信息技术" target="文字">
  <data key="d2">uses</data>
  <data key="d3">有时公众会误以为计算机科学就是解决计算机问题的事业（比如信息技术），或者只是与使用计算机的经验有关，如玩游戏上网或者文字处理</data>
</edge>
<edge source="computer science" target="数量">
  <data key="d2">contains</data>
  <data key="d3">9 尽管计算机科学（computer science）的名字里包含计算机这几个字，但实际上计算机科学相当数量的领域都不涉及计算机本身的研究</data>
</edge>
<edge source="computer science" target="实际">
  <data key="d2">contains</data>
  <data key="d3">9 尽管计算机科学（computer science）的名字里包含计算机这几个字，但实际上计算机科学相当数量的领域都不涉及计算机本身的研究</data>
</edge>
<edge source="英语：UCPH Department of Computer Science" target="教授">
  <data key="d2">is_a</data>
  <data key="d3">第一个使用这个术语的科学机构是哥本哈根大学计算科学系（英语：UCPH Department of Computer Science），该学院成立于1969年，彼得諾爾便是第一任教授</data>
</edge>
<edge source="英语：Stepped reckoner" target="第一">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="英语：Stepped reckoner" target="计算机科学">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="英语：Stepped reckoner" target="信息">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="英语：Stepped reckoner" target="理论">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="英语：Stepped reckoner" target="计算机">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="英语：Stepped reckoner" target="科学">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="英语：Stepped reckoner" target="科学家">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="英语：Stepped reckoner" target="理论家">
  <data key="d2">is_a</data>
  <data key="d3">1673年，莱布尼兹开始了步进计算器（英语：Stepped reckoner）的建造工作并于1694年竣工，他也因为记录了二进制系统而被认为是第一个计算机科学家和信息理论家</data>
</edge>
<edge source="如ABC计算机电子数值积分计算机" target="祖先">
  <data key="d2">used_for</data>
  <data key="d3">到了20世纪40年代，随着更新更强大的计算机器(如ABC计算机电子数值积分计算机)被发明，术语计算机开始用于指代那些机器而不是它们的祖先</data>
</edge>
<edge source="如ABC计算机电子数值积分计算机" target="指代">
  <data key="d2">used_for</data>
  <data key="d3">到了20世纪40年代，随着更新更强大的计算机器(如ABC计算机电子数值积分计算机)被发明，术语计算机开始用于指代那些机器而不是它们的祖先</data>
</edge>
<edge source="以前被叫做Computing Sciences Accreditation Board" target="for Computing Machinery">
  <data key="d2">composed_of</data>
  <data key="d3">3233 CSAB（以前被叫做Computing Sciences Accreditation Board），由Association for Computing Machinery（ACM）和IEEE计算机协会（英语：IEEE Computer Society）（IEEECS）的代表组成34，确立了计算机科学学科的4个主要领域：计算理论，算法与数据结构，编程方法与编程语言，以及计算机组成与架构</data>
</edge>
<edge source="code" target="数据">
  <data key="d2">used_for</data>
  <data key="d3">编码（code）被用于数据压缩，密码学，前向纠错，近期也被用于网络编码</data>
</edge>
<edge source="code" target="密码学">
  <data key="d2">used_for</data>
  <data key="d3">编码（code）被用于数据压缩，密码学，前向纠错，近期也被用于网络编码</data>
</edge>
<edge source="code" target="网络">
  <data key="d2">used_for</data>
  <data key="d3">编码（code）被用于数据压缩，密码学，前向纠错，近期也被用于网络编码</data>
</edge>
<edge source="或者计算科学" target="研究">
  <data key="d2">is_a</data>
  <data key="d3">科学计算（或者计算科学）是关注构建数学模型和量化分析技术的研究领域，同时通过计算机分析和解决科学问题</data>
</edge>
<edge source="或者计算科学" target="领域">
  <data key="d2">is_a</data>
  <data key="d3">科学计算（或者计算科学）是关注构建数学模型和量化分析技术的研究领域，同时通过计算机分析和解决科学问题</data>
</edge>
<edge source="或者计算科学" target="数学">
  <data key="d2">is_a</data>
  <data key="d3">科学计算（或者计算科学）是关注构建数学模型和量化分析技术的研究领域，同时通过计算机分析和解决科学问题</data>
</edge>
<edge source="或者计算科学" target="技术">
  <data key="d2">is_a</data>
  <data key="d3">科学计算（或者计算科学）是关注构建数学模型和量化分析技术的研究领域，同时通过计算机分析和解决科学问题</data>
</edge>
<edge source="或者计算科学" target="模型">
  <data key="d2">is_a</data>
  <data key="d3">科学计算（或者计算科学）是关注构建数学模型和量化分析技术的研究领域，同时通过计算机分析和解决科学问题</data>
</edge>
<edge source="或者计算科学" target="分析">
  <data key="d2">is_a</data>
  <data key="d3">科学计算（或者计算科学）是关注构建数学模型和量化分析技术的研究领域，同时通过计算机分析和解决科学问题</data>
</edge>
<edge source="或者计算科学" target="数学模型">
  <data key="d2">is_a</data>
  <data key="d3">科学计算（或者计算科学）是关注构建数学模型和量化分析技术的研究领域，同时通过计算机分析和解决科学问题</data>
</edge>
<edge source="页面存档备份，存于互联网档案馆" target="教师">
  <data key="d2">supports</data>
  <data key="d3">配合Running on Empty这篇文章，一个新的无党派宣传联盟：Computing in the Core（CinC）被建立，以影响联邦和政府政策，比如Computer Science Education Act（页面存档备份，存于互联网档案馆）要求政府拨款以制定计划完善计算机科学教育及支持计算机科学教师</data>
</edge>
</graph></graphml>